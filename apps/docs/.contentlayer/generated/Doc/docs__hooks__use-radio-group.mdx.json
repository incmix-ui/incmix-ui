{
  "title": "useRadioGroup",
  "package": "@incmix-ui/radio",
  "description": "React hooks to manage radio groups.",
  "scope": "usage",
  "body": {
    "raw": "\n`useRadioGroup` is a custom hook that provides all the state management logic\nfor a group of radios.\n\n## Import\n\n```js\nimport { useRadioGroup } from '@incmix-ui/react'\n```\n\n## Return value\n\nThe `useRadioGroup` hook returns following props\n\n| Name            | Type                                | Description                                                                    |\n| --------------- | ----------------------------------- | ------------------------------------------------------------------------------ |\n| `value`         | `StringOrNumber[]`                  | The value of radio group.                                                      |\n| `name`          | `string`                            | The name of the radio options. All radio options must use the same name.       |\n| `ref`           | `any`                               | The ref of the radio group.                                                    |\n| `isDisabled`    | `boolean`                           | A utility to manage disabled state.                                            |\n| `isFocusable`   | `boolean`                           | A utility to manage focused state.                                             |\n| `focus`         | `() => void`                        | A utility function to set the focus on the first enabled radio.                |\n| `onChange`      | `(nextValue: EventOrValue) => void` | The onChange handler for the radio group.                                      |\n| `setValue`      | `(state: StringOrNumber[]) => void` | A function to set the value of the radio group.                                |\n| `getRadioProps` | `(props?: Dict) => Dict`            | A function that takes root props and handles changes for the radio group       |\n| `getRootProps`  | `(props?: Dict) => Dict`            | A function that takes radio root props and handles changes for the radio group |\n| `htmlProps`     | `{}`                                | A function that takes radio root props and handles changes for the radio group |\n\n## Usage\n\n```jsx\nfunction Example() {\n  function CustomRadio(props) {\n    const { image, ...radioProps } = props\n    const { state, getInputProps, getCheckboxProps, htmlProps, getLabelProps } = useRadio(radioProps)\n\n    return (\n      <incmix.label {...htmlProps} cursor=\"pointer\">\n        <input {...getInputProps({})} hidden />\n        <Box {...getCheckboxProps()} bg={state.isChecked ? 'green.200' : 'transparent'} w={12} p={1} rounded=\"full\">\n          <Image src={image} rounded=\"full\" {...getLabelProps()} />\n        </Box>\n      </incmix.label>\n    )\n  }\n\n  const toast = useToast()\n\n  const avatars = [\n    { name: 'Kat', image: 'https://randomuser.me/api/portraits/women/44.jpg' },\n    { name: 'Kevin', image: 'https://randomuser.me/api/portraits/men/86.jpg' },\n    { name: 'Andy', image: 'https://randomuser.me/api/portraits/men/29.jpg' },\n    { name: 'Jess', image: 'https://randomuser.me/api/portraits/women/95.jpg' },\n  ]\n\n  const handleChange = value => {\n    toast({\n      title: `The value got changed to ${value}!`,\n      status: 'success',\n      duration: 2000,\n    })\n  }\n\n  const { value, getRadioProps, getRootProps } = useRadioGroup({\n    defaultValue: 'Kevin',\n    onChange: handleChange,\n  })\n\n  return (\n    <Stack {...getRootProps()}>\n      <Text>The selected radio is: {value}</Text>\n      <HStack>\n        {avatars.map(avatar => {\n          return <CustomRadio key={avatar.name} image={avatar.image} {...getRadioProps({ value: avatar.name })} />\n        })}\n      </HStack>\n    </Stack>\n  )\n}\n```\n\n## Using `isDisabled` and `isFocusable`\n\nWhen providing the hook with the `isDisabled` and/or `isFocusable` props, this\nvalues also need to be returned and passed to the radio inputs.\n\nThis is different than simply passing them as props to the `RadioGroup`\ncomponent because the component has access to context to supply the values to\nthe radio inputs.\n\nBelow is an example with `isDisabled` being passed to the hook and used with the\n`Radio` component. If needed, this custom component can than be controllable by\na parent, which would supply the logic to determine if the inputs need to be\ndisabled.\n\n```jsx manual=true\nfunction CustomRadioGroup(props) {\n  const { options, ...rest } = props\n\n  const { getRootProps, getRadioProps, isDisabled } = useRadioGroup({\n    ...rest,\n  })\n\n  const group = getRootProps()\n\n  return (\n    <HStack {...group}>\n      {options.map(value => {\n        const radio = getRadioProps({ value })\n        return (\n          <Radio isDisabled={isDisabled} key={value} {...radio}>\n            {value}\n          </Radio>\n        )\n      })}\n    </HStack>\n  )\n}\n\nfunction Parent() {\n  const [isDisabled, setIsDisabled] = useState(true)\n\n  // Some logic to handle the disabled state\n\n  return (\n    <>\n      {/* Any components above */}\n      <CustomRadioGroup isDisabled={isDisabled} options={['react', 'vue', 'svelte']} />\n      {/* Any components below */}\n    </>\n  )\n}\n\nrender(<Parent />)\n```\n\n## Parameters\n\nThe `useRadioGroup` hook accepts an object with the following properties:\n\n<PropsTable of=\"useRadioGroup\" />\n",
    "code": "var Component=(()=>{var h=Object.create;var d=Object.defineProperty;var p=Object.getOwnPropertyDescriptor;var u=Object.getOwnPropertyNames;var m=Object.getPrototypeOf,g=Object.prototype.hasOwnProperty;var b=(t,e)=>()=>(e||t((e={exports:{}}).exports,e),e.exports),f=(t,e)=>{for(var o in e)d(t,o,{get:e[o],enumerable:!0})},a=(t,e,o,i)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let r of u(e))!g.call(t,r)&&r!==o&&d(t,r,{get:()=>e[r],enumerable:!(i=p(e,r))||i.enumerable});return t};var v=(t,e,o)=>(o=t!=null?h(m(t)):{},a(e||!t||!t.__esModule?d(o,\"default\",{value:t,enumerable:!0}):o,t)),R=t=>a(d({},\"__esModule\",{value:!0}),t);var c=b((w,s)=>{s.exports=_jsx_runtime});var D={};f(D,{default:()=>k,frontmatter:()=>x});var n=v(c()),x={title:\"useRadioGroup\",package:\"@incmix-ui/radio\",description:\"React hooks to manage radio groups.\"};function l(t){let e=Object.assign({p:\"p\",code:\"code\",h2:\"h2\",pre:\"pre\",table:\"table\",thead:\"thead\",tr:\"tr\",th:\"th\",tbody:\"tbody\",td:\"td\"},t.components),{PropsTable:o}=e;return o||y(\"PropsTable\",!0),(0,n.jsxs)(n.Fragment,{children:[(0,n.jsxs)(e.p,{children:[(0,n.jsx)(e.code,{children:\"useRadioGroup\"}),` is a custom hook that provides all the state management logic\nfor a group of radios.`]}),`\n`,(0,n.jsx)(e.h2,{id:\"import\",children:\"Import\"}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-js\",children:`import { useRadioGroup } from '@incmix-ui/react'\n`})}),`\n`,(0,n.jsx)(e.h2,{id:\"return-value\",children:\"Return value\"}),`\n`,(0,n.jsxs)(e.p,{children:[\"The \",(0,n.jsx)(e.code,{children:\"useRadioGroup\"}),\" hook returns following props\"]}),`\n`,(0,n.jsxs)(e.table,{children:[(0,n.jsx)(e.thead,{children:(0,n.jsxs)(e.tr,{children:[(0,n.jsx)(e.th,{children:\"Name\"}),(0,n.jsx)(e.th,{children:\"Type\"}),(0,n.jsx)(e.th,{children:\"Description\"})]})}),(0,n.jsxs)(e.tbody,{children:[(0,n.jsxs)(e.tr,{children:[(0,n.jsx)(e.td,{children:(0,n.jsx)(e.code,{children:\"value\"})}),(0,n.jsx)(e.td,{children:(0,n.jsx)(e.code,{children:\"StringOrNumber[]\"})}),(0,n.jsx)(e.td,{children:\"The value of radio group.\"})]}),(0,n.jsxs)(e.tr,{children:[(0,n.jsx)(e.td,{children:(0,n.jsx)(e.code,{children:\"name\"})}),(0,n.jsx)(e.td,{children:(0,n.jsx)(e.code,{children:\"string\"})}),(0,n.jsx)(e.td,{children:\"The name of the radio options. All radio options must use the same name.\"})]}),(0,n.jsxs)(e.tr,{children:[(0,n.jsx)(e.td,{children:(0,n.jsx)(e.code,{children:\"ref\"})}),(0,n.jsx)(e.td,{children:(0,n.jsx)(e.code,{children:\"any\"})}),(0,n.jsx)(e.td,{children:\"The ref of the radio group.\"})]}),(0,n.jsxs)(e.tr,{children:[(0,n.jsx)(e.td,{children:(0,n.jsx)(e.code,{children:\"isDisabled\"})}),(0,n.jsx)(e.td,{children:(0,n.jsx)(e.code,{children:\"boolean\"})}),(0,n.jsx)(e.td,{children:\"A utility to manage disabled state.\"})]}),(0,n.jsxs)(e.tr,{children:[(0,n.jsx)(e.td,{children:(0,n.jsx)(e.code,{children:\"isFocusable\"})}),(0,n.jsx)(e.td,{children:(0,n.jsx)(e.code,{children:\"boolean\"})}),(0,n.jsx)(e.td,{children:\"A utility to manage focused state.\"})]}),(0,n.jsxs)(e.tr,{children:[(0,n.jsx)(e.td,{children:(0,n.jsx)(e.code,{children:\"focus\"})}),(0,n.jsx)(e.td,{children:(0,n.jsx)(e.code,{children:\"() => void\"})}),(0,n.jsx)(e.td,{children:\"A utility function to set the focus on the first enabled radio.\"})]}),(0,n.jsxs)(e.tr,{children:[(0,n.jsx)(e.td,{children:(0,n.jsx)(e.code,{children:\"onChange\"})}),(0,n.jsx)(e.td,{children:(0,n.jsx)(e.code,{children:\"(nextValue: EventOrValue) => void\"})}),(0,n.jsx)(e.td,{children:\"The onChange handler for the radio group.\"})]}),(0,n.jsxs)(e.tr,{children:[(0,n.jsx)(e.td,{children:(0,n.jsx)(e.code,{children:\"setValue\"})}),(0,n.jsx)(e.td,{children:(0,n.jsx)(e.code,{children:\"(state: StringOrNumber[]) => void\"})}),(0,n.jsx)(e.td,{children:\"A function to set the value of the radio group.\"})]}),(0,n.jsxs)(e.tr,{children:[(0,n.jsx)(e.td,{children:(0,n.jsx)(e.code,{children:\"getRadioProps\"})}),(0,n.jsx)(e.td,{children:(0,n.jsx)(e.code,{children:\"(props?: Dict) => Dict\"})}),(0,n.jsx)(e.td,{children:\"A function that takes root props and handles changes for the radio group\"})]}),(0,n.jsxs)(e.tr,{children:[(0,n.jsx)(e.td,{children:(0,n.jsx)(e.code,{children:\"getRootProps\"})}),(0,n.jsx)(e.td,{children:(0,n.jsx)(e.code,{children:\"(props?: Dict) => Dict\"})}),(0,n.jsx)(e.td,{children:\"A function that takes radio root props and handles changes for the radio group\"})]}),(0,n.jsxs)(e.tr,{children:[(0,n.jsx)(e.td,{children:(0,n.jsx)(e.code,{children:\"htmlProps\"})}),(0,n.jsx)(e.td,{children:(0,n.jsx)(e.code,{children:\"{}\"})}),(0,n.jsx)(e.td,{children:\"A function that takes radio root props and handles changes for the radio group\"})]})]})]}),`\n`,(0,n.jsx)(e.h2,{id:\"usage\",children:\"Usage\"}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-jsx\",children:`function Example() {\n  function CustomRadio(props) {\n    const { image, ...radioProps } = props\n    const { state, getInputProps, getCheckboxProps, htmlProps, getLabelProps } = useRadio(radioProps)\n\n    return (\n      <incmix.label {...htmlProps} cursor=\"pointer\">\n        <input {...getInputProps({})} hidden />\n        <Box {...getCheckboxProps()} bg={state.isChecked ? 'green.200' : 'transparent'} w={12} p={1} rounded=\"full\">\n          <Image src={image} rounded=\"full\" {...getLabelProps()} />\n        </Box>\n      </incmix.label>\n    )\n  }\n\n  const toast = useToast()\n\n  const avatars = [\n    { name: 'Kat', image: 'https://randomuser.me/api/portraits/women/44.jpg' },\n    { name: 'Kevin', image: 'https://randomuser.me/api/portraits/men/86.jpg' },\n    { name: 'Andy', image: 'https://randomuser.me/api/portraits/men/29.jpg' },\n    { name: 'Jess', image: 'https://randomuser.me/api/portraits/women/95.jpg' },\n  ]\n\n  const handleChange = value => {\n    toast({\n      title: \\`The value got changed to \\${value}!\\`,\n      status: 'success',\n      duration: 2000,\n    })\n  }\n\n  const { value, getRadioProps, getRootProps } = useRadioGroup({\n    defaultValue: 'Kevin',\n    onChange: handleChange,\n  })\n\n  return (\n    <Stack {...getRootProps()}>\n      <Text>The selected radio is: {value}</Text>\n      <HStack>\n        {avatars.map(avatar => {\n          return <CustomRadio key={avatar.name} image={avatar.image} {...getRadioProps({ value: avatar.name })} />\n        })}\n      </HStack>\n    </Stack>\n  )\n}\n`})}),`\n`,(0,n.jsxs)(e.h2,{id:\"using-isdisabled-and-isfocusable\",children:[\"Using \",(0,n.jsx)(e.code,{children:\"isDisabled\"}),\" and \",(0,n.jsx)(e.code,{children:\"isFocusable\"})]}),`\n`,(0,n.jsxs)(e.p,{children:[\"When providing the hook with the \",(0,n.jsx)(e.code,{children:\"isDisabled\"}),\" and/or \",(0,n.jsx)(e.code,{children:\"isFocusable\"}),` props, this\nvalues also need to be returned and passed to the radio inputs.`]}),`\n`,(0,n.jsxs)(e.p,{children:[\"This is different than simply passing them as props to the \",(0,n.jsx)(e.code,{children:\"RadioGroup\"}),`\ncomponent because the component has access to context to supply the values to\nthe radio inputs.`]}),`\n`,(0,n.jsxs)(e.p,{children:[\"Below is an example with \",(0,n.jsx)(e.code,{children:\"isDisabled\"}),` being passed to the hook and used with the\n`,(0,n.jsx)(e.code,{children:\"Radio\"}),` component. If needed, this custom component can than be controllable by\na parent, which would supply the logic to determine if the inputs need to be\ndisabled.`]}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-jsx\",manual:\"true\",children:`function CustomRadioGroup(props) {\n  const { options, ...rest } = props\n\n  const { getRootProps, getRadioProps, isDisabled } = useRadioGroup({\n    ...rest,\n  })\n\n  const group = getRootProps()\n\n  return (\n    <HStack {...group}>\n      {options.map(value => {\n        const radio = getRadioProps({ value })\n        return (\n          <Radio isDisabled={isDisabled} key={value} {...radio}>\n            {value}\n          </Radio>\n        )\n      })}\n    </HStack>\n  )\n}\n\nfunction Parent() {\n  const [isDisabled, setIsDisabled] = useState(true)\n\n  // Some logic to handle the disabled state\n\n  return (\n    <>\n      {/* Any components above */}\n      <CustomRadioGroup isDisabled={isDisabled} options={['react', 'vue', 'svelte']} />\n      {/* Any components below */}\n    </>\n  )\n}\n\nrender(<Parent />)\n`})}),`\n`,(0,n.jsx)(e.h2,{id:\"parameters\",children:\"Parameters\"}),`\n`,(0,n.jsxs)(e.p,{children:[\"The \",(0,n.jsx)(e.code,{children:\"useRadioGroup\"}),\" hook accepts an object with the following properties:\"]}),`\n`,(0,n.jsx)(o,{of:\"useRadioGroup\"})]})}function P(t={}){let{wrapper:e}=t.components||{};return e?(0,n.jsx)(e,Object.assign({},t,{children:(0,n.jsx)(l,t)})):l(t)}var k=P;function y(t,e){throw new Error(\"Expected \"+(e?\"component\":\"object\")+\" `\"+t+\"` to be defined: you likely forgot to import, pass, or provide it.\")}return R(D);})();\n;return Component;"
  },
  "_id": "docs/hooks/use-radio-group.mdx",
  "_raw": {
    "sourceFilePath": "docs/hooks/use-radio-group.mdx",
    "sourceFileName": "use-radio-group.mdx",
    "sourceFileDir": "docs/hooks",
    "contentType": "mdx",
    "flattenedPath": "docs/hooks/use-radio-group"
  },
  "type": "Doc",
  "slug": "/docs/hooks/use-radio-group",
  "frontMatter": {
    "title": "useRadioGroup",
    "package": "@incmix-ui/radio",
    "description": "React hooks to manage radio groups.",
    "slug": "/docs/hooks/use-radio-group",
    "editUrl": "https://github.com/incmix-ui/incmix-ui-docs/tree/main/content/docs/hooks/use-radio-group.mdx",
    "headings": [
      {
        "text": "Import",
        "id": "import",
        "level": "h2"
      },
      {
        "text": "Return value",
        "id": "return-value",
        "level": "h2"
      },
      {
        "text": "Usage",
        "id": "usage",
        "level": "h2"
      },
      {
        "text": "Using `isDisabled` and `isFocusable`",
        "id": "using-isdisabled-and-isfocusable",
        "level": "h2"
      },
      {
        "text": "Parameters",
        "id": "parameters",
        "level": "h2"
      }
    ]
  }
}
