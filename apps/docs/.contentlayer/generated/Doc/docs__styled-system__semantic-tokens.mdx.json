{
  "title": "Semantic Tokens",
  "description": "Incmix UI provides built-in support for conditional semantic design tokens",
  "scope": "usage",
  "category": "features",
  "body": {
    "raw": "\nIncmix UI supports **conditional semantic tokens** for every scale (colors, font\nsizes, etc). This allows to change the value of a token depending on the\nenvironment, like dark mode, direction and other CSS selectors.\n\nWe are using CSS variables which can change with a CSS condition. E.g. the color\ntoken `text` can have a different value in dark and light mode.\n\n## Token References\n\nA semantic token value can be a `string | SemanticValue`. The `string` value is\nused as reference to another token in the same scale e.g.\n\n```js\n{\n  error: 'red.500'\n}\n```\n\n## Conditional Tokens\n\nThe object notation `SemanticValue` allows to define the default value and\nconditional keys. The condition can be one of\n[incmix pseudo selectors](/docs/styled-system/style-props#pseudo) or a\ncustom CSS selector. Try `_dark`, `_light`, `_rtl`, `_ltr` and\n`_mediaReduceMotion`.\n\nIf you are tempted to use a CSS selector like `_focus`, `_hover` etc. define\nthose CSS variables at the component level.\n\nThe CSS variables are attached to the host element (CSS selector `:host, :root`)\nand cannot react to the components `<LightMode />` and `<DarkMode />`,\n`data-theme` attributes nor body class `.incmix-ui-dark`. It listens to e.g.\n`html[data-theme=\"dark\"]`.\n\n> Since the CSS variables are attached to the host element by default we can\n> only specify certain CSS selectors. E.g. `_hover` would always trigger, when\n> the `html` element is hovered - that's mostly not intended.\n\n```js\n{\n  text: {\n    default: 'gray.900',\n    _dark: 'gray.50'\n  }\n}\n```\n\nSemantic Tokens can reference theme tokens like `gray.900` and allow plain CSS\nvalues like e.g. `#F7FAFC`.\n\n```jsx live=false\nimport { IncmixProvider, extendTheme } from '@incmix-ui/react'\nconst customTheme = extendTheme({\n  semanticTokens: {\n    colors: {\n      error: 'red.500',\n      text: {\n        default: 'gray.900',\n        _dark: 'gray.50',\n      },\n    },\n  },\n})\n\nconst App = () => (\n  <IncmixProvider theme={customTheme}>\n    <Text color=\"text\">will be gray.900 in light mode and gray.50 in dark mode</Text>\n  </IncmixProvider>\n)\n```\n\n## Theme Example\n\n```jsx live=false\nimport { extendTheme } from '@incmix-ui/react'\n\nconst theme = extendTheme({\n  semanticTokens: {\n    colors: {\n      error: 'red.500',\n      success: 'green.500',\n      primary: {\n        default: 'red.500',\n        _dark: 'red.400',\n      },\n      secondary: {\n        default: 'red.800',\n        _dark: 'red.700',\n      },\n    },\n  },\n})\n```\n",
    "code": "var Component=(()=>{var h=Object.create;var c=Object.defineProperty;var m=Object.getOwnPropertyDescriptor;var u=Object.getOwnPropertyNames;var g=Object.getPrototypeOf,p=Object.prototype.hasOwnProperty;var k=(t,e)=>()=>(e||t((e={exports:{}}).exports,e),e.exports),f=(t,e)=>{for(var o in e)c(t,o,{get:e[o],enumerable:!0})},i=(t,e,o,d)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let r of u(e))!p.call(t,r)&&r!==o&&c(t,r,{get:()=>e[r],enumerable:!(d=m(e,r))||d.enumerable});return t};var x=(t,e,o)=>(o=t!=null?h(g(t)):{},i(e||!t||!t.__esModule?c(o,\"default\",{value:t,enumerable:!0}):o,t)),S=t=>i(c({},\"__esModule\",{value:!0}),t);var l=k((C,a)=>{a.exports=_jsx_runtime});var _={};f(_,{default:()=>T,frontmatter:()=>y});var n=x(l()),y={title:\"Semantic Tokens\",description:\"Incmix UI provides built-in support for conditional semantic design tokens\",category:\"features\"};function s(t){let e=Object.assign({p:\"p\",strong:\"strong\",code:\"code\",h2:\"h2\",pre:\"pre\",a:\"a\",blockquote:\"blockquote\"},t.components);return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsxs)(e.p,{children:[\"Incmix UI supports \",(0,n.jsx)(e.strong,{children:\"conditional semantic tokens\"}),` for every scale (colors, font\nsizes, etc). This allows to change the value of a token depending on the\nenvironment, like dark mode, direction and other CSS selectors.`]}),`\n`,(0,n.jsxs)(e.p,{children:[`We are using CSS variables which can change with a CSS condition. E.g. the color\ntoken `,(0,n.jsx)(e.code,{children:\"text\"}),\" can have a different value in dark and light mode.\"]}),`\n`,(0,n.jsx)(e.h2,{id:\"token-references\",children:\"Token References\"}),`\n`,(0,n.jsxs)(e.p,{children:[\"A semantic token value can be a \",(0,n.jsx)(e.code,{children:\"string | SemanticValue\"}),\". The \",(0,n.jsx)(e.code,{children:\"string\"}),` value is\nused as reference to another token in the same scale e.g.`]}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-js\",children:`{\n  error: 'red.500'\n}\n`})}),`\n`,(0,n.jsx)(e.h2,{id:\"conditional-tokens\",children:\"Conditional Tokens\"}),`\n`,(0,n.jsxs)(e.p,{children:[\"The object notation \",(0,n.jsx)(e.code,{children:\"SemanticValue\"}),` allows to define the default value and\nconditional keys. The condition can be one of\n`,(0,n.jsx)(e.a,{href:\"/docs/styled-system/style-props#pseudo\",children:\"incmix pseudo selectors\"}),` or a\ncustom CSS selector. Try `,(0,n.jsx)(e.code,{children:\"_dark\"}),\", \",(0,n.jsx)(e.code,{children:\"_light\"}),\", \",(0,n.jsx)(e.code,{children:\"_rtl\"}),\", \",(0,n.jsx)(e.code,{children:\"_ltr\"}),` and\n`,(0,n.jsx)(e.code,{children:\"_mediaReduceMotion\"}),\".\"]}),`\n`,(0,n.jsxs)(e.p,{children:[\"If you are tempted to use a CSS selector like \",(0,n.jsx)(e.code,{children:\"_focus\"}),\", \",(0,n.jsx)(e.code,{children:\"_hover\"}),` etc. define\nthose CSS variables at the component level.`]}),`\n`,(0,n.jsxs)(e.p,{children:[\"The CSS variables are attached to the host element (CSS selector \",(0,n.jsx)(e.code,{children:\":host, :root\"}),`)\nand cannot react to the components `,(0,n.jsx)(e.code,{children:\"<LightMode />\"}),\" and \",(0,n.jsx)(e.code,{children:\"<DarkMode />\"}),`,\n`,(0,n.jsx)(e.code,{children:\"data-theme\"}),\" attributes nor body class \",(0,n.jsx)(e.code,{children:\".incmix-ui-dark\"}),`. It listens to e.g.\n`,(0,n.jsx)(e.code,{children:'html[data-theme=\"dark\"]'}),\".\"]}),`\n`,(0,n.jsxs)(e.blockquote,{children:[`\n`,(0,n.jsxs)(e.p,{children:[`Since the CSS variables are attached to the host element by default we can\nonly specify certain CSS selectors. E.g. `,(0,n.jsx)(e.code,{children:\"_hover\"}),` would always trigger, when\nthe `,(0,n.jsx)(e.code,{children:\"html\"}),\" element is hovered - that's mostly not intended.\"]}),`\n`]}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-js\",children:`{\n  text: {\n    default: 'gray.900',\n    _dark: 'gray.50'\n  }\n}\n`})}),`\n`,(0,n.jsxs)(e.p,{children:[\"Semantic Tokens can reference theme tokens like \",(0,n.jsx)(e.code,{children:\"gray.900\"}),` and allow plain CSS\nvalues like e.g. `,(0,n.jsx)(e.code,{children:\"#F7FAFC\"}),\".\"]}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-jsx\",live:\"false\",children:`import { IncmixProvider, extendTheme } from '@incmix-ui/react'\nconst customTheme = extendTheme({\n  semanticTokens: {\n    colors: {\n      error: 'red.500',\n      text: {\n        default: 'gray.900',\n        _dark: 'gray.50',\n      },\n    },\n  },\n})\n\nconst App = () => (\n  <IncmixProvider theme={customTheme}>\n    <Text color=\"text\">will be gray.900 in light mode and gray.50 in dark mode</Text>\n  </IncmixProvider>\n)\n`})}),`\n`,(0,n.jsx)(e.h2,{id:\"theme-example\",children:\"Theme Example\"}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-jsx\",live:\"false\",children:`import { extendTheme } from '@incmix-ui/react'\n\nconst theme = extendTheme({\n  semanticTokens: {\n    colors: {\n      error: 'red.500',\n      success: 'green.500',\n      primary: {\n        default: 'red.500',\n        _dark: 'red.400',\n      },\n      secondary: {\n        default: 'red.800',\n        _dark: 'red.700',\n      },\n    },\n  },\n})\n`})})]})}function v(t={}){let{wrapper:e}=t.components||{};return e?(0,n.jsx)(e,Object.assign({},t,{children:(0,n.jsx)(s,t)})):s(t)}var T=v;return S(_);})();\n;return Component;"
  },
  "_id": "docs/styled-system/semantic-tokens.mdx",
  "_raw": {
    "sourceFilePath": "docs/styled-system/semantic-tokens.mdx",
    "sourceFileName": "semantic-tokens.mdx",
    "sourceFileDir": "docs/styled-system",
    "contentType": "mdx",
    "flattenedPath": "docs/styled-system/semantic-tokens"
  },
  "type": "Doc",
  "slug": "/docs/styled-system/semantic-tokens",
  "frontMatter": {
    "title": "Semantic Tokens",
    "description": "Incmix UI provides built-in support for conditional semantic design tokens",
    "slug": "/docs/styled-system/semantic-tokens",
    "editUrl": "https://github.com/incmix-ui/incmix-ui-docs/tree/main/content/docs/styled-system/semantic-tokens.mdx",
    "headings": [
      {
        "text": "Token References",
        "id": "token-references",
        "level": "h2"
      },
      {
        "text": "Conditional Tokens",
        "id": "conditional-tokens",
        "level": "h2"
      },
      {
        "text": "Theme Example",
        "id": "theme-example",
        "level": "h2"
      }
    ]
  }
}
