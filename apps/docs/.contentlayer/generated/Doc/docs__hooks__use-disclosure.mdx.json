{
  "title": "useDisclosure",
  "package": "@incmix-ui/hooks",
  "description": "React hook to handle common open and close scenarios in UI components",
  "scope": "usage",
  "body": {
    "raw": "\n`useDisclosure` is a custom hook used to help handle common `open`, `close`, or\n`toggle` scenarios. It can be used to control feedback component such as\n[Modal](/docs/components/overlay/modal),\n[AlertDialog](/docs/components/overlay/alert-dialog),\n[Drawer](/docs/components/overlay/drawer), etc.\n\n## Import\n\n```js\nimport { useDisclosure } from '@incmix-ui/react'\n```\n\n## Return value\n\nThe `useDisclosure` hook returns an object with the following fields:\n\n| Name                 | Type       | Default | Description                                                                               |\n| -------------------- | ---------- | ------- | ----------------------------------------------------------------------------------------- |\n| `isOpen`             | `boolean`  | `false` | If `true`, it sets the controlled component to its visible state.                         |\n| `onClose`            | `function` |         | Callback function to set a falsy value for the `isOpen` parameter.                        |\n| `onOpen`             | `function` |         | Callback function to set a truthy value for the `isOpen` parameter.                       |\n| `onToggle`           | `function` |         | Callback function to toggle the value of the `isOpen` parameter.                          |\n| `getDisclosureProps` | `function` |         | Callback function to retrieve a set of props for the controlled component.                |\n| `getButtonProps`     | `function` |         | Callback function to retrieve a set of props for the button that triggers the disclosure. |\n\n## Usage\n\nYou can use a combination of the methods and values returned by the hook for\nvarious control of the components affected by the disclosure.\n\nBelow is the use of returned fields of the hook without a getter to control the\n`Drawer` component on button toggle.\n\n```jsx\nfunction Example() {\n  const { isOpen, onOpen, onClose } = useDisclosure()\n\n  return (\n    <>\n      <Button onClick={onOpen}>Open Drawer</Button>\n      <Drawer placement=\"right\" onClose={onClose} isOpen={isOpen}>\n        <DrawerOverlay />\n        <DrawerContent>\n          <DrawerHeader borderBottomWidth=\"1px\">Basic Drawer</DrawerHeader>\n          <DrawerBody>\n            <p>Some contents...</p>\n            <p>Some contents...</p>\n            <p>Some contents...</p>\n          </DrawerBody>\n        </DrawerContent>\n      </Drawer>\n    </>\n  )\n}\n```\n\nUsing the `getDisclosureProps` and `getButtonProps` methods returned by the hook\nprovides the needed attributes and handlers to the respective component and\nbutton for visibility toggling and accessibility.\n\nThe component that uses `getDisclosureProps` receives the following props:\n\n- An `id` (can optionally pass this in as a prop to the hook to render a custom\n  value).\n- A dynamically rendered `hidden` attribute.\n\n`getDisclosureProps` can directly accept any additional props for the component.\n\nThe button that uses `getButtonProps` for toggling receives the following props:\n\n- A dynamically rendered `aria-expanded` attribute to let a screen reader know\n  whether the disclosure component is visible.\n- The `aria-controls` attribute using the `id` (can optionally pass `id` in as a\n  prop to the hook to render a custom value). This lets a screen reader know\n  which component is controlled by the button.\n- An onClick handler that uses the `onToggle` callback along with any other\n  click events passed as an `onClick` prop to `getButtonProps`\n\n`getButtonProps` can also directly accept any additional props for the button.\n\n```jsx\nfunction Basic() {\n  const { getDisclosureProps, getButtonProps } = useDisclosure()\n\n  const buttonProps = getButtonProps()\n  const disclosureProps = getDisclosureProps()\n  return (\n    <>\n      <Button {...buttonProps}>Toggle Me</Button>\n      <Text {...disclosureProps} mt={4}>\n        This text is being visibly toggled hidden and shown by the button.\n        <br />\n        (Inspect these components to see the rendered attributes)\n      </Text>\n    </>\n  )\n}\n```\n\n## Parameters\n\nThe `useDisclosure` hook accepts an optional object with the following\nproperties:\n\n<PropsTable of=\"useDisclosure\" />\n",
    "code": "var Component=(()=>{var a=Object.create;var c=Object.defineProperty;var p=Object.getOwnPropertyDescriptor;var u=Object.getOwnPropertyNames;var g=Object.getPrototypeOf,m=Object.prototype.hasOwnProperty;var f=(o,e)=>()=>(e||o((e={exports:{}}).exports,e),e.exports),b=(o,e)=>{for(var t in e)c(o,t,{get:e[t],enumerable:!0})},d=(o,e,t,i)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let r of u(e))!m.call(o,r)&&r!==t&&c(o,r,{get:()=>e[r],enumerable:!(i=p(e,r))||i.enumerable});return o};var y=(o,e,t)=>(t=o!=null?a(g(o)):{},d(e||!o||!o.__esModule?c(t,\"default\",{value:o,enumerable:!0}):t,o)),D=o=>d(c({},\"__esModule\",{value:!0}),o);var s=f((C,l)=>{l.exports=_jsx_runtime});var P={};b(P,{default:()=>v,frontmatter:()=>w});var n=y(s()),w={title:\"useDisclosure\",package:\"@incmix-ui/hooks\",description:\"React hook to handle common open and close scenarios in UI components\"};function h(o){let e=Object.assign({p:\"p\",code:\"code\",a:\"a\",h2:\"h2\",pre:\"pre\",table:\"table\",thead:\"thead\",tr:\"tr\",th:\"th\",tbody:\"tbody\",td:\"td\",ul:\"ul\",li:\"li\"},o.components),{PropsTable:t}=e;return t||x(\"PropsTable\",!0),(0,n.jsxs)(n.Fragment,{children:[(0,n.jsxs)(e.p,{children:[(0,n.jsx)(e.code,{children:\"useDisclosure\"}),\" is a custom hook used to help handle common \",(0,n.jsx)(e.code,{children:\"open\"}),\", \",(0,n.jsx)(e.code,{children:\"close\"}),`, or\n`,(0,n.jsx)(e.code,{children:\"toggle\"}),` scenarios. It can be used to control feedback component such as\n`,(0,n.jsx)(e.a,{href:\"/docs/components/overlay/modal\",children:\"Modal\"}),`,\n`,(0,n.jsx)(e.a,{href:\"/docs/components/overlay/alert-dialog\",children:\"AlertDialog\"}),`,\n`,(0,n.jsx)(e.a,{href:\"/docs/components/overlay/drawer\",children:\"Drawer\"}),\", etc.\"]}),`\n`,(0,n.jsx)(e.h2,{id:\"import\",children:\"Import\"}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-js\",children:`import { useDisclosure } from '@incmix-ui/react'\n`})}),`\n`,(0,n.jsx)(e.h2,{id:\"return-value\",children:\"Return value\"}),`\n`,(0,n.jsxs)(e.p,{children:[\"The \",(0,n.jsx)(e.code,{children:\"useDisclosure\"}),\" hook returns an object with the following fields:\"]}),`\n`,(0,n.jsxs)(e.table,{children:[(0,n.jsx)(e.thead,{children:(0,n.jsxs)(e.tr,{children:[(0,n.jsx)(e.th,{children:\"Name\"}),(0,n.jsx)(e.th,{children:\"Type\"}),(0,n.jsx)(e.th,{children:\"Default\"}),(0,n.jsx)(e.th,{children:\"Description\"})]})}),(0,n.jsxs)(e.tbody,{children:[(0,n.jsxs)(e.tr,{children:[(0,n.jsx)(e.td,{children:(0,n.jsx)(e.code,{children:\"isOpen\"})}),(0,n.jsx)(e.td,{children:(0,n.jsx)(e.code,{children:\"boolean\"})}),(0,n.jsx)(e.td,{children:(0,n.jsx)(e.code,{children:\"false\"})}),(0,n.jsxs)(e.td,{children:[\"If \",(0,n.jsx)(e.code,{children:\"true\"}),\", it sets the controlled component to its visible state.\"]})]}),(0,n.jsxs)(e.tr,{children:[(0,n.jsx)(e.td,{children:(0,n.jsx)(e.code,{children:\"onClose\"})}),(0,n.jsx)(e.td,{children:(0,n.jsx)(e.code,{children:\"function\"})}),(0,n.jsx)(e.td,{}),(0,n.jsxs)(e.td,{children:[\"Callback function to set a falsy value for the \",(0,n.jsx)(e.code,{children:\"isOpen\"}),\" parameter.\"]})]}),(0,n.jsxs)(e.tr,{children:[(0,n.jsx)(e.td,{children:(0,n.jsx)(e.code,{children:\"onOpen\"})}),(0,n.jsx)(e.td,{children:(0,n.jsx)(e.code,{children:\"function\"})}),(0,n.jsx)(e.td,{}),(0,n.jsxs)(e.td,{children:[\"Callback function to set a truthy value for the \",(0,n.jsx)(e.code,{children:\"isOpen\"}),\" parameter.\"]})]}),(0,n.jsxs)(e.tr,{children:[(0,n.jsx)(e.td,{children:(0,n.jsx)(e.code,{children:\"onToggle\"})}),(0,n.jsx)(e.td,{children:(0,n.jsx)(e.code,{children:\"function\"})}),(0,n.jsx)(e.td,{}),(0,n.jsxs)(e.td,{children:[\"Callback function to toggle the value of the \",(0,n.jsx)(e.code,{children:\"isOpen\"}),\" parameter.\"]})]}),(0,n.jsxs)(e.tr,{children:[(0,n.jsx)(e.td,{children:(0,n.jsx)(e.code,{children:\"getDisclosureProps\"})}),(0,n.jsx)(e.td,{children:(0,n.jsx)(e.code,{children:\"function\"})}),(0,n.jsx)(e.td,{}),(0,n.jsx)(e.td,{children:\"Callback function to retrieve a set of props for the controlled component.\"})]}),(0,n.jsxs)(e.tr,{children:[(0,n.jsx)(e.td,{children:(0,n.jsx)(e.code,{children:\"getButtonProps\"})}),(0,n.jsx)(e.td,{children:(0,n.jsx)(e.code,{children:\"function\"})}),(0,n.jsx)(e.td,{}),(0,n.jsx)(e.td,{children:\"Callback function to retrieve a set of props for the button that triggers the disclosure.\"})]})]})]}),`\n`,(0,n.jsx)(e.h2,{id:\"usage\",children:\"Usage\"}),`\n`,(0,n.jsx)(e.p,{children:`You can use a combination of the methods and values returned by the hook for\nvarious control of the components affected by the disclosure.`}),`\n`,(0,n.jsxs)(e.p,{children:[`Below is the use of returned fields of the hook without a getter to control the\n`,(0,n.jsx)(e.code,{children:\"Drawer\"}),\" component on button toggle.\"]}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-jsx\",children:`function Example() {\n  const { isOpen, onOpen, onClose } = useDisclosure()\n\n  return (\n    <>\n      <Button onClick={onOpen}>Open Drawer</Button>\n      <Drawer placement=\"right\" onClose={onClose} isOpen={isOpen}>\n        <DrawerOverlay />\n        <DrawerContent>\n          <DrawerHeader borderBottomWidth=\"1px\">Basic Drawer</DrawerHeader>\n          <DrawerBody>\n            <p>Some contents...</p>\n            <p>Some contents...</p>\n            <p>Some contents...</p>\n          </DrawerBody>\n        </DrawerContent>\n      </Drawer>\n    </>\n  )\n}\n`})}),`\n`,(0,n.jsxs)(e.p,{children:[\"Using the \",(0,n.jsx)(e.code,{children:\"getDisclosureProps\"}),\" and \",(0,n.jsx)(e.code,{children:\"getButtonProps\"}),` methods returned by the hook\nprovides the needed attributes and handlers to the respective component and\nbutton for visibility toggling and accessibility.`]}),`\n`,(0,n.jsxs)(e.p,{children:[\"The component that uses \",(0,n.jsx)(e.code,{children:\"getDisclosureProps\"}),\" receives the following props:\"]}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsxs)(e.li,{children:[\"An \",(0,n.jsx)(e.code,{children:\"id\"}),` (can optionally pass this in as a prop to the hook to render a custom\nvalue).`]}),`\n`,(0,n.jsxs)(e.li,{children:[\"A dynamically rendered \",(0,n.jsx)(e.code,{children:\"hidden\"}),\" attribute.\"]}),`\n`]}),`\n`,(0,n.jsxs)(e.p,{children:[(0,n.jsx)(e.code,{children:\"getDisclosureProps\"}),\" can directly accept any additional props for the component.\"]}),`\n`,(0,n.jsxs)(e.p,{children:[\"The button that uses \",(0,n.jsx)(e.code,{children:\"getButtonProps\"}),\" for toggling receives the following props:\"]}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsxs)(e.li,{children:[\"A dynamically rendered \",(0,n.jsx)(e.code,{children:\"aria-expanded\"}),` attribute to let a screen reader know\nwhether the disclosure component is visible.`]}),`\n`,(0,n.jsxs)(e.li,{children:[\"The \",(0,n.jsx)(e.code,{children:\"aria-controls\"}),\" attribute using the \",(0,n.jsx)(e.code,{children:\"id\"}),\" (can optionally pass \",(0,n.jsx)(e.code,{children:\"id\"}),` in as a\nprop to the hook to render a custom value). This lets a screen reader know\nwhich component is controlled by the button.`]}),`\n`,(0,n.jsxs)(e.li,{children:[\"An onClick handler that uses the \",(0,n.jsx)(e.code,{children:\"onToggle\"}),` callback along with any other\nclick events passed as an `,(0,n.jsx)(e.code,{children:\"onClick\"}),\" prop to \",(0,n.jsx)(e.code,{children:\"getButtonProps\"})]}),`\n`]}),`\n`,(0,n.jsxs)(e.p,{children:[(0,n.jsx)(e.code,{children:\"getButtonProps\"}),\" can also directly accept any additional props for the button.\"]}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-jsx\",children:`function Basic() {\n  const { getDisclosureProps, getButtonProps } = useDisclosure()\n\n  const buttonProps = getButtonProps()\n  const disclosureProps = getDisclosureProps()\n  return (\n    <>\n      <Button {...buttonProps}>Toggle Me</Button>\n      <Text {...disclosureProps} mt={4}>\n        This text is being visibly toggled hidden and shown by the button.\n        <br />\n        (Inspect these components to see the rendered attributes)\n      </Text>\n    </>\n  )\n}\n`})}),`\n`,(0,n.jsx)(e.h2,{id:\"parameters\",children:\"Parameters\"}),`\n`,(0,n.jsxs)(e.p,{children:[\"The \",(0,n.jsx)(e.code,{children:\"useDisclosure\"}),` hook accepts an optional object with the following\nproperties:`]}),`\n`,(0,n.jsx)(t,{of:\"useDisclosure\"})]})}function k(o={}){let{wrapper:e}=o.components||{};return e?(0,n.jsx)(e,Object.assign({},o,{children:(0,n.jsx)(h,o)})):h(o)}var v=k;function x(o,e){throw new Error(\"Expected \"+(e?\"component\":\"object\")+\" `\"+o+\"` to be defined: you likely forgot to import, pass, or provide it.\")}return D(P);})();\n;return Component;"
  },
  "_id": "docs/hooks/use-disclosure.mdx",
  "_raw": {
    "sourceFilePath": "docs/hooks/use-disclosure.mdx",
    "sourceFileName": "use-disclosure.mdx",
    "sourceFileDir": "docs/hooks",
    "contentType": "mdx",
    "flattenedPath": "docs/hooks/use-disclosure"
  },
  "type": "Doc",
  "slug": "/docs/hooks/use-disclosure",
  "frontMatter": {
    "title": "useDisclosure",
    "package": "@incmix-ui/hooks",
    "description": "React hook to handle common open and close scenarios in UI components",
    "slug": "/docs/hooks/use-disclosure",
    "editUrl": "https://github.com/incmix-ui/incmix-ui-docs/tree/main/content/docs/hooks/use-disclosure.mdx",
    "headings": [
      {
        "text": "Import",
        "id": "import",
        "level": "h2"
      },
      {
        "text": "Return value",
        "id": "return-value",
        "level": "h2"
      },
      {
        "text": "Usage",
        "id": "usage",
        "level": "h2"
      },
      {
        "text": "Parameters",
        "id": "parameters",
        "level": "h2"
      }
    ]
  }
}
