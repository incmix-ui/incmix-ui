{
  "id": "button",
  "scope": "theming",
  "body": {
    "raw": "\nThe `Button` component is a single part component. All of the styling is applied\ndirectly to the `button` element.\n\n> To learn more about styling single part components, visit the\n> [Component Style](/docs/styled-system/component-style#styling-single-part-components)\n> page.\n\n## Theming properties\n\nThe properties that affect the theming of the `Button` component are:\n\n- `variant`: The visual variant of the button. Defaults to `solid`.\n- `colorScheme`: The color scheme of the button. Defaults to `gray`.\n- `size`: The size of the button. Defaults to `md`.\n\n## Theming utilities\n\n- `defineStyle`: a function used to create style objects.\n- `defineStyleConfig`: a function used to define the style configuration for a\n  single part component.\n\n```jsx live=false\nimport { defineStyle, defineStyleConfig } from '@incmix-ui/react'\n```\n\n## Customizing the default theme\n\n```jsx live=false\nimport { defineStyle, defineStyleConfig } from '@incmix-ui/react'\n\nconst outline = defineStyle({\n  border: '2px dashed', // change the appearance of the border\n  borderRadius: 0, // remove the border radius\n  fontWeight: 'semibold', // change the font weight\n})\n\nexport const buttonTheme = defineStyleConfig({\n  variants: { outline },\n})\n```\n\nAfter customizing the button theme, we can import it in our theme file and add\nit in the `components` property:\n\n```jsx live=false\nimport { extendTheme } from '@incmix-ui/react'\nimport { buttonTheme } from './components/button.ts'\n\nexport const theme = extendTheme({\n  components: { Button: buttonTheme },\n})\n```\n\n> This is a crucial step to make sure that any changes that we make to the\n> button theme are applied.\n\n## Adding a custom size\n\nLet's assume we want to include an extra large button size. Here's how we can do\nthat:\n\n```jsx live=false\nimport { defineStyle, defineStyleConfig } from '@incmix-ui/react'\n\nconst xl = defineStyle({\n  fontSize: 'xl',\n  px: '6',\n  h: '16',\n  borderRadius: 'md',\n})\n\nexport const buttonTheme = defineStyleConfig({\n  sizes: { xl },\n})\n\n// Now we can use the new `xl` size\n<Button size=\"xl\">...</Button>\n```\n\nEvery time you're adding anything new to the theme, you'd need to run the CLI\ncommand to get proper autocomplete in your IDE. You can learn more about the CLI\ntool [here](/docs/styled-system/cli).\n\n## Adding a custom variant\n\nLet's assume we want to include a custom branded variant. Here's how we can do\nthat:\n\n```jsx live=false\nimport { defineStyle, defineStyleConfig } from '@incmix-ui/react'\n\nconst brandPrimary = defineStyle({\n  background: 'orange.500',\n  color: 'white',\n  fontFamily: 'serif',\n  fontWeight: 'normal',\n\n  // let's also provide dark mode alternatives\n  _dark: {\n    background: 'orange.300',\n    color: 'orange.800',\n  }\n})\n\nexport const buttonTheme = defineStyleConfig({\n  variants: { brandPrimary },\n})\n\n// Now we can use the new `brandPrimary` variant\n<Button variant=\"brandPrimary\">...</Button>\n```\n\n## Using a custom color scheme\n\nLet's assume we want to use our own custom color scale based on our brand. We'd\nneed to define the color scale first in the main theme file:\n\n```jsx live=false\nimport { extendTheme } from '@incmix-ui/react'\n\nexport const theme = extendTheme({\n  colors: {\n    brand: {\n      50: '#f7fafc',\n      ...\n      500: '#718096',\n      ...\n      900: '#171923',\n    }\n  }\n})\n```\n\nThen, we can use the custom color scale as the color scheme for the button:\n\n```jsx live=false\n<Button colorScheme=\"brand\">...</Button>\n```\n\n## Changing the default properties\n\nLet's assume we want to change the default size, variant or color scheme of\nevery button in our app. Here's how we can do that:\n\n```jsx live=false\nimport { defineStyleConfig } from '@incmix-ui/react'\n\nexport const buttonTheme = defineStyleConfig({\n  defaultProps: {\n    size: 'lg',\n    variant: 'outline',\n    colorScheme: 'brand',\n  },\n})\n\n// This saves you time, instead of manually setting the size,\n// variant and color scheme every time you use a button:\n<Button size=\"lg\" variant=\"outline\" colorScheme=\"brand\">...</Button>\n```\n\n## Showcase\n\nimport { App, Index, ButtonTheme } from 'configs/sandpack-contents/component-theming/button'\n\n<SandpackEmbed\n  files={{\n    '/theme/components/Button.ts': ButtonTheme,\n    '/App.tsx': App,\n    '/index.tsx': {\n      code: Index,\n      hidden: true,\n    },\n  }}\n  dependencies={{\n    'react-icons': '^4.4.0',\n  }}\n/>\n",
    "code": "var Component=(()=>{var g=Object.create;var a=Object.defineProperty;var b=Object.getOwnPropertyDescriptor;var x=Object.getOwnPropertyNames;var y=Object.getPrototypeOf,v=Object.prototype.hasOwnProperty;var l=(t,e)=>()=>(e||t((e={exports:{}}).exports,e),e.exports),S=(t,e)=>{for(var o in e)a(t,o,{get:e[o],enumerable:!0})},s=(t,e,o,c)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let r of x(e))!v.call(t,r)&&r!==o&&a(t,r,{get:()=>e[r],enumerable:!(c=b(e,r))||c.enumerable});return t};var d=(t,e,o)=>(o=t!=null?g(y(t)):{},s(e||!t||!t.__esModule?a(o,\"default\",{value:t,enumerable:!0}):o,t)),w=t=>s(a({},\"__esModule\",{value:!0}),t);var m=l((_,h)=>{h.exports=_jsx_runtime});var p=l((M,u)=>{u.exports={App:`import { Box, SimpleGrid, IconButton, Button, useColorMode } from \"@incmix-ui/react\";\nimport { FaMoon, FaSun } from \"react-icons/fa\";\n\nexport default function App() {\n  const { toggleColorMode, colorMode } = useColorMode();\n  return (\n    <Box position=\"relative\" h=\"100vh\">\n      <SimpleGrid gap={12} p={12} columns={2}>\n        <Button>\n          Themed solid button\n        </Button>\n        <Button variant=\"custom\">\n          Themed custom button\n        </Button>\n        <Button variant=\"ghost\">\n          Themed ghost button\n        </Button>\n        <Button variant=\"outline\">\n          Themed outline button\n        </Button>\n        <Button variant=\"link\">\n          Themed link button\n        </Button>\n      </SimpleGrid>\n\n      <IconButton\n        aria-label=\"toggle theme\"\n        rounded=\"full\"\n        size=\"xs\"\n        position=\"absolute\"\n        bottom={4}\n        left={4}\n        onClick={toggleColorMode} icon={colorMode === \"dark\" ? <FaSun /> : <FaMoon />}\n      />\n    </Box>\n  );\n}`,Index:`import * as React from \"react\";\nimport { createRoot } from \"react-dom/client\";\nimport { IncmixProvider, extendTheme } from \"@incmix-ui/react\";\n\nimport App from \"./App\";\nimport { buttonTheme } from \"./theme/components/Button\";\n\nconst theme = extendTheme({\n  components: {\n    Button: buttonTheme,\n  }\n});\n\nconst container = document.getElementById(\"root\");\nconst root = createRoot(container!);\nroot.render(\n  <IncmixProvider theme={theme}>\n    <App />\n  </IncmixProvider>\n);`,ButtonTheme:`import { defineStyle, defineStyleConfig } from \"@incmix-ui/styled-system\"\n\nconst baseStyle = defineStyle({\n  borderRadius: 0, // disable the border radius\n  fontWeight: \"normal\", // change the font weight to normal\n  fontFamily: \"mono\", // change the font family to monospaced\n})\n\nconst sizes = {\n  md: defineStyle({\n    fontSize: \"sm\", // Change font size to sm (14px)\n  }),\n}\n\n// Defining a custom variant\nconst customVariant = defineStyle((props) => {\n  const { colorScheme: c } = props\n  return {\n    fontFamily: \"sans-serif\",\n    bg: \\`\\${c}.500\\`,\n    fontWeight: \"semibold\",\n    color: 'white',\n    borderRadius: '3xl',\n    transition: 'transform 0.15s ease-out, background 0.15s ease-out',\n    _dark: {\n      bg: \\`\\${c}.200\\`,\n      color: 'gray.800',\n    },\n\n    _hover: {\n      transform: \"scale(1.05, 1.05)\",\n      bg: \\`\\${c}.600\\`,\n\n      _dark: {\n        bg: \\`\\${c}.300\\`,\n      },\n    },\n\n    _active: {\n      bg: \\`\\${c}.700\\`,\n      transform: \"scale(1, 1)\",\n\n      _dark: {\n        bg: \\`\\${c}.400\\`,\n      }\n    },\n  }\n})\n\nexport const buttonTheme = defineStyleConfig({\n  baseStyle,\n  sizes,\n  variants: {\n    custom: customVariant,\n  },\n  defaultProps: {\n    colorScheme: \"purple\", // set the default color scheme to purple\n  },\n})`}});var z={};S(z,{default:()=>C,frontmatter:()=>B});var n=d(m()),i=d(p()),B={id:\"button\",scope:\"theming\"};function f(t){let e=Object.assign({p:\"p\",code:\"code\",blockquote:\"blockquote\",a:\"a\",h2:\"h2\",ul:\"ul\",li:\"li\",pre:\"pre\"},t.components),{SandpackEmbed:o}=e;return o||k(\"SandpackEmbed\",!0),(0,n.jsxs)(n.Fragment,{children:[(0,n.jsxs)(e.p,{children:[\"The \",(0,n.jsx)(e.code,{children:\"Button\"}),` component is a single part component. All of the styling is applied\ndirectly to the `,(0,n.jsx)(e.code,{children:\"button\"}),\" element.\"]}),`\n`,(0,n.jsxs)(e.blockquote,{children:[`\n`,(0,n.jsxs)(e.p,{children:[`To learn more about styling single part components, visit the\n`,(0,n.jsx)(e.a,{href:\"/docs/styled-system/component-style#styling-single-part-components\",children:\"Component Style\"}),`\npage.`]}),`\n`]}),`\n`,(0,n.jsx)(e.h2,{id:\"theming-properties\",children:\"Theming properties\"}),`\n`,(0,n.jsxs)(e.p,{children:[\"The properties that affect the theming of the \",(0,n.jsx)(e.code,{children:\"Button\"}),\" component are:\"]}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.code,{children:\"variant\"}),\": The visual variant of the button. Defaults to \",(0,n.jsx)(e.code,{children:\"solid\"}),\".\"]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.code,{children:\"colorScheme\"}),\": The color scheme of the button. Defaults to \",(0,n.jsx)(e.code,{children:\"gray\"}),\".\"]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.code,{children:\"size\"}),\": The size of the button. Defaults to \",(0,n.jsx)(e.code,{children:\"md\"}),\".\"]}),`\n`]}),`\n`,(0,n.jsx)(e.h2,{id:\"theming-utilities\",children:\"Theming utilities\"}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.code,{children:\"defineStyle\"}),\": a function used to create style objects.\"]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.code,{children:\"defineStyleConfig\"}),`: a function used to define the style configuration for a\nsingle part component.`]}),`\n`]}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-jsx\",live:\"false\",children:`import { defineStyle, defineStyleConfig } from '@incmix-ui/react'\n`})}),`\n`,(0,n.jsx)(e.h2,{id:\"customizing-the-default-theme\",children:\"Customizing the default theme\"}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-jsx\",live:\"false\",children:`import { defineStyle, defineStyleConfig } from '@incmix-ui/react'\n\nconst outline = defineStyle({\n  border: '2px dashed', // change the appearance of the border\n  borderRadius: 0, // remove the border radius\n  fontWeight: 'semibold', // change the font weight\n})\n\nexport const buttonTheme = defineStyleConfig({\n  variants: { outline },\n})\n`})}),`\n`,(0,n.jsxs)(e.p,{children:[`After customizing the button theme, we can import it in our theme file and add\nit in the `,(0,n.jsx)(e.code,{children:\"components\"}),\" property:\"]}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-jsx\",live:\"false\",children:`import { extendTheme } from '@incmix-ui/react'\nimport { buttonTheme } from './components/button.ts'\n\nexport const theme = extendTheme({\n  components: { Button: buttonTheme },\n})\n`})}),`\n`,(0,n.jsxs)(e.blockquote,{children:[`\n`,(0,n.jsx)(e.p,{children:`This is a crucial step to make sure that any changes that we make to the\nbutton theme are applied.`}),`\n`]}),`\n`,(0,n.jsx)(e.h2,{id:\"adding-a-custom-size\",children:\"Adding a custom size\"}),`\n`,(0,n.jsx)(e.p,{children:`Let's assume we want to include an extra large button size. Here's how we can do\nthat:`}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-jsx\",live:\"false\",children:`import { defineStyle, defineStyleConfig } from '@incmix-ui/react'\n\nconst xl = defineStyle({\n  fontSize: 'xl',\n  px: '6',\n  h: '16',\n  borderRadius: 'md',\n})\n\nexport const buttonTheme = defineStyleConfig({\n  sizes: { xl },\n})\n\n// Now we can use the new \\`xl\\` size\n<Button size=\"xl\">...</Button>\n`})}),`\n`,(0,n.jsxs)(e.p,{children:[`Every time you're adding anything new to the theme, you'd need to run the CLI\ncommand to get proper autocomplete in your IDE. You can learn more about the CLI\ntool `,(0,n.jsx)(e.a,{href:\"/docs/styled-system/cli\",children:\"here\"}),\".\"]}),`\n`,(0,n.jsx)(e.h2,{id:\"adding-a-custom-variant\",children:\"Adding a custom variant\"}),`\n`,(0,n.jsx)(e.p,{children:`Let's assume we want to include a custom branded variant. Here's how we can do\nthat:`}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-jsx\",live:\"false\",children:`import { defineStyle, defineStyleConfig } from '@incmix-ui/react'\n\nconst brandPrimary = defineStyle({\n  background: 'orange.500',\n  color: 'white',\n  fontFamily: 'serif',\n  fontWeight: 'normal',\n\n  // let's also provide dark mode alternatives\n  _dark: {\n    background: 'orange.300',\n    color: 'orange.800',\n  }\n})\n\nexport const buttonTheme = defineStyleConfig({\n  variants: { brandPrimary },\n})\n\n// Now we can use the new \\`brandPrimary\\` variant\n<Button variant=\"brandPrimary\">...</Button>\n`})}),`\n`,(0,n.jsx)(e.h2,{id:\"using-a-custom-color-scheme\",children:\"Using a custom color scheme\"}),`\n`,(0,n.jsx)(e.p,{children:`Let's assume we want to use our own custom color scale based on our brand. We'd\nneed to define the color scale first in the main theme file:`}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-jsx\",live:\"false\",children:`import { extendTheme } from '@incmix-ui/react'\n\nexport const theme = extendTheme({\n  colors: {\n    brand: {\n      50: '#f7fafc',\n      ...\n      500: '#718096',\n      ...\n      900: '#171923',\n    }\n  }\n})\n`})}),`\n`,(0,n.jsx)(e.p,{children:\"Then, we can use the custom color scale as the color scheme for the button:\"}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-jsx\",live:\"false\",children:`<Button colorScheme=\"brand\">...</Button>\n`})}),`\n`,(0,n.jsx)(e.h2,{id:\"changing-the-default-properties\",children:\"Changing the default properties\"}),`\n`,(0,n.jsx)(e.p,{children:`Let's assume we want to change the default size, variant or color scheme of\nevery button in our app. Here's how we can do that:`}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-jsx\",live:\"false\",children:`import { defineStyleConfig } from '@incmix-ui/react'\n\nexport const buttonTheme = defineStyleConfig({\n  defaultProps: {\n    size: 'lg',\n    variant: 'outline',\n    colorScheme: 'brand',\n  },\n})\n\n// This saves you time, instead of manually setting the size,\n// variant and color scheme every time you use a button:\n<Button size=\"lg\" variant=\"outline\" colorScheme=\"brand\">...</Button>\n`})}),`\n`,(0,n.jsx)(e.h2,{id:\"showcase\",children:\"Showcase\"}),`\n`,`\n`,(0,n.jsx)(o,{files:{\"/theme/components/Button.ts\":i.ButtonTheme,\"/App.tsx\":i.App,\"/index.tsx\":{code:i.Index,hidden:!0}},dependencies:{\"react-icons\":\"^4.4.0\"}})]})}function T(t={}){let{wrapper:e}=t.components||{};return e?(0,n.jsx)(e,Object.assign({},t,{children:(0,n.jsx)(f,t)})):f(t)}var C=T;function k(t,e){throw new Error(\"Expected \"+(e?\"component\":\"object\")+\" `\"+t+\"` to be defined: you likely forgot to import, pass, or provide it.\")}return w(z);})();\n;return Component;"
  },
  "_id": "docs/components/button/theming.mdx",
  "_raw": {
    "sourceFilePath": "docs/components/button/theming.mdx",
    "sourceFileName": "theming.mdx",
    "sourceFileDir": "docs/components/button",
    "contentType": "mdx",
    "flattenedPath": "docs/components/button/theming"
  },
  "type": "Doc",
  "slug": "/docs/components/button/theming",
  "frontMatter": {
    "slug": "/docs/components/button/theming",
    "editUrl": "https://github.com/incmix-ui/incmix-ui-docs/tree/main/content/docs/components/button/theming.mdx",
    "headings": [
      {
        "text": "Theming properties",
        "id": "theming-properties",
        "level": "h2"
      },
      {
        "text": "Theming utilities",
        "id": "theming-utilities",
        "level": "h2"
      },
      {
        "text": "Customizing the default theme",
        "id": "customizing-the-default-theme",
        "level": "h2"
      },
      {
        "text": "Adding a custom size",
        "id": "adding-a-custom-size",
        "level": "h2"
      },
      {
        "text": "Adding a custom variant",
        "id": "adding-a-custom-variant",
        "level": "h2"
      },
      {
        "text": "Using a custom color scheme",
        "id": "using-a-custom-color-scheme",
        "level": "h2"
      },
      {
        "text": "Changing the default properties",
        "id": "changing-the-default-properties",
        "level": "h2"
      },
      {
        "text": "Showcase",
        "id": "showcase",
        "level": "h2"
      }
    ]
  }
}
