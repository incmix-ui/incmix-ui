{
  "title": "Color Mode",
  "package": "@incmix-ui/color-mode",
  "description": "Working with color mode (light and dark mode) in Incmix UI",
  "scope": "usage",
  "category": "features",
  "body": {
    "raw": "\nIncmix UI comes with built-in support for managing color mode in your apps.\n\nBy default, most of Incmix's components are dark mode compatible. In some\nscenarios, you might need to make your component respond to color mode.\n\n> **Tip:** Incmix stores the color mode in `localStorage` and appends a\n> className to the `body` to ensure the color mode is persistent.\n\n## Setup\n\nTo get dark mode working correctly, you need to do two things:\n\n1. Update your theme config to determine how Incmix should manage color mode\n   updates.\n\n2. Add the `ColorModeScript` to your application, and set the initial color mode\n   your application should start with to either `light`, `dark` or `system`. It\n   is `light` by default.\n\n> **Note:** When using `system` as initial color mode, the theme will change\n> with the system preference. However, if another theme is manually selected by\n> the user then that theme will be used on the next page load. To reset it to\n> system preference, simply remove the `incmix-ui-color-mode` entry from\n> localStorage.\n\n### Updating the theme config\n\nThe theme config for color mode has 2 options:\n\n- `initialColorMode`: The initial mode you'd like your app to start with\n- `useSystemColorMode`: If `true`, your app will change color mode based on the\n  user's system preferences.\n\n```jsx live=false\n// theme.js\n\n// 1. import `extendTheme` function\nimport { extendTheme } from '@incmix-ui/react'\n\n// 2. Add your color mode config\nconst config = {\n  initialColorMode: 'light',\n  useSystemColorMode: false,\n}\n\n// 3. extend the theme\nconst theme = extendTheme({ config })\n\nexport default theme\n```\n\nFor typescript, you need to explicitly describe the theme config type as\n`ThemeConfig` object.\n\n```tsx live=false\n// theme.ts\n\n// 1. import `extendTheme` function\nimport { extendTheme, type ThemeConfig } from '@incmix-ui/react'\n\n// 2. Add your color mode config\nconst config: ThemeConfig = {\n  initialColorMode: 'light',\n  useSystemColorMode: false,\n}\n\n// 3. extend the theme\nconst theme = extendTheme({ config })\n\nexport default theme\n```\n\n> Remember to pass your custom `theme` to the `IncmixProvider`, otherwise your\n> color mode config won't be taken into consideration.\n\n#### Behavior of ColorMode\n\nThe current hierarchy of how the color mode is defined is as follows:\n\n- if `useSystemColorMode` is true `system`-color will be used as default -\n  `initialColorMode` is the fallback if system color mode can't be resolved\n\n- if `data-theme` prop is defined through e.g. `ColorModeScript` / after\n  modification/initial load of the colorMode this value will be used\n\n- if `colorModeManager` = `localStorage` and a value is defined for\n  `incmix-ui-color-mode` this will be used\n\n- if `initialColorMode` = `system` system-color will be used as default -\n  `initialColorMode` is the fallback if system color mode isn't resolved\n\n- if `initialColorMode` = `'light'|'dark'` the corresponding value will be used\n\nWe currently accept 3 different values for `initialColorMode`:\n`light`,`dark`,`system`\n\n#### Difference between `initialColorMode='system'` and `useSystemColorMode`\n\nif `useSystemColorMode=true` we will always try to match the users\n`system`-color and fallback to `initialColorMode`. With this behavior, the\ncolorMode toggle won't have any effect.\n\nif `initialColorMode='system'` we will as well always try to match the users\n`system`-color and fallback to `light`. After the user has toggled the value,\nthis value will be used.\n\n### Adding the `ColorModeScript`\n\nThe color mode script needs to be added before the content inside the `body` tag\nfor local storage syncing to work correctly.\n\n> When setting the initial color mode, we recommend adding it as a config to\n> your theme and reference that in the `ColorModeScript`.\n\n> To use `ColorModeScript` on a site with strict `Content-Security-Policy`, you\n> can use the `nonce` prop that will be passed to the `<script>` tag.\n\n#### For Next.js\n\nFor Next.js, you need to add the `ColorModeScript` to the `_document.js` file.\n\n```jsx live=false ln={14}\n// pages/_document.js\n\nimport { ColorModeScript } from '@incmix-ui/react'\nimport NextDocument, { Html, Head, Main, NextScript } from 'next/document'\nimport theme from './theme'\n\nexport default class Document extends NextDocument {\n  render() {\n    return (\n      <Html lang=\"en\">\n        <Head />\n        <body>\n          {/* ðŸ‘‡ Here's the script */}\n          <ColorModeScript initialColorMode={theme.config.initialColorMode} />\n          <Main />\n          <NextScript />\n        </body>\n      </Html>\n    )\n  }\n}\n```\n\n#### For Create React App\n\nFor Create React App, you need to add the `ColorModeScript` to the `index.js`\nfile.\n\n```jsx live=false ln={11}\n// index.js\n\nimport { ColorModeScript } from '@incmix-ui/react'\nimport * as ReactDOM from 'react-dom/client'\nimport App from './App'\nimport theme from './theme'\n\nconst rootElement = document.getElementById('root')\nReactDOM.createRoot(rootElement).render(\n  <>\n    {/* ðŸ‘‡ Here's the script */}\n    <ColorModeScript initialColorMode={theme.config.initialColorMode} />\n    <App />\n  </>,\n)\n```\n\n#### For Gatsby\n\n## Changing Color Mode\n\nTo manage color mode in your application, incmix exposes the `useColorMode` or\n`useColorModeValue` hooks.\n\n### useColorMode\n\n`useColorMode` is a React hook that gives you access to the current color mode,\nand a function to toggle the color mode.\n\n```jsx\nfunction Example() {\n  const { colorMode, toggleColorMode } = useColorMode()\n  return (\n    <header>\n      <Button onClick={toggleColorMode}>Toggle {colorMode === 'light' ? 'Dark' : 'Light'}</Button>\n    </header>\n  )\n}\n```\n\nCalling `toggleColorMode` anywhere in your app tree toggles the color mode from\n`light` or `dark` and vice versa.\n\n### useColorModeValue\n\n`useColorModeValue` is a React hook used to change any value or style based on\nthe color mode. It takes 2 arguments: the value in light mode, and the value in\ndark mode.\n\n```jsx live=false\n// Here's the signature\nconst value = useColorModeValue(lightModeValue, darkModeValue)\n```\n\nHere's an example that changes the `background-color` and `color` using the\n`useColorModeValue` hook.\n\n> Click the **Toggle Mode** button to see it in action.\n\n```jsx\nfunction StyleColorMode() {\n  const { toggleColorMode } = useColorMode()\n\n  const bg = useColorModeValue('red.500', 'red.200')\n  const color = useColorModeValue('white', 'gray.800')\n\n  return (\n    <>\n      <Box mb={4} bg={bg} color={color}>\n        This box's style will change based on the color mode.\n      </Box>\n      <Button size=\"sm\" onClick={toggleColorMode}>\n        Toggle Mode\n      </Button>\n    </>\n  )\n}\n```\n\n## Forcing a specific mode\n\nIn some occasions, you might want Incmix components to look the same in both\nlight and dark modes. To achieve this, wrap the component in a `LightMode` or\n`DarkMode` component. Doing this will override the global `colorMode`.\n\n> Click the **\"Toggle Mode\"** button to see it in action.\n\n```jsx\nfunction Example() {\n  const { colorMode, toggleColorMode } = useColorMode()\n\n  return (\n    <HStack>\n      <LightMode>\n        <Button size=\"sm\" colorScheme=\"blue\">\n          Light Mode Always\n        </Button>\n      </LightMode>\n\n      <DarkMode>\n        <Button size=\"sm\" colorScheme=\"blue\">\n          Dark Mode Always\n        </Button>\n      </DarkMode>\n\n      <Button size=\"sm\" colorScheme=\"blue\" onClick={toggleColorMode}>\n        Toggle Mode\n      </Button>\n    </HStack>\n  )\n}\n```\n\n## Add colorModeManager (Optional, for SSR)\n\nFor server-side rendered sites, e.g. in Next.js, you may want to know the color\npreference of a user upfront so you can avoid rendering the initial color mode\nand then changing it during hydration (so-called `flashing`).\n\nIf you don't use SSR or don't care about this, you don't need to pass anything.\nIncmix will use `localStorageManager` by default.\n\nHere's how to do this in Next.js 9.3 or newer:\n\n1. Create a reusable wrapper as demonstrated in the examples:\n\n```jsx live=false\n// e.g. src/Incmix.js\n// a) import `IncmixProvider` component as well as the storageManagers\nimport { IncmixProvider, cookieStorageManagerSSR, localStorageManager } from '@incmix-ui/react'\n\nexport function Incmix({ cookies, children }) {\n  // b) Pass `colorModeManager` prop\n  const colorModeManager = typeof cookies === 'string' ? cookieStorageManagerSSR(cookies) : localStorageManager\n\n  return <IncmixProvider colorModeManager={colorModeManager}>{children}</IncmixProvider>\n}\n\n// also export a reusable function getServerSideProps\nexport function getServerSideProps({ req }) {\n  return {\n    props: {\n      // first time users will not have any cookies and you may not return\n      // undefined here, hence ?? is necessary\n      cookies: req.headers.cookie ?? '',\n    },\n  }\n}\n```\n\n2. Import your wrapper component setting up Incmix:\n\n```jsx live=false\n// setup your wrapper in the _app file (e.g: pages/_app.js)\nimport { Incmix } from \"../src/Incmix\";\n\nexport default function App({ Component, pageProps }) {\n  return (\n    <Incmix cookies={pageProps.cookies}>\n      <Component {...pageProps} />\n    </Incmix>\n  );\n}\n\n// e.g pages/index.js\nexport default function Index() {\n  return <h1>Example</h1>;\n}\n\n// re-export the reusable `getServerSideProps` function\nexport { getServerSideProps } from \"./Incmix\";\n```\n\n> If you need to know the name of the Incmix cookie for specific reasons, it's\n> `incmix-ui-color-mode`. Also, if you use `colorModeManager`, you can avoid\n> adding the `<ColorModeScript />` to `_document.js`.\n\n> **Important:** if you're using `Next.js 9.3` or newer, the Next.js team\n> recommends avoiding `getInitialProps`. The following example is for Next 9.2\n> or older!\n\n```jsx live=false\n// pages/_app.js\nimport { IncmixProvider, cookieStorageManagerSSR, localStorageManager } from '@incmix-ui/react'\n\nexport default function App({ cookies }) {\n  // 2. Pass `colorModeManager` prop - it finds the relevant cookie on its own\n  return (\n    <IncmixProvider colorModeManager={typeof cookies === 'string' ? cookieStorageManagerSSR(cookies) : localStorageManager}>\n      <h1>Example</h1>\n    </IncmixProvider>\n  )\n}\n\nApp.getInitialProps = ({ req }) => {\n  return {\n    // first time users will not have any cookies and you may not return\n    // undefined here, hence ?? is necessary\n    cookies: req.headers.cookie ?? '',\n  }\n}\n```\n\n## Color Mode Flash Issue\n\nIn some cases, when you switch to dark mode and refresh the page, you might\nexperience a quick flash of light mode before it switches correctly.\n\nThis is a known issue and we're looking to fix it. If you have some ideas, feel\nfree to share with us on Discord or Github.\n",
    "code": "var Component=(()=>{var h=Object.create;var t=Object.defineProperty;var m=Object.getOwnPropertyDescriptor;var u=Object.getOwnPropertyNames;var p=Object.getPrototypeOf,g=Object.prototype.hasOwnProperty;var f=(n,e)=>()=>(e||n((e={exports:{}}).exports,e),e.exports),y=(n,e)=>{for(var r in e)t(n,r,{get:e[r],enumerable:!0})},l=(n,e,r,c)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let i of u(e))!g.call(n,i)&&i!==r&&t(n,i,{get:()=>e[i],enumerable:!(c=m(e,i))||c.enumerable});return n};var M=(n,e,r)=>(r=n!=null?h(p(n)):{},l(e||!n||!n.__esModule?t(r,\"default\",{value:n,enumerable:!0}):r,n)),x=n=>l(t({},\"__esModule\",{value:!0}),n);var a=f((v,d)=>{d.exports=_jsx_runtime});var w={};y(w,{default:()=>b,frontmatter:()=>k});var o=M(a()),k={title:\"Color Mode\",package:\"@incmix-ui/color-mode\",description:\"Working with color mode (light and dark mode) in Incmix UI\",category:\"features\"};function s(n){let e=Object.assign({p:\"p\",blockquote:\"blockquote\",strong:\"strong\",code:\"code\",h2:\"h2\",ol:\"ol\",li:\"li\",h3:\"h3\",ul:\"ul\",pre:\"pre\",h4:\"h4\"},n.components);return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(e.p,{children:\"Incmix UI comes with built-in support for managing color mode in your apps.\"}),`\n`,(0,o.jsx)(e.p,{children:`By default, most of Incmix's components are dark mode compatible. In some\nscenarios, you might need to make your component respond to color mode.`}),`\n`,(0,o.jsxs)(e.blockquote,{children:[`\n`,(0,o.jsxs)(e.p,{children:[(0,o.jsx)(e.strong,{children:\"Tip:\"}),\" Incmix stores the color mode in \",(0,o.jsx)(e.code,{children:\"localStorage\"}),` and appends a\nclassName to the `,(0,o.jsx)(e.code,{children:\"body\"}),\" to ensure the color mode is persistent.\"]}),`\n`]}),`\n`,(0,o.jsx)(e.h2,{id:\"setup\",children:\"Setup\"}),`\n`,(0,o.jsx)(e.p,{children:\"To get dark mode working correctly, you need to do two things:\"}),`\n`,(0,o.jsxs)(e.ol,{children:[`\n`,(0,o.jsxs)(e.li,{children:[`\n`,(0,o.jsx)(e.p,{children:`Update your theme config to determine how Incmix should manage color mode\nupdates.`}),`\n`]}),`\n`,(0,o.jsxs)(e.li,{children:[`\n`,(0,o.jsxs)(e.p,{children:[\"Add the \",(0,o.jsx)(e.code,{children:\"ColorModeScript\"}),` to your application, and set the initial color mode\nyour application should start with to either `,(0,o.jsx)(e.code,{children:\"light\"}),\", \",(0,o.jsx)(e.code,{children:\"dark\"}),\" or \",(0,o.jsx)(e.code,{children:\"system\"}),`. It\nis `,(0,o.jsx)(e.code,{children:\"light\"}),\" by default.\"]}),`\n`]}),`\n`]}),`\n`,(0,o.jsxs)(e.blockquote,{children:[`\n`,(0,o.jsxs)(e.p,{children:[(0,o.jsx)(e.strong,{children:\"Note:\"}),\" When using \",(0,o.jsx)(e.code,{children:\"system\"}),` as initial color mode, the theme will change\nwith the system preference. However, if another theme is manually selected by\nthe user then that theme will be used on the next page load. To reset it to\nsystem preference, simply remove the `,(0,o.jsx)(e.code,{children:\"incmix-ui-color-mode\"}),` entry from\nlocalStorage.`]}),`\n`]}),`\n`,(0,o.jsx)(e.h3,{id:\"updating-the-theme-config\",children:\"Updating the theme config\"}),`\n`,(0,o.jsx)(e.p,{children:\"The theme config for color mode has 2 options:\"}),`\n`,(0,o.jsxs)(e.ul,{children:[`\n`,(0,o.jsxs)(e.li,{children:[(0,o.jsx)(e.code,{children:\"initialColorMode\"}),\": The initial mode you'd like your app to start with\"]}),`\n`,(0,o.jsxs)(e.li,{children:[(0,o.jsx)(e.code,{children:\"useSystemColorMode\"}),\": If \",(0,o.jsx)(e.code,{children:\"true\"}),`, your app will change color mode based on the\nuser's system preferences.`]}),`\n`]}),`\n`,(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:\"language-jsx\",live:\"false\",children:`// theme.js\n\n// 1. import \\`extendTheme\\` function\nimport { extendTheme } from '@incmix-ui/react'\n\n// 2. Add your color mode config\nconst config = {\n  initialColorMode: 'light',\n  useSystemColorMode: false,\n}\n\n// 3. extend the theme\nconst theme = extendTheme({ config })\n\nexport default theme\n`})}),`\n`,(0,o.jsxs)(e.p,{children:[`For typescript, you need to explicitly describe the theme config type as\n`,(0,o.jsx)(e.code,{children:\"ThemeConfig\"}),\" object.\"]}),`\n`,(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:\"language-tsx\",live:\"false\",children:`// theme.ts\n\n// 1. import \\`extendTheme\\` function\nimport { extendTheme, type ThemeConfig } from '@incmix-ui/react'\n\n// 2. Add your color mode config\nconst config: ThemeConfig = {\n  initialColorMode: 'light',\n  useSystemColorMode: false,\n}\n\n// 3. extend the theme\nconst theme = extendTheme({ config })\n\nexport default theme\n`})}),`\n`,(0,o.jsxs)(e.blockquote,{children:[`\n`,(0,o.jsxs)(e.p,{children:[\"Remember to pass your custom \",(0,o.jsx)(e.code,{children:\"theme\"}),\" to the \",(0,o.jsx)(e.code,{children:\"IncmixProvider\"}),`, otherwise your\ncolor mode config won't be taken into consideration.`]}),`\n`]}),`\n`,(0,o.jsx)(e.h4,{id:\"behavior-of-colormode\",children:\"Behavior of ColorMode\"}),`\n`,(0,o.jsx)(e.p,{children:\"The current hierarchy of how the color mode is defined is as follows:\"}),`\n`,(0,o.jsxs)(e.ul,{children:[`\n`,(0,o.jsxs)(e.li,{children:[`\n`,(0,o.jsxs)(e.p,{children:[\"if \",(0,o.jsx)(e.code,{children:\"useSystemColorMode\"}),\" is true \",(0,o.jsx)(e.code,{children:\"system\"}),`-color will be used as default -\n`,(0,o.jsx)(e.code,{children:\"initialColorMode\"}),\" is the fallback if system color mode can't be resolved\"]}),`\n`]}),`\n`,(0,o.jsxs)(e.li,{children:[`\n`,(0,o.jsxs)(e.p,{children:[\"if \",(0,o.jsx)(e.code,{children:\"data-theme\"}),\" prop is defined through e.g. \",(0,o.jsx)(e.code,{children:\"ColorModeScript\"}),` / after\nmodification/initial load of the colorMode this value will be used`]}),`\n`]}),`\n`,(0,o.jsxs)(e.li,{children:[`\n`,(0,o.jsxs)(e.p,{children:[\"if \",(0,o.jsx)(e.code,{children:\"colorModeManager\"}),\" = \",(0,o.jsx)(e.code,{children:\"localStorage\"}),` and a value is defined for\n`,(0,o.jsx)(e.code,{children:\"incmix-ui-color-mode\"}),\" this will be used\"]}),`\n`]}),`\n`,(0,o.jsxs)(e.li,{children:[`\n`,(0,o.jsxs)(e.p,{children:[\"if \",(0,o.jsx)(e.code,{children:\"initialColorMode\"}),\" = \",(0,o.jsx)(e.code,{children:\"system\"}),` system-color will be used as default -\n`,(0,o.jsx)(e.code,{children:\"initialColorMode\"}),\" is the fallback if system color mode isn't resolved\"]}),`\n`]}),`\n`,(0,o.jsxs)(e.li,{children:[`\n`,(0,o.jsxs)(e.p,{children:[\"if \",(0,o.jsx)(e.code,{children:\"initialColorMode\"}),\" = \",(0,o.jsx)(e.code,{children:\"'light'|'dark'\"}),\" the corresponding value will be used\"]}),`\n`]}),`\n`]}),`\n`,(0,o.jsxs)(e.p,{children:[\"We currently accept 3 different values for \",(0,o.jsx)(e.code,{children:\"initialColorMode\"}),`:\n`,(0,o.jsx)(e.code,{children:\"light\"}),\",\",(0,o.jsx)(e.code,{children:\"dark\"}),\",\",(0,o.jsx)(e.code,{children:\"system\"})]}),`\n`,(0,o.jsxs)(e.h4,{id:\"difference-between-initialcolormodesystem-and-usesystemcolormode\",children:[\"Difference between \",(0,o.jsx)(e.code,{children:\"initialColorMode='system'\"}),\" and \",(0,o.jsx)(e.code,{children:\"useSystemColorMode\"})]}),`\n`,(0,o.jsxs)(e.p,{children:[\"if \",(0,o.jsx)(e.code,{children:\"useSystemColorMode=true\"}),` we will always try to match the users\n`,(0,o.jsx)(e.code,{children:\"system\"}),\"-color and fallback to \",(0,o.jsx)(e.code,{children:\"initialColorMode\"}),`. With this behavior, the\ncolorMode toggle won't have any effect.`]}),`\n`,(0,o.jsxs)(e.p,{children:[\"if \",(0,o.jsx)(e.code,{children:\"initialColorMode='system'\"}),` we will as well always try to match the users\n`,(0,o.jsx)(e.code,{children:\"system\"}),\"-color and fallback to \",(0,o.jsx)(e.code,{children:\"light\"}),`. After the user has toggled the value,\nthis value will be used.`]}),`\n`,(0,o.jsxs)(e.h3,{id:\"adding-the-colormodescript\",children:[\"Adding the \",(0,o.jsx)(e.code,{children:\"ColorModeScript\"})]}),`\n`,(0,o.jsxs)(e.p,{children:[\"The color mode script needs to be added before the content inside the \",(0,o.jsx)(e.code,{children:\"body\"}),` tag\nfor local storage syncing to work correctly.`]}),`\n`,(0,o.jsxs)(e.blockquote,{children:[`\n`,(0,o.jsxs)(e.p,{children:[`When setting the initial color mode, we recommend adding it as a config to\nyour theme and reference that in the `,(0,o.jsx)(e.code,{children:\"ColorModeScript\"}),\".\"]}),`\n`]}),`\n`,(0,o.jsxs)(e.blockquote,{children:[`\n`,(0,o.jsxs)(e.p,{children:[\"To use \",(0,o.jsx)(e.code,{children:\"ColorModeScript\"}),\" on a site with strict \",(0,o.jsx)(e.code,{children:\"Content-Security-Policy\"}),`, you\ncan use the `,(0,o.jsx)(e.code,{children:\"nonce\"}),\" prop that will be passed to the \",(0,o.jsx)(e.code,{children:\"<script>\"}),\" tag.\"]}),`\n`]}),`\n`,(0,o.jsx)(e.h4,{id:\"for-nextjs\",children:\"For Next.js\"}),`\n`,(0,o.jsxs)(e.p,{children:[\"For Next.js, you need to add the \",(0,o.jsx)(e.code,{children:\"ColorModeScript\"}),\" to the \",(0,o.jsx)(e.code,{children:\"_document.js\"}),\" file.\"]}),`\n`,(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:\"language-jsx\",live:\"false\",ln:\"{14}\",children:`// pages/_document.js\n\nimport { ColorModeScript } from '@incmix-ui/react'\nimport NextDocument, { Html, Head, Main, NextScript } from 'next/document'\nimport theme from './theme'\n\nexport default class Document extends NextDocument {\n  render() {\n    return (\n      <Html lang=\"en\">\n        <Head />\n        <body>\n          {/* \\u{1F447} Here's the script */}\n          <ColorModeScript initialColorMode={theme.config.initialColorMode} />\n          <Main />\n          <NextScript />\n        </body>\n      </Html>\n    )\n  }\n}\n`})}),`\n`,(0,o.jsx)(e.h4,{id:\"for-create-react-app\",children:\"For Create React App\"}),`\n`,(0,o.jsxs)(e.p,{children:[\"For Create React App, you need to add the \",(0,o.jsx)(e.code,{children:\"ColorModeScript\"}),\" to the \",(0,o.jsx)(e.code,{children:\"index.js\"}),`\nfile.`]}),`\n`,(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:\"language-jsx\",live:\"false\",ln:\"{11}\",children:`// index.js\n\nimport { ColorModeScript } from '@incmix-ui/react'\nimport * as ReactDOM from 'react-dom/client'\nimport App from './App'\nimport theme from './theme'\n\nconst rootElement = document.getElementById('root')\nReactDOM.createRoot(rootElement).render(\n  <>\n    {/* \\u{1F447} Here's the script */}\n    <ColorModeScript initialColorMode={theme.config.initialColorMode} />\n    <App />\n  </>,\n)\n`})}),`\n`,(0,o.jsx)(e.h4,{id:\"for-gatsby\",children:\"For Gatsby\"}),`\n`,(0,o.jsx)(e.h2,{id:\"changing-color-mode\",children:\"Changing Color Mode\"}),`\n`,(0,o.jsxs)(e.p,{children:[\"To manage color mode in your application, incmix exposes the \",(0,o.jsx)(e.code,{children:\"useColorMode\"}),` or\n`,(0,o.jsx)(e.code,{children:\"useColorModeValue\"}),\" hooks.\"]}),`\n`,(0,o.jsx)(e.h3,{id:\"usecolormode\",children:\"useColorMode\"}),`\n`,(0,o.jsxs)(e.p,{children:[(0,o.jsx)(e.code,{children:\"useColorMode\"}),` is a React hook that gives you access to the current color mode,\nand a function to toggle the color mode.`]}),`\n`,(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:\"language-jsx\",children:`function Example() {\n  const { colorMode, toggleColorMode } = useColorMode()\n  return (\n    <header>\n      <Button onClick={toggleColorMode}>Toggle {colorMode === 'light' ? 'Dark' : 'Light'}</Button>\n    </header>\n  )\n}\n`})}),`\n`,(0,o.jsxs)(e.p,{children:[\"Calling \",(0,o.jsx)(e.code,{children:\"toggleColorMode\"}),` anywhere in your app tree toggles the color mode from\n`,(0,o.jsx)(e.code,{children:\"light\"}),\" or \",(0,o.jsx)(e.code,{children:\"dark\"}),\" and vice versa.\"]}),`\n`,(0,o.jsx)(e.h3,{id:\"usecolormodevalue\",children:\"useColorModeValue\"}),`\n`,(0,o.jsxs)(e.p,{children:[(0,o.jsx)(e.code,{children:\"useColorModeValue\"}),` is a React hook used to change any value or style based on\nthe color mode. It takes 2 arguments: the value in light mode, and the value in\ndark mode.`]}),`\n`,(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:\"language-jsx\",live:\"false\",children:`// Here's the signature\nconst value = useColorModeValue(lightModeValue, darkModeValue)\n`})}),`\n`,(0,o.jsxs)(e.p,{children:[\"Here's an example that changes the \",(0,o.jsx)(e.code,{children:\"background-color\"}),\" and \",(0,o.jsx)(e.code,{children:\"color\"}),` using the\n`,(0,o.jsx)(e.code,{children:\"useColorModeValue\"}),\" hook.\"]}),`\n`,(0,o.jsxs)(e.blockquote,{children:[`\n`,(0,o.jsxs)(e.p,{children:[\"Click the \",(0,o.jsx)(e.strong,{children:\"Toggle Mode\"}),\" button to see it in action.\"]}),`\n`]}),`\n`,(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:\"language-jsx\",children:`function StyleColorMode() {\n  const { toggleColorMode } = useColorMode()\n\n  const bg = useColorModeValue('red.500', 'red.200')\n  const color = useColorModeValue('white', 'gray.800')\n\n  return (\n    <>\n      <Box mb={4} bg={bg} color={color}>\n        This box's style will change based on the color mode.\n      </Box>\n      <Button size=\"sm\" onClick={toggleColorMode}>\n        Toggle Mode\n      </Button>\n    </>\n  )\n}\n`})}),`\n`,(0,o.jsx)(e.h2,{id:\"forcing-a-specific-mode\",children:\"Forcing a specific mode\"}),`\n`,(0,o.jsxs)(e.p,{children:[`In some occasions, you might want Incmix components to look the same in both\nlight and dark modes. To achieve this, wrap the component in a `,(0,o.jsx)(e.code,{children:\"LightMode\"}),` or\n`,(0,o.jsx)(e.code,{children:\"DarkMode\"}),\" component. Doing this will override the global \",(0,o.jsx)(e.code,{children:\"colorMode\"}),\".\"]}),`\n`,(0,o.jsxs)(e.blockquote,{children:[`\n`,(0,o.jsxs)(e.p,{children:[\"Click the \",(0,o.jsx)(e.strong,{children:'\"Toggle Mode\"'}),\" button to see it in action.\"]}),`\n`]}),`\n`,(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:\"language-jsx\",children:`function Example() {\n  const { colorMode, toggleColorMode } = useColorMode()\n\n  return (\n    <HStack>\n      <LightMode>\n        <Button size=\"sm\" colorScheme=\"blue\">\n          Light Mode Always\n        </Button>\n      </LightMode>\n\n      <DarkMode>\n        <Button size=\"sm\" colorScheme=\"blue\">\n          Dark Mode Always\n        </Button>\n      </DarkMode>\n\n      <Button size=\"sm\" colorScheme=\"blue\" onClick={toggleColorMode}>\n        Toggle Mode\n      </Button>\n    </HStack>\n  )\n}\n`})}),`\n`,(0,o.jsx)(e.h2,{id:\"add-colormodemanager-optional-for-ssr\",children:\"Add colorModeManager (Optional, for SSR)\"}),`\n`,(0,o.jsxs)(e.p,{children:[`For server-side rendered sites, e.g. in Next.js, you may want to know the color\npreference of a user upfront so you can avoid rendering the initial color mode\nand then changing it during hydration (so-called `,(0,o.jsx)(e.code,{children:\"flashing\"}),\").\"]}),`\n`,(0,o.jsxs)(e.p,{children:[`If you don't use SSR or don't care about this, you don't need to pass anything.\nIncmix will use `,(0,o.jsx)(e.code,{children:\"localStorageManager\"}),\" by default.\"]}),`\n`,(0,o.jsx)(e.p,{children:\"Here's how to do this in Next.js 9.3 or newer:\"}),`\n`,(0,o.jsxs)(e.ol,{children:[`\n`,(0,o.jsx)(e.li,{children:\"Create a reusable wrapper as demonstrated in the examples:\"}),`\n`]}),`\n`,(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:\"language-jsx\",live:\"false\",children:`// e.g. src/Incmix.js\n// a) import \\`IncmixProvider\\` component as well as the storageManagers\nimport { IncmixProvider, cookieStorageManagerSSR, localStorageManager } from '@incmix-ui/react'\n\nexport function Incmix({ cookies, children }) {\n  // b) Pass \\`colorModeManager\\` prop\n  const colorModeManager = typeof cookies === 'string' ? cookieStorageManagerSSR(cookies) : localStorageManager\n\n  return <IncmixProvider colorModeManager={colorModeManager}>{children}</IncmixProvider>\n}\n\n// also export a reusable function getServerSideProps\nexport function getServerSideProps({ req }) {\n  return {\n    props: {\n      // first time users will not have any cookies and you may not return\n      // undefined here, hence ?? is necessary\n      cookies: req.headers.cookie ?? '',\n    },\n  }\n}\n`})}),`\n`,(0,o.jsxs)(e.ol,{start:\"2\",children:[`\n`,(0,o.jsx)(e.li,{children:\"Import your wrapper component setting up Incmix:\"}),`\n`]}),`\n`,(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:\"language-jsx\",live:\"false\",children:`// setup your wrapper in the _app file (e.g: pages/_app.js)\nimport { Incmix } from \"../src/Incmix\";\n\nexport default function App({ Component, pageProps }) {\n  return (\n    <Incmix cookies={pageProps.cookies}>\n      <Component {...pageProps} />\n    </Incmix>\n  );\n}\n\n// e.g pages/index.js\nexport default function Index() {\n  return <h1>Example</h1>;\n}\n\n// re-export the reusable \\`getServerSideProps\\` function\nexport { getServerSideProps } from \"./Incmix\";\n`})}),`\n`,(0,o.jsxs)(e.blockquote,{children:[`\n`,(0,o.jsxs)(e.p,{children:[`If you need to know the name of the Incmix cookie for specific reasons, it's\n`,(0,o.jsx)(e.code,{children:\"incmix-ui-color-mode\"}),\". Also, if you use \",(0,o.jsx)(e.code,{children:\"colorModeManager\"}),`, you can avoid\nadding the `,(0,o.jsx)(e.code,{children:\"<ColorModeScript />\"}),\" to \",(0,o.jsx)(e.code,{children:\"_document.js\"}),\".\"]}),`\n`]}),`\n`,(0,o.jsxs)(e.blockquote,{children:[`\n`,(0,o.jsxs)(e.p,{children:[(0,o.jsx)(e.strong,{children:\"Important:\"}),\" if you're using \",(0,o.jsx)(e.code,{children:\"Next.js 9.3\"}),` or newer, the Next.js team\nrecommends avoiding `,(0,o.jsx)(e.code,{children:\"getInitialProps\"}),`. The following example is for Next 9.2\nor older!`]}),`\n`]}),`\n`,(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:\"language-jsx\",live:\"false\",children:`// pages/_app.js\nimport { IncmixProvider, cookieStorageManagerSSR, localStorageManager } from '@incmix-ui/react'\n\nexport default function App({ cookies }) {\n  // 2. Pass \\`colorModeManager\\` prop - it finds the relevant cookie on its own\n  return (\n    <IncmixProvider colorModeManager={typeof cookies === 'string' ? cookieStorageManagerSSR(cookies) : localStorageManager}>\n      <h1>Example</h1>\n    </IncmixProvider>\n  )\n}\n\nApp.getInitialProps = ({ req }) => {\n  return {\n    // first time users will not have any cookies and you may not return\n    // undefined here, hence ?? is necessary\n    cookies: req.headers.cookie ?? '',\n  }\n}\n`})}),`\n`,(0,o.jsx)(e.h2,{id:\"color-mode-flash-issue\",children:\"Color Mode Flash Issue\"}),`\n`,(0,o.jsx)(e.p,{children:`In some cases, when you switch to dark mode and refresh the page, you might\nexperience a quick flash of light mode before it switches correctly.`}),`\n`,(0,o.jsx)(e.p,{children:`This is a known issue and we're looking to fix it. If you have some ideas, feel\nfree to share with us on Discord or Github.`})]})}function C(n={}){let{wrapper:e}=n.components||{};return e?(0,o.jsx)(e,Object.assign({},n,{children:(0,o.jsx)(s,n)})):s(n)}var b=C;return x(w);})();\n;return Component;"
  },
  "_id": "docs/styled-system/color-mode.mdx",
  "_raw": {
    "sourceFilePath": "docs/styled-system/color-mode.mdx",
    "sourceFileName": "color-mode.mdx",
    "sourceFileDir": "docs/styled-system",
    "contentType": "mdx",
    "flattenedPath": "docs/styled-system/color-mode"
  },
  "type": "Doc",
  "slug": "/docs/styled-system/color-mode",
  "frontMatter": {
    "title": "Color Mode",
    "package": "@incmix-ui/color-mode",
    "description": "Working with color mode (light and dark mode) in Incmix UI",
    "slug": "/docs/styled-system/color-mode",
    "editUrl": "https://github.com/incmix-ui/incmix-ui-docs/tree/main/content/docs/styled-system/color-mode.mdx",
    "headings": [
      {
        "text": "Setup",
        "id": "setup",
        "level": "h2"
      },
      {
        "text": "Updating the theme config",
        "id": "updating-the-theme-config",
        "level": "h3"
      },
      {
        "text": "Adding the `ColorModeScript`",
        "id": "adding-the-colormodescript",
        "level": "h3"
      },
      {
        "text": "Changing Color Mode",
        "id": "changing-color-mode",
        "level": "h2"
      },
      {
        "text": "useColorMode",
        "id": "usecolormode",
        "level": "h3"
      },
      {
        "text": "useColorModeValue",
        "id": "usecolormodevalue",
        "level": "h3"
      },
      {
        "text": "Forcing a specific mode",
        "id": "forcing-a-specific-mode",
        "level": "h2"
      },
      {
        "text": "Add colorModeManager (Optional, for SSR)",
        "id": "add-colormodemanager-optional-for-ssr",
        "level": "h2"
      },
      {
        "text": "Color Mode Flash Issue",
        "id": "color-mode-flash-issue",
        "level": "h2"
      }
    ]
  }
}
