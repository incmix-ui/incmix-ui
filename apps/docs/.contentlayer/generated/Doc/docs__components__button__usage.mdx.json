{
  "title": "Button",
  "package": "@incmix-ui/button",
  "description": "Button component is used to trigger an action or event, such as submitting a form, opening a Dialog, canceling an action, or performing a delete operation.",
  "id": "button",
  "scope": "usage",
  "category": "form",
  "body": {
    "raw": "\n## Import\n\n```js\nimport { Button, ButtonGroup } from '@incmix-ui/react'\n```\n\n- **Button:** The button component with support for custom icons, spinners, etc.\n- **ButtonGroup:** Used to group buttons whose actions are related, with an\n  option to flush them together.\n\n## Usage\n\n```jsx\n<Button colorScheme=\"blue\">Button</Button>\n```\n\n### Button Sizes\n\nUse the `size` prop to change the size of the button. You can set the value to\n`xs`, `sm`, `md`, or `lg`.\n\n```jsx\n<Stack spacing={4} direction=\"row\" align=\"center\">\n  <Button colorScheme=\"teal\" size=\"xs\">\n    Button\n  </Button>\n  <Button colorScheme=\"teal\" size=\"sm\">\n    Button\n  </Button>\n  <Button colorScheme=\"teal\" size=\"md\">\n    Button\n  </Button>\n  <Button colorScheme=\"teal\" size=\"lg\">\n    Button\n  </Button>\n</Stack>\n```\n\n### Button variants\n\nUse the `variant` prop to change the visual style of the Button. You can set the\nvalue to `solid`, `ghost`, `outline`, or `link`.\n\n```jsx\n<Stack direction=\"row\" spacing={4} align=\"center\">\n  <Button colorScheme=\"teal\" variant=\"solid\">\n    Button\n  </Button>\n  <Button colorScheme=\"teal\" variant=\"outline\">\n    Button\n  </Button>\n  <Button colorScheme=\"teal\" variant=\"ghost\">\n    Button\n  </Button>\n  <Button colorScheme=\"teal\" variant=\"link\">\n    Button\n  </Button>\n</Stack>\n```\n\n### Button Colors\n\nUse the colorScheme prop to change the color scheme of the Button. You can set\nthe value to any of the color scales from your design system, like `whiteAlpha`,\n`blackAlpha`, `gray`, `red`, `blue`, or your custom color scale.\n\n```jsx\n<Stack direction=\"column\">\n  <Box\n    display=\"flex\"\n    alignItems=\"center\"\n    justifyContent=\"center\"\n    width=\"100%\"\n    py={12}\n    bgImage=\"url('https://bit.ly/2Z4KKcF')\"\n    bgPosition=\"center\"\n    bgRepeat=\"no-repeat\"\n    mb={2}\n  >\n    <ButtonGroup gap=\"4\">\n      <Button colorScheme=\"whiteAlpha\">WhiteAlpha</Button>\n      <Button colorScheme=\"blackAlpha\">BlackAlpha</Button>\n    </ButtonGroup>\n  </Box>\n\n  <Wrap spacing={4}>\n    <WrapItem>\n      <Button colorScheme=\"gray\">Gray</Button>\n    </WrapItem>\n    <WrapItem>\n      <Button colorScheme=\"red\">Red</Button>\n    </WrapItem>\n    <WrapItem>\n      <Button colorScheme=\"orange\">Orange</Button>\n    </WrapItem>\n    <WrapItem>\n      <Button colorScheme=\"yellow\">Yellow</Button>\n    </WrapItem>\n    <WrapItem>\n      <Button colorScheme=\"green\">Green</Button>\n    </WrapItem>\n    <WrapItem>\n      <Button colorScheme=\"teal\">Teal</Button>\n    </WrapItem>\n    <WrapItem>\n      <Button colorScheme=\"blue\">Blue</Button>\n    </WrapItem>\n    <WrapItem>\n      <Button colorScheme=\"cyan\">Cyan</Button>\n    </WrapItem>\n    <WrapItem>\n      <Button colorScheme=\"purple\">Purple</Button>\n    </WrapItem>\n    <WrapItem>\n      <Button colorScheme=\"pink\">Pink</Button>\n    </WrapItem>\n    <WrapItem>\n      <Button colorScheme=\"linkedin\">Linkedin</Button>\n    </WrapItem>\n    <WrapItem>\n      <Button colorScheme=\"facebook\">Facebook</Button>\n    </WrapItem>\n    <WrapItem>\n      <Button colorScheme=\"messenger\">Messenger</Button>\n    </WrapItem>\n    <WrapItem>\n      <Button colorScheme=\"whatsapp\">Whatsapp</Button>\n    </WrapItem>\n    <WrapItem>\n      <Button colorScheme=\"twitter\">Twitter</Button>\n    </WrapItem>\n    <WrapItem>\n      <Button colorScheme=\"telegram\">Telegram</Button>\n    </WrapItem>\n  </Wrap>\n</Stack>\n```\n\n### Button with icon\n\nYou can add left and right icons to the Button component using the `leftIcon`\nand `rightIcon` props respectively.\n\n> Note: The `leftIcon` and `rightIcon` prop values should be react elements NOT\n> strings.\n\n```jsx\n<Stack direction=\"row\" spacing={4}>\n  <Button leftIcon={<EmailIcon />} colorScheme=\"teal\" variant=\"solid\">\n    Email\n  </Button>\n  <Button rightIcon={<ArrowForwardIcon />} colorScheme=\"teal\" variant=\"outline\">\n    Call us\n  </Button>\n</Stack>\n```\n\nYou can also use icons from popular libraries like\n[react-icons](https://react-icons.github.io/react-icons/) and pass it into the\nbutton.\n\n```jsx\n// import { MdBuild , MdCall } from \"react-icons/md\"\n\n<Stack direction=\"row\" spacing={4}>\n  <Button leftIcon={<MdBuild />} colorScheme=\"pink\" variant=\"solid\">\n    Settings\n  </Button>\n  <Button rightIcon={<MdCall />} colorScheme=\"blue\" variant=\"outline\">\n    Call us\n  </Button>\n</Stack>\n```\n\n### Button loading state\n\nPass the `isLoading` prop to show its loading state. By default, the button will\nshow a spinner and leave the button's width unchanged.\n\nYou can also pass the `loadingText` prop to show a spinner and the loading text.\n\n```jsx\n<Stack direction=\"row\" spacing={4}>\n  <Button isLoading colorScheme=\"teal\" variant=\"solid\">\n    Email\n  </Button>\n  <Button isLoading loadingText=\"Submitting\" colorScheme=\"teal\" variant=\"outline\">\n    Submit\n  </Button>\n</Stack>\n```\n\nYou can change the spinner element to use custom loaders as per your design\nrequirements. Pass the `spinner` prop and set it to a custom react element.\n\n```jsx\n<Button isLoading colorScheme=\"blue\" spinner={<BeatLoader size={8} color=\"white\" />}>\n  Click me\n</Button>\n```\n\nWhen a `loadingText` is present, you can change the placement of the spinner\nelement to either `start` or `end`. It is `start` by default.\n\n```jsx\n<Stack direction=\"row\" spacing={4} align=\"center\">\n  <Button isLoading loadingText=\"Loading\" colorScheme=\"teal\" variant=\"outline\" spinnerPlacement=\"start\">\n    Submit\n  </Button>\n  <Button isLoading loadingText=\"Loading\" colorScheme=\"teal\" variant=\"outline\" spinnerPlacement=\"end\">\n    Continue\n  </Button>\n</Stack>\n```\n\n### Social Buttons\n\nWe've included the colors for common social media platforms, and you can simply\nuse their buttons via the `colorScheme` prop.\n\n```jsx\n<HStack>\n  <Button colorScheme=\"facebook\" leftIcon={<FaFacebook />}>\n    Facebook\n  </Button>\n  <Button colorScheme=\"twitter\" leftIcon={<FaTwitter />}>\n    Twitter\n  </Button>\n</HStack>\n```\n\nThe Facebook and Twitter icons in the above example are available from\n[`react-icons`](https://react-icons.netlify.com/#/) as `FaFacebook` and\n`FaTwitter`, found in the `react-icons/fa` import.\n\n### Grouping Buttons\n\nYou can use the `Stack` or `ButtonGroup` component to group buttons. When you\nuse the `ButtonGroup` component, it allows you to:\n\n- Set the `size` and `variant` of all buttons within it.\n- Add `spacing` between the buttons.\n- Flush the buttons together by removing the border radius of their children as\n  needed.\n\n```jsx\n<ButtonGroup variant=\"outline\" spacing=\"6\">\n  <Button colorScheme=\"blue\">Save</Button>\n  <Button>Cancel</Button>\n</ButtonGroup>\n```\n\nTo flush the buttons, pass the `isAttached` prop.\n\n```jsx\n<ButtonGroup size=\"sm\" isAttached variant=\"outline\">\n  <Button>Save</Button>\n  <IconButton aria-label=\"Add to friends\" icon={<AddIcon />} />\n</ButtonGroup>\n```\n\n## Accessibility\n\n- Button has `role` of `button`.\n- When Button has focus, <kbd>Space</kbd> or <kbd>Enter</kbd> activates it.\n\n## Composition\n\nAll props you pass (`variant`, `colorScheme`, etc.) are converted to style\nprops. This means you can override any style of the Button via props.\n\n```jsx\n// The size prop affects the height of the button\n// It can still be overridden by passing a custom height\n<Button size=\"md\" height=\"48px\" width=\"200px\" border=\"2px\" borderColor=\"green.500\">\n  Button\n</Button>\n```\n\n---\n\n## Custom Button\n\nIn the event that you need to make your own custom button, you can leverage the\n`Box` component. It provides the `hover`, `focus`, `active` and `disabled` style\nprops to style the button.\n\n```jsx\n// Button from facebook.com\n<Box\n  as=\"button\"\n  height=\"24px\"\n  lineHeight=\"1.2\"\n  transition=\"all 0.2s cubic-bezier(.08,.52,.52,1)\"\n  border=\"1px\"\n  px=\"8px\"\n  borderRadius=\"2px\"\n  fontSize=\"14px\"\n  fontWeight=\"semibold\"\n  bg=\"#f5f6f7\"\n  borderColor=\"#ccd0d5\"\n  color=\"#4b4f56\"\n  _hover={{ bg: '#ebedf0' }}\n  _active={{\n    bg: '#dddfe2',\n    transform: 'scale(0.98)',\n    borderColor: '#bec3c9',\n  }}\n  _focus={{\n    boxShadow: '0 0 1px 2px rgba(88, 144, 255, .75), 0 1px 1px rgba(0, 0, 0, .15)',\n  }}\n>\n  Join Group\n</Box>\n```\n",
    "code": "var Component=(()=>{var s=Object.create;var r=Object.defineProperty;var u=Object.getOwnPropertyDescriptor;var p=Object.getOwnPropertyNames;var m=Object.getPrototypeOf,g=Object.prototype.hasOwnProperty;var B=(t,n)=>()=>(n||t((n={exports:{}}).exports,n),n.exports),b=(t,n)=>{for(var o in n)r(t,o,{get:n[o],enumerable:!0})},a=(t,n,o,i)=>{if(n&&typeof n==\"object\"||typeof n==\"function\")for(let c of p(n))!g.call(t,c)&&c!==o&&r(t,c,{get:()=>n[c],enumerable:!(i=u(n,c))||i.enumerable});return t};var S=(t,n,o)=>(o=t!=null?s(m(t)):{},a(n||!t||!t.__esModule?r(o,\"default\",{value:t,enumerable:!0}):o,t)),f=t=>a(r({},\"__esModule\",{value:!0}),t);var d=B((W,l)=>{l.exports=_jsx_runtime});var k={};b(k,{default:()=>v,frontmatter:()=>x});var e=S(d()),x={id:\"button\",category:\"form\",title:\"Button\",package:\"@incmix-ui/button\",description:\"Button component is used to trigger an action or event, such as submitting a form, opening a Dialog, canceling an action, or performing a delete operation.\"};function h(t){let n=Object.assign({h2:\"h2\",pre:\"pre\",code:\"code\",ul:\"ul\",li:\"li\",strong:\"strong\",h3:\"h3\",p:\"p\",blockquote:\"blockquote\",a:\"a\",hr:\"hr\"},t.components);return(0,e.jsxs)(e.Fragment,{children:[(0,e.jsx)(n.h2,{id:\"import\",children:\"Import\"}),`\n`,(0,e.jsx)(n.pre,{children:(0,e.jsx)(n.code,{className:\"language-js\",children:`import { Button, ButtonGroup } from '@incmix-ui/react'\n`})}),`\n`,(0,e.jsxs)(n.ul,{children:[`\n`,(0,e.jsxs)(n.li,{children:[(0,e.jsx)(n.strong,{children:\"Button:\"}),\" The button component with support for custom icons, spinners, etc.\"]}),`\n`,(0,e.jsxs)(n.li,{children:[(0,e.jsx)(n.strong,{children:\"ButtonGroup:\"}),` Used to group buttons whose actions are related, with an\noption to flush them together.`]}),`\n`]}),`\n`,(0,e.jsx)(n.h2,{id:\"usage\",children:\"Usage\"}),`\n`,(0,e.jsx)(n.pre,{children:(0,e.jsx)(n.code,{className:\"language-jsx\",children:`<Button colorScheme=\"blue\">Button</Button>\n`})}),`\n`,(0,e.jsx)(n.h3,{id:\"button-sizes\",children:\"Button Sizes\"}),`\n`,(0,e.jsxs)(n.p,{children:[\"Use the \",(0,e.jsx)(n.code,{children:\"size\"}),` prop to change the size of the button. You can set the value to\n`,(0,e.jsx)(n.code,{children:\"xs\"}),\", \",(0,e.jsx)(n.code,{children:\"sm\"}),\", \",(0,e.jsx)(n.code,{children:\"md\"}),\", or \",(0,e.jsx)(n.code,{children:\"lg\"}),\".\"]}),`\n`,(0,e.jsx)(n.pre,{children:(0,e.jsx)(n.code,{className:\"language-jsx\",children:`<Stack spacing={4} direction=\"row\" align=\"center\">\n  <Button colorScheme=\"teal\" size=\"xs\">\n    Button\n  </Button>\n  <Button colorScheme=\"teal\" size=\"sm\">\n    Button\n  </Button>\n  <Button colorScheme=\"teal\" size=\"md\">\n    Button\n  </Button>\n  <Button colorScheme=\"teal\" size=\"lg\">\n    Button\n  </Button>\n</Stack>\n`})}),`\n`,(0,e.jsx)(n.h3,{id:\"button-variants\",children:\"Button variants\"}),`\n`,(0,e.jsxs)(n.p,{children:[\"Use the \",(0,e.jsx)(n.code,{children:\"variant\"}),` prop to change the visual style of the Button. You can set the\nvalue to `,(0,e.jsx)(n.code,{children:\"solid\"}),\", \",(0,e.jsx)(n.code,{children:\"ghost\"}),\", \",(0,e.jsx)(n.code,{children:\"outline\"}),\", or \",(0,e.jsx)(n.code,{children:\"link\"}),\".\"]}),`\n`,(0,e.jsx)(n.pre,{children:(0,e.jsx)(n.code,{className:\"language-jsx\",children:`<Stack direction=\"row\" spacing={4} align=\"center\">\n  <Button colorScheme=\"teal\" variant=\"solid\">\n    Button\n  </Button>\n  <Button colorScheme=\"teal\" variant=\"outline\">\n    Button\n  </Button>\n  <Button colorScheme=\"teal\" variant=\"ghost\">\n    Button\n  </Button>\n  <Button colorScheme=\"teal\" variant=\"link\">\n    Button\n  </Button>\n</Stack>\n`})}),`\n`,(0,e.jsx)(n.h3,{id:\"button-colors\",children:\"Button Colors\"}),`\n`,(0,e.jsxs)(n.p,{children:[`Use the colorScheme prop to change the color scheme of the Button. You can set\nthe value to any of the color scales from your design system, like `,(0,e.jsx)(n.code,{children:\"whiteAlpha\"}),`,\n`,(0,e.jsx)(n.code,{children:\"blackAlpha\"}),\", \",(0,e.jsx)(n.code,{children:\"gray\"}),\", \",(0,e.jsx)(n.code,{children:\"red\"}),\", \",(0,e.jsx)(n.code,{children:\"blue\"}),\", or your custom color scale.\"]}),`\n`,(0,e.jsx)(n.pre,{children:(0,e.jsx)(n.code,{className:\"language-jsx\",children:`<Stack direction=\"column\">\n  <Box\n    display=\"flex\"\n    alignItems=\"center\"\n    justifyContent=\"center\"\n    width=\"100%\"\n    py={12}\n    bgImage=\"url('https://bit.ly/2Z4KKcF')\"\n    bgPosition=\"center\"\n    bgRepeat=\"no-repeat\"\n    mb={2}\n  >\n    <ButtonGroup gap=\"4\">\n      <Button colorScheme=\"whiteAlpha\">WhiteAlpha</Button>\n      <Button colorScheme=\"blackAlpha\">BlackAlpha</Button>\n    </ButtonGroup>\n  </Box>\n\n  <Wrap spacing={4}>\n    <WrapItem>\n      <Button colorScheme=\"gray\">Gray</Button>\n    </WrapItem>\n    <WrapItem>\n      <Button colorScheme=\"red\">Red</Button>\n    </WrapItem>\n    <WrapItem>\n      <Button colorScheme=\"orange\">Orange</Button>\n    </WrapItem>\n    <WrapItem>\n      <Button colorScheme=\"yellow\">Yellow</Button>\n    </WrapItem>\n    <WrapItem>\n      <Button colorScheme=\"green\">Green</Button>\n    </WrapItem>\n    <WrapItem>\n      <Button colorScheme=\"teal\">Teal</Button>\n    </WrapItem>\n    <WrapItem>\n      <Button colorScheme=\"blue\">Blue</Button>\n    </WrapItem>\n    <WrapItem>\n      <Button colorScheme=\"cyan\">Cyan</Button>\n    </WrapItem>\n    <WrapItem>\n      <Button colorScheme=\"purple\">Purple</Button>\n    </WrapItem>\n    <WrapItem>\n      <Button colorScheme=\"pink\">Pink</Button>\n    </WrapItem>\n    <WrapItem>\n      <Button colorScheme=\"linkedin\">Linkedin</Button>\n    </WrapItem>\n    <WrapItem>\n      <Button colorScheme=\"facebook\">Facebook</Button>\n    </WrapItem>\n    <WrapItem>\n      <Button colorScheme=\"messenger\">Messenger</Button>\n    </WrapItem>\n    <WrapItem>\n      <Button colorScheme=\"whatsapp\">Whatsapp</Button>\n    </WrapItem>\n    <WrapItem>\n      <Button colorScheme=\"twitter\">Twitter</Button>\n    </WrapItem>\n    <WrapItem>\n      <Button colorScheme=\"telegram\">Telegram</Button>\n    </WrapItem>\n  </Wrap>\n</Stack>\n`})}),`\n`,(0,e.jsx)(n.h3,{id:\"button-with-icon\",children:\"Button with icon\"}),`\n`,(0,e.jsxs)(n.p,{children:[\"You can add left and right icons to the Button component using the \",(0,e.jsx)(n.code,{children:\"leftIcon\"}),`\nand `,(0,e.jsx)(n.code,{children:\"rightIcon\"}),\" props respectively.\"]}),`\n`,(0,e.jsxs)(n.blockquote,{children:[`\n`,(0,e.jsxs)(n.p,{children:[\"Note: The \",(0,e.jsx)(n.code,{children:\"leftIcon\"}),\" and \",(0,e.jsx)(n.code,{children:\"rightIcon\"}),` prop values should be react elements NOT\nstrings.`]}),`\n`]}),`\n`,(0,e.jsx)(n.pre,{children:(0,e.jsx)(n.code,{className:\"language-jsx\",children:`<Stack direction=\"row\" spacing={4}>\n  <Button leftIcon={<EmailIcon />} colorScheme=\"teal\" variant=\"solid\">\n    Email\n  </Button>\n  <Button rightIcon={<ArrowForwardIcon />} colorScheme=\"teal\" variant=\"outline\">\n    Call us\n  </Button>\n</Stack>\n`})}),`\n`,(0,e.jsxs)(n.p,{children:[`You can also use icons from popular libraries like\n`,(0,e.jsx)(n.a,{href:\"https://react-icons.github.io/react-icons/\",children:\"react-icons\"}),` and pass it into the\nbutton.`]}),`\n`,(0,e.jsx)(n.pre,{children:(0,e.jsx)(n.code,{className:\"language-jsx\",children:`// import { MdBuild , MdCall } from \"react-icons/md\"\n\n<Stack direction=\"row\" spacing={4}>\n  <Button leftIcon={<MdBuild />} colorScheme=\"pink\" variant=\"solid\">\n    Settings\n  </Button>\n  <Button rightIcon={<MdCall />} colorScheme=\"blue\" variant=\"outline\">\n    Call us\n  </Button>\n</Stack>\n`})}),`\n`,(0,e.jsx)(n.h3,{id:\"button-loading-state\",children:\"Button loading state\"}),`\n`,(0,e.jsxs)(n.p,{children:[\"Pass the \",(0,e.jsx)(n.code,{children:\"isLoading\"}),` prop to show its loading state. By default, the button will\nshow a spinner and leave the button's width unchanged.`]}),`\n`,(0,e.jsxs)(n.p,{children:[\"You can also pass the \",(0,e.jsx)(n.code,{children:\"loadingText\"}),\" prop to show a spinner and the loading text.\"]}),`\n`,(0,e.jsx)(n.pre,{children:(0,e.jsx)(n.code,{className:\"language-jsx\",children:`<Stack direction=\"row\" spacing={4}>\n  <Button isLoading colorScheme=\"teal\" variant=\"solid\">\n    Email\n  </Button>\n  <Button isLoading loadingText=\"Submitting\" colorScheme=\"teal\" variant=\"outline\">\n    Submit\n  </Button>\n</Stack>\n`})}),`\n`,(0,e.jsxs)(n.p,{children:[`You can change the spinner element to use custom loaders as per your design\nrequirements. Pass the `,(0,e.jsx)(n.code,{children:\"spinner\"}),\" prop and set it to a custom react element.\"]}),`\n`,(0,e.jsx)(n.pre,{children:(0,e.jsx)(n.code,{className:\"language-jsx\",children:`<Button isLoading colorScheme=\"blue\" spinner={<BeatLoader size={8} color=\"white\" />}>\n  Click me\n</Button>\n`})}),`\n`,(0,e.jsxs)(n.p,{children:[\"When a \",(0,e.jsx)(n.code,{children:\"loadingText\"}),` is present, you can change the placement of the spinner\nelement to either `,(0,e.jsx)(n.code,{children:\"start\"}),\" or \",(0,e.jsx)(n.code,{children:\"end\"}),\". It is \",(0,e.jsx)(n.code,{children:\"start\"}),\" by default.\"]}),`\n`,(0,e.jsx)(n.pre,{children:(0,e.jsx)(n.code,{className:\"language-jsx\",children:`<Stack direction=\"row\" spacing={4} align=\"center\">\n  <Button isLoading loadingText=\"Loading\" colorScheme=\"teal\" variant=\"outline\" spinnerPlacement=\"start\">\n    Submit\n  </Button>\n  <Button isLoading loadingText=\"Loading\" colorScheme=\"teal\" variant=\"outline\" spinnerPlacement=\"end\">\n    Continue\n  </Button>\n</Stack>\n`})}),`\n`,(0,e.jsx)(n.h3,{id:\"social-buttons\",children:\"Social Buttons\"}),`\n`,(0,e.jsxs)(n.p,{children:[`We've included the colors for common social media platforms, and you can simply\nuse their buttons via the `,(0,e.jsx)(n.code,{children:\"colorScheme\"}),\" prop.\"]}),`\n`,(0,e.jsx)(n.pre,{children:(0,e.jsx)(n.code,{className:\"language-jsx\",children:`<HStack>\n  <Button colorScheme=\"facebook\" leftIcon={<FaFacebook />}>\n    Facebook\n  </Button>\n  <Button colorScheme=\"twitter\" leftIcon={<FaTwitter />}>\n    Twitter\n  </Button>\n</HStack>\n`})}),`\n`,(0,e.jsxs)(n.p,{children:[`The Facebook and Twitter icons in the above example are available from\n`,(0,e.jsx)(n.a,{href:\"https://react-icons.netlify.com/#/\",children:(0,e.jsx)(n.code,{children:\"react-icons\"})}),\" as \",(0,e.jsx)(n.code,{children:\"FaFacebook\"}),` and\n`,(0,e.jsx)(n.code,{children:\"FaTwitter\"}),\", found in the \",(0,e.jsx)(n.code,{children:\"react-icons/fa\"}),\" import.\"]}),`\n`,(0,e.jsx)(n.h3,{id:\"grouping-buttons\",children:\"Grouping Buttons\"}),`\n`,(0,e.jsxs)(n.p,{children:[\"You can use the \",(0,e.jsx)(n.code,{children:\"Stack\"}),\" or \",(0,e.jsx)(n.code,{children:\"ButtonGroup\"}),` component to group buttons. When you\nuse the `,(0,e.jsx)(n.code,{children:\"ButtonGroup\"}),\" component, it allows you to:\"]}),`\n`,(0,e.jsxs)(n.ul,{children:[`\n`,(0,e.jsxs)(n.li,{children:[\"Set the \",(0,e.jsx)(n.code,{children:\"size\"}),\" and \",(0,e.jsx)(n.code,{children:\"variant\"}),\" of all buttons within it.\"]}),`\n`,(0,e.jsxs)(n.li,{children:[\"Add \",(0,e.jsx)(n.code,{children:\"spacing\"}),\" between the buttons.\"]}),`\n`,(0,e.jsx)(n.li,{children:`Flush the buttons together by removing the border radius of their children as\nneeded.`}),`\n`]}),`\n`,(0,e.jsx)(n.pre,{children:(0,e.jsx)(n.code,{className:\"language-jsx\",children:`<ButtonGroup variant=\"outline\" spacing=\"6\">\n  <Button colorScheme=\"blue\">Save</Button>\n  <Button>Cancel</Button>\n</ButtonGroup>\n`})}),`\n`,(0,e.jsxs)(n.p,{children:[\"To flush the buttons, pass the \",(0,e.jsx)(n.code,{children:\"isAttached\"}),\" prop.\"]}),`\n`,(0,e.jsx)(n.pre,{children:(0,e.jsx)(n.code,{className:\"language-jsx\",children:`<ButtonGroup size=\"sm\" isAttached variant=\"outline\">\n  <Button>Save</Button>\n  <IconButton aria-label=\"Add to friends\" icon={<AddIcon />} />\n</ButtonGroup>\n`})}),`\n`,(0,e.jsx)(n.h2,{id:\"accessibility\",children:\"Accessibility\"}),`\n`,(0,e.jsxs)(n.ul,{children:[`\n`,(0,e.jsxs)(n.li,{children:[\"Button has \",(0,e.jsx)(n.code,{children:\"role\"}),\" of \",(0,e.jsx)(n.code,{children:\"button\"}),\".\"]}),`\n`,(0,e.jsxs)(n.li,{children:[\"When Button has focus, \",(0,e.jsx)(\"kbd\",{children:\"Space\"}),\" or \",(0,e.jsx)(\"kbd\",{children:\"Enter\"}),\" activates it.\"]}),`\n`]}),`\n`,(0,e.jsx)(n.h2,{id:\"composition\",children:\"Composition\"}),`\n`,(0,e.jsxs)(n.p,{children:[\"All props you pass (\",(0,e.jsx)(n.code,{children:\"variant\"}),\", \",(0,e.jsx)(n.code,{children:\"colorScheme\"}),`, etc.) are converted to style\nprops. This means you can override any style of the Button via props.`]}),`\n`,(0,e.jsx)(n.pre,{children:(0,e.jsx)(n.code,{className:\"language-jsx\",children:`// The size prop affects the height of the button\n// It can still be overridden by passing a custom height\n<Button size=\"md\" height=\"48px\" width=\"200px\" border=\"2px\" borderColor=\"green.500\">\n  Button\n</Button>\n`})}),`\n`,(0,e.jsx)(n.hr,{}),`\n`,(0,e.jsx)(n.h2,{id:\"custom-button\",children:\"Custom Button\"}),`\n`,(0,e.jsxs)(n.p,{children:[`In the event that you need to make your own custom button, you can leverage the\n`,(0,e.jsx)(n.code,{children:\"Box\"}),\" component. It provides the \",(0,e.jsx)(n.code,{children:\"hover\"}),\", \",(0,e.jsx)(n.code,{children:\"focus\"}),\", \",(0,e.jsx)(n.code,{children:\"active\"}),\" and \",(0,e.jsx)(n.code,{children:\"disabled\"}),` style\nprops to style the button.`]}),`\n`,(0,e.jsx)(n.pre,{children:(0,e.jsx)(n.code,{className:\"language-jsx\",children:`// Button from facebook.com\n<Box\n  as=\"button\"\n  height=\"24px\"\n  lineHeight=\"1.2\"\n  transition=\"all 0.2s cubic-bezier(.08,.52,.52,1)\"\n  border=\"1px\"\n  px=\"8px\"\n  borderRadius=\"2px\"\n  fontSize=\"14px\"\n  fontWeight=\"semibold\"\n  bg=\"#f5f6f7\"\n  borderColor=\"#ccd0d5\"\n  color=\"#4b4f56\"\n  _hover={{ bg: '#ebedf0' }}\n  _active={{\n    bg: '#dddfe2',\n    transform: 'scale(0.98)',\n    borderColor: '#bec3c9',\n  }}\n  _focus={{\n    boxShadow: '0 0 1px 2px rgba(88, 144, 255, .75), 0 1px 1px rgba(0, 0, 0, .15)',\n  }}\n>\n  Join Group\n</Box>\n`})})]})}function I(t={}){let{wrapper:n}=t.components||{};return n?(0,e.jsx)(n,Object.assign({},t,{children:(0,e.jsx)(h,t)})):h(t)}var v=I;return f(k);})();\n;return Component;"
  },
  "_id": "docs/components/button/usage.mdx",
  "_raw": {
    "sourceFilePath": "docs/components/button/usage.mdx",
    "sourceFileName": "usage.mdx",
    "sourceFileDir": "docs/components/button",
    "contentType": "mdx",
    "flattenedPath": "docs/components/button/usage"
  },
  "type": "Doc",
  "slug": "/docs/components/button/usage",
  "frontMatter": {
    "title": "Button",
    "package": "@incmix-ui/button",
    "description": "Button component is used to trigger an action or event, such as submitting a form, opening a Dialog, canceling an action, or performing a delete operation.",
    "slug": "/docs/components/button/usage",
    "editUrl": "https://github.com/incmix-ui/incmix-ui-docs/tree/main/content/docs/components/button/usage.mdx",
    "headings": [
      {
        "text": "Import",
        "id": "import",
        "level": "h2"
      },
      {
        "text": "Usage",
        "id": "usage",
        "level": "h2"
      },
      {
        "text": "Button Sizes",
        "id": "button-sizes",
        "level": "h3"
      },
      {
        "text": "Button variants",
        "id": "button-variants",
        "level": "h3"
      },
      {
        "text": "Button Colors",
        "id": "button-colors",
        "level": "h3"
      },
      {
        "text": "Button with icon",
        "id": "button-with-icon",
        "level": "h3"
      },
      {
        "text": "Button loading state",
        "id": "button-loading-state",
        "level": "h3"
      },
      {
        "text": "Social Buttons",
        "id": "social-buttons",
        "level": "h3"
      },
      {
        "text": "Grouping Buttons",
        "id": "grouping-buttons",
        "level": "h3"
      },
      {
        "text": "Accessibility",
        "id": "accessibility",
        "level": "h2"
      },
      {
        "text": "Composition",
        "id": "composition",
        "level": "h2"
      },
      {
        "text": "Custom Button",
        "id": "custom-button",
        "level": "h2"
      }
    ]
  }
}
