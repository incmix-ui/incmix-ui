{
  "title": "useCheckboxGroup",
  "package": "@incmix-ui/checkbox",
  "description": "React hooks to manage checkbox groups.",
  "scope": "usage",
  "body": {
    "raw": "\n`useCheckboxGroup` is a custom hook that provides all the state management logic\nfor a group of checkboxes.\n\n## Import\n\n```js\nimport { useCheckboxGroup } from '@incmix-ui/react'\n```\n\n## Return value\n\nThe `useCheckboxGroup` hook returns following props\n\n| Name               | Type                                | Description                                                                                                             |\n| ------------------ | ----------------------------------- | ----------------------------------------------------------------------------------------------------------------------- |\n| `value`            | `StringOrNumber[]`                  | The value of checkbox group.                                                                                            |\n| `isDisabled`       | `boolean`                           | A function to set the boolean value to `false`.                                                                         |\n| `onChange`         | `(input: EventOrValue) => void`     | The onChange handler for the checkbox group.                                                                            |\n| `setValue`         | `(state: StringOrNumber[]) => void` | A function to set the value of the checkbox group.                                                                      |\n| `getCheckboxProps` | `(props?: Dict) => Dict`            | A function that takes checkbox props returns them with a onChange handler for the checkbox group and the checked state. |\n\n## Usage\n\n```jsx\nfunction Example() {\n  function CustomCheckbox(props) {\n    const { state, getCheckboxProps, getInputProps, getLabelProps, htmlProps } = useCheckbox(props)\n\n    return (\n      <incmix.label\n        display=\"flex\"\n        flexDirection=\"row\"\n        alignItems=\"center\"\n        gridColumnGap={2}\n        maxW=\"40\"\n        bg=\"green.50\"\n        border=\"1px solid\"\n        borderColor=\"green.500\"\n        rounded=\"lg\"\n        px={3}\n        py={1}\n        cursor=\"pointer\"\n        {...htmlProps}\n      >\n        <input {...getInputProps()} hidden />\n        <Flex\n          alignItems=\"center\"\n          justifyContent=\"center\"\n          border=\"2px solid\"\n          borderColor=\"green.500\"\n          w={4}\n          h={4}\n          {...getCheckboxProps()}\n        >\n          {state.isChecked && <Box w={2} h={2} bg=\"green.500\" />}\n        </Flex>\n        <Text color=\"gray.700\" {...getLabelProps()}>\n          Click me for {props.value}\n        </Text>\n      </incmix.label>\n    )\n  }\n\n  const { value, getCheckboxProps } = useCheckboxGroup({\n    defaultValue: ['2'],\n  })\n\n  return (\n    <Stack>\n      <Text>The selected checkboxes are: {value.sort().join(' and ')}</Text>\n      <CustomCheckbox {...getCheckboxProps({ value: '1' })} />\n      <CustomCheckbox {...getCheckboxProps({ value: '2' })} />\n      <CustomCheckbox {...getCheckboxProps({ value: '3' })} />\n    </Stack>\n  )\n}\n```\n\n## Parameters\n\nThe `useCheckboxGroup` hook accepts an object with the following properties:\n\n<PropsTable of=\"useCheckboxGroup\" />\n",
    "code": "var Component=(()=>{var a=Object.create;var c=Object.defineProperty;var p=Object.getOwnPropertyDescriptor;var u=Object.getOwnPropertyNames;var x=Object.getPrototypeOf,b=Object.prototype.hasOwnProperty;var g=(r,e)=>()=>(e||r((e={exports:{}}).exports,e),e.exports),m=(r,e)=>{for(var o in e)c(r,o,{get:e[o],enumerable:!0})},i=(r,e,o,d)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let t of u(e))!b.call(r,t)&&t!==o&&c(r,t,{get:()=>e[t],enumerable:!(d=p(e,t))||d.enumerable});return r};var k=(r,e,o)=>(o=r!=null?a(x(r)):{},i(e||!r||!r.__esModule?c(o,\"default\",{value:r,enumerable:!0}):o,r)),C=r=>i(c({},\"__esModule\",{value:!0}),r);var l=g((_,h)=>{h.exports=_jsx_runtime});var y={};m(y,{default:()=>P,frontmatter:()=>f});var n=k(l()),f={title:\"useCheckboxGroup\",package:\"@incmix-ui/checkbox\",description:\"React hooks to manage checkbox groups.\"};function s(r){let e=Object.assign({p:\"p\",code:\"code\",h2:\"h2\",pre:\"pre\",table:\"table\",thead:\"thead\",tr:\"tr\",th:\"th\",tbody:\"tbody\",td:\"td\"},r.components),{PropsTable:o}=e;return o||j(\"PropsTable\",!0,\"89:1-89:37\"),(0,n.jsxs)(n.Fragment,{children:[(0,n.jsxs)(e.p,{children:[(0,n.jsx)(e.code,{children:\"useCheckboxGroup\"}),` is a custom hook that provides all the state management logic\nfor a group of checkboxes.`]}),`\n`,(0,n.jsx)(e.h2,{id:\"import\",children:\"Import\"}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-js\",children:`import { useCheckboxGroup } from '@incmix-ui/react'\n`})}),`\n`,(0,n.jsx)(e.h2,{id:\"return-value\",children:\"Return value\"}),`\n`,(0,n.jsxs)(e.p,{children:[\"The \",(0,n.jsx)(e.code,{children:\"useCheckboxGroup\"}),\" hook returns following props\"]}),`\n`,(0,n.jsxs)(e.table,{children:[(0,n.jsx)(e.thead,{children:(0,n.jsxs)(e.tr,{children:[(0,n.jsx)(e.th,{children:\"Name\"}),(0,n.jsx)(e.th,{children:\"Type\"}),(0,n.jsx)(e.th,{children:\"Description\"})]})}),(0,n.jsxs)(e.tbody,{children:[(0,n.jsxs)(e.tr,{children:[(0,n.jsx)(e.td,{children:(0,n.jsx)(e.code,{children:\"value\"})}),(0,n.jsx)(e.td,{children:(0,n.jsx)(e.code,{children:\"StringOrNumber[]\"})}),(0,n.jsx)(e.td,{children:\"The value of checkbox group.\"})]}),(0,n.jsxs)(e.tr,{children:[(0,n.jsx)(e.td,{children:(0,n.jsx)(e.code,{children:\"isDisabled\"})}),(0,n.jsx)(e.td,{children:(0,n.jsx)(e.code,{children:\"boolean\"})}),(0,n.jsxs)(e.td,{children:[\"A function to set the boolean value to \",(0,n.jsx)(e.code,{children:\"false\"}),\".\"]})]}),(0,n.jsxs)(e.tr,{children:[(0,n.jsx)(e.td,{children:(0,n.jsx)(e.code,{children:\"onChange\"})}),(0,n.jsx)(e.td,{children:(0,n.jsx)(e.code,{children:\"(input: EventOrValue) => void\"})}),(0,n.jsx)(e.td,{children:\"The onChange handler for the checkbox group.\"})]}),(0,n.jsxs)(e.tr,{children:[(0,n.jsx)(e.td,{children:(0,n.jsx)(e.code,{children:\"setValue\"})}),(0,n.jsx)(e.td,{children:(0,n.jsx)(e.code,{children:\"(state: StringOrNumber[]) => void\"})}),(0,n.jsx)(e.td,{children:\"A function to set the value of the checkbox group.\"})]}),(0,n.jsxs)(e.tr,{children:[(0,n.jsx)(e.td,{children:(0,n.jsx)(e.code,{children:\"getCheckboxProps\"})}),(0,n.jsx)(e.td,{children:(0,n.jsx)(e.code,{children:\"(props?: Dict) => Dict\"})}),(0,n.jsx)(e.td,{children:\"A function that takes checkbox props returns them with a onChange handler for the checkbox group and the checked state.\"})]})]})]}),`\n`,(0,n.jsx)(e.h2,{id:\"usage\",children:\"Usage\"}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-jsx\",children:`function Example() {\n  function CustomCheckbox(props) {\n    const { state, getCheckboxProps, getInputProps, getLabelProps, htmlProps } = useCheckbox(props)\n\n    return (\n      <incmix.label\n        display=\"flex\"\n        flexDirection=\"row\"\n        alignItems=\"center\"\n        gridColumnGap={2}\n        maxW=\"40\"\n        bg=\"green.50\"\n        border=\"1px solid\"\n        borderColor=\"green.500\"\n        rounded=\"lg\"\n        px={3}\n        py={1}\n        cursor=\"pointer\"\n        {...htmlProps}\n      >\n        <input {...getInputProps()} hidden />\n        <Flex\n          alignItems=\"center\"\n          justifyContent=\"center\"\n          border=\"2px solid\"\n          borderColor=\"green.500\"\n          w={4}\n          h={4}\n          {...getCheckboxProps()}\n        >\n          {state.isChecked && <Box w={2} h={2} bg=\"green.500\" />}\n        </Flex>\n        <Text color=\"gray.700\" {...getLabelProps()}>\n          Click me for {props.value}\n        </Text>\n      </incmix.label>\n    )\n  }\n\n  const { value, getCheckboxProps } = useCheckboxGroup({\n    defaultValue: ['2'],\n  })\n\n  return (\n    <Stack>\n      <Text>The selected checkboxes are: {value.sort().join(' and ')}</Text>\n      <CustomCheckbox {...getCheckboxProps({ value: '1' })} />\n      <CustomCheckbox {...getCheckboxProps({ value: '2' })} />\n      <CustomCheckbox {...getCheckboxProps({ value: '3' })} />\n    </Stack>\n  )\n}\n`})}),`\n`,(0,n.jsx)(e.h2,{id:\"parameters\",children:\"Parameters\"}),`\n`,(0,n.jsxs)(e.p,{children:[\"The \",(0,n.jsx)(e.code,{children:\"useCheckboxGroup\"}),\" hook accepts an object with the following properties:\"]}),`\n`,(0,n.jsx)(o,{of:\"useCheckboxGroup\"})]})}function v(r={}){let{wrapper:e}=r.components||{};return e?(0,n.jsx)(e,Object.assign({},r,{children:(0,n.jsx)(s,r)})):s(r)}var P=v;function j(r,e,o){throw new Error(\"Expected \"+(e?\"component\":\"object\")+\" `\"+r+\"` to be defined: you likely forgot to import, pass, or provide it.\"+(o?\"\\nIt\\u2019s referenced in your code at `\"+o+\"` in `/Users/uma.krishnan/projects/incmixlabs/incmix-ui/apps/docs/content/_mdx_bundler_entry_point-44c1858c-6ae5-40de-a9ee-97afb2647ba8.mdx`\":\"\"))}return C(y);})();\n;return Component;"
  },
  "_id": "docs/hooks/use-checkbox-group.mdx",
  "_raw": {
    "sourceFilePath": "docs/hooks/use-checkbox-group.mdx",
    "sourceFileName": "use-checkbox-group.mdx",
    "sourceFileDir": "docs/hooks",
    "contentType": "mdx",
    "flattenedPath": "docs/hooks/use-checkbox-group"
  },
  "type": "Doc",
  "slug": "/docs/hooks/use-checkbox-group",
  "frontMatter": {
    "title": "useCheckboxGroup",
    "package": "@incmix-ui/checkbox",
    "description": "React hooks to manage checkbox groups.",
    "slug": "/docs/hooks/use-checkbox-group",
    "editUrl": "https://github.com/incmix-ui/incmix-ui-docs/tree/main/content/docs/hooks/use-checkbox-group.mdx",
    "headings": [
      {
        "text": "Import",
        "id": "import",
        "level": "h2"
      },
      {
        "text": "Return value",
        "id": "return-value",
        "level": "h2"
      },
      {
        "text": "Usage",
        "id": "usage",
        "level": "h2"
      },
      {
        "text": "Parameters",
        "id": "parameters",
        "level": "h2"
      }
    ]
  }
}
