{
  "title": "Component Style",
  "description": "How to create and theme custom components.",
  "scope": "usage",
  "category": "theming",
  "body": {
    "raw": "\nWriting component styles in a way that is easy to maintain over the life of a\ngrowing and changing project is a challenging task.\n\nTo solve this, we came up with the idea of style configuration or `styleConfig`.\nThis is a consistent theming API that makes component styling easy to understand\nand maintain.\n\n## Base styles and Modifier styles\n\nMost component style consists of **base or default styles** and **modifier\nstyles** that alter its size or visual style based on some properties or state.\n\nCommon modifier styles includes:\n\n- **Size:** A component can have different sizes (e.g. small, medium, large)\n- **Variant:** A component can have different visual styles (e.g. outline,\n  solid, ghost)\n- **Color scheme:** For a given variant, a component can have different color\n  schemes (e.g. an outline button with a red color scheme)\n- **Color mode:** A component can change its visual styles based on color mode\n  (e.g. light or dark).\n\n### Single part and multipart components\n\nMost components we build today are either single part components (e.g. Button,\nBadge) or multipart components (e.g. Tabs, Menu, Modal).\n\n**A single part component** is a component that returns a single element. For\nexample, the `<Button>` component renders a `<button>` HTML element:\n\n```jsx live=false\n// This component renders only one element (<button>)\n<Button>My button</Button>\n```\n\n**A multipart component** is a component that has multiple parts, and require\nthese parts to work correctly. This is commonly referred to as a composite\ncomponent.\n\nFor example, a `Tabs` component consists of `TabList`, `Tab`, `TabPanels`, and\n`TabPanel`. Styling this component as a whole might require styling each\ncomponent part.\n\n```jsx live=false\n<Tabs>\n  <TabList>\n    <Tab>Tab 1</Tab>\n    <Tab>Tab 2</Tab>\n  </TabList>\n  <TabPanels>\n    <TabPanel>Tab 1</TabPanel>\n    <TabPanel>Tab 2</TabPanel>\n  </TabPanels>\n</Tabs>\n```\n\n## Styling single part components\n\nThe basic API for styling a single part component is:\n\n```jsx live=false\nimport { defineStyleConfig } from '@incmix-ui/react'\n\nexport default defineStyleConfig({\n  // Styles for the base style\n  baseStyle: {},\n  // Styles for the size variations\n  sizes: {},\n  // Styles for the visual style variations\n  variants: {},\n  // The default `size` or `variant` values\n  defaultProps: {},\n})\n```\n\n> The `defineStyleConfig` function provide us with better type safety out of the\n> box.\n\nLet's say we want to create a custom button component following the design spec\nbelow.\n\n<Img mt=\"10\" mb=\"12\" src=\"/button-spec.png\" />\n\nHere's a contrived implementation of the design:\n\n```tsx live=false\nimport { defineStyleConfig } from '@incmix-ui/react'\n\nconst Button = defineStyleConfig({\n  // The styles all button have in common\n  baseStyle: {\n    fontWeight: 'bold',\n    textTransform: 'uppercase',\n    borderRadius: 'base', // <-- border radius is same for all variants and sizes\n  },\n  // Two sizes: sm and md\n  sizes: {\n    sm: {\n      fontSize: 'sm',\n      px: 4, // <-- px is short for paddingLeft and paddingRight\n      py: 3, // <-- py is short for paddingTop and paddingBottom\n    },\n    md: {\n      fontSize: 'md',\n      px: 6, // <-- these values are tokens from the design system\n      py: 4, // <-- these values are tokens from the design system\n    },\n  },\n  // Two variants: outline and solid\n  variants: {\n    outline: {\n      border: '2px solid',\n      borderColor: 'purple.500',\n      color: 'purple.500',\n    },\n    solid: {\n      bg: 'purple.500',\n      color: 'white',\n    },\n  },\n  // The default size and variant values\n  defaultProps: {\n    size: 'md',\n    variant: 'outline',\n  },\n})\n```\n\nMakes sense right? Now, let's update the theme to include this new component\nstyle.\n\n```jsx live=false\nimport { extendTheme } from '@incmix-ui/react'\n\nconst theme = extendTheme({\n  components: {\n    Button,\n  },\n})\n```\n\n**And that's it!** You can use your new Button along with its custom variants\nthroughout your app. But what if we want to create a custom component that's not\npart of Incmix UI? Let's use the following design spec for a Card component:\n\n<Img mt=\"10\" mb=\"12\" src=\"/card-spec.png\" />\n\nHere's a contrived implementation of the design:\n\n```jsx live=false\nconst Card = defineStyleConfig({\n  // The styles all Cards have in common\n  baseStyle: {\n    display: 'flex',\n    flexDirection: 'column',\n    background: 'white',\n    alignItems: 'center',\n    gap: 6,\n  },\n  // Two variants: rounded and smooth\n  variants: {\n    rounded: {\n      padding: 8,\n      borderRadius: 'xl',\n      boxShadow: 'xl',\n    },\n    smooth: {\n      padding: 6,\n      borderRadius: 'base',\n      boxShadow: 'md',\n    },\n  },\n  // The default variant value\n  defaultProps: {\n    variant: 'smooth',\n  },\n})\n```\n\nAs with the Button component, we'll update the theme to include the new Card\ncomponent style.\n\n```jsx live=false\nimport { extendTheme } from '@incmix-ui/react'\n\nconst theme = extendTheme({\n  components: {\n    Card,\n  },\n})\n```\n\nBut in this case we'd have to **consume** these styles because the `Card`\ncomponent is not a built-in component in Incmix UI.\n\n### Consuming style config\n\nSince the new Card component is **not** part of Incmix UI we need to create a\nnew React component and consume the style we just created. We can do that using\n`useStyleConfig` hook.\n\n### useStyleConfig API\n\n```jsx live=false\nconst styles = useStyleConfig(themeKey, props)\n```\n\n#### Parameters\n\n- `themeKey`: the key in `theme.components` that points to the desired\n  styleConfig.\n- `props`: the options object used to compute the component styles. It typically\n  consists of the `size`, `variant`, and `colorScheme`\n\n#### Return Value\n\nThe computed styles for the component based on `props` passed. If no `props` is\npassed, the `defaultProps` defined in the style config will be used.\n\n```jsx live=false\nimport { Box, useStyleConfig } from '@incmix-ui/react'\n\nfunction Card(props) {\n  const { variant, ...rest } = props\n\n  const styles = useStyleConfig('Card', { variant })\n\n  // Pass the computed styles into the `__css` prop\n  return <Box __css={styles} {...rest} />\n}\n```\n\n> Please note that we are passing the styles to the prop `__css`. It has the\n> same API as [the `sx` prop](/docs/styled-system/the-sx-prop), but has a lower\n> style priority. This means you can override the style properties with incmix\n> style props.\n\nAnd lastly - the fun part - let's use our custom Card component anywhere in our\napp:\n\n```jsx live=false\n// 1. Using the default props defined in style config\nfunction Usage() {\n  return (\n    <Card>\n      <Image src=\"https://incmix-ui.com/eric.jpg\" rounded=\"full\" w={32} h={32} boxShadow=\"md\" />\n      <Heading mt={6} maxW={60} size=\"lg\" textAlign=\"center\" color=\"gray.700\">\n        Welcome back, Eric\n      </Heading>\n      <Text mt={6} mb={6} size=\"sm\" color=\"blackAlpha.500\">\n        Use your fingerprint to continue.\n      </Text>\n      <Image src=\"/fingerprint.png\" w={32} h={32} />\n    </Card>\n  )\n}\n\n// 2. Overriding the default\nfunction Usage() {\n  return (\n    <Card variant=\"smooth\">\n      <Image src=\"https://incmix-ui.com/eric.jpg\" rounded=\"full\" w={32} h={32} boxShadow=\"md\" />\n      <Heading mt={6} maxW={60} size=\"lg\" textAlign=\"center\" color=\"gray.700\">\n        Welcome back, Eric\n      </Heading>\n      <Text mt={6} mb={6} size=\"sm\" color=\"blackAlpha.500\">\n        Use your fingerprint to continue.\n      </Text>\n      <Image src=\"/fingerprint.png\" w={32} h={32} />\n    </Card>\n  )\n}\n```\n\n## Styling multipart components\n\nThis is very similar to styling single part components with a few differences\nyou need to be aware of.\n\n- Given that multipart refers to a component with multiple parts, you'll need to\n  define the parts, and pass them into the `createMultiStyleConfigHelpers`\n  function\n- You'll need to provide styles for each `part`, `baseStyle`, `sizes`, and\n  `variants`.\n\n> **Pro tip ðŸ’¡**: If you're looking for a list of parts of a multipart component\n> you can check it by clicking on the **\"View theme source\"** button at the top\n> of the documentation page for that certain component. Check out\n> [this](https://incmix-ui.com/docs/components/overlay/modal) example.\n\nHere's what the style config for multipart components looks like:\n\n```jsx live=false\nexport default {\n  // The parts of the component\n  parts: [],\n  // The base styles for each part\n  baseStyle: {},\n  // The size styles for each part\n  sizes: {},\n  // The variant styles for each part\n  variants: {},\n  // The default `size` or `variant` values\n  defaultProps: {},\n}\n```\n\nFor example, here's what the style configurations for a custom menu component\nlooks like:\n\n```tsx live=false\nimport { createMultiStyleConfigHelpers } from '@incmix-ui/styled-system'\n\n// This function creates a set of function that helps us create multipart component styles.\nconst helpers = createMultiStyleConfigHelpers(['menu', 'item'])\n\nconst Menu = helpers.defineMultiStyleConfig({\n  baseStyle: {\n    menu: {\n      boxShadow: 'lg',\n      rounded: 'lg',\n      flexDirection: 'column',\n      py: '2',\n    },\n    item: {\n      fontWeight: 'medium',\n      lineHeight: 'normal',\n      color: 'gray.600',\n    },\n  },\n  sizes: {\n    sm: {\n      item: {\n        fontSize: '0.75rem',\n        px: 2,\n        py: 1,\n      },\n    },\n    md: {\n      item: {\n        fontSize: '0.875rem',\n        px: 3,\n        py: 2,\n      },\n    },\n  },\n  variants: {\n    bold: {\n      item: {\n        fontWeight: 'bold',\n      },\n      menu: {\n        boxShadow: 'xl',\n      },\n    },\n    colorful: {\n      item: {\n        color: 'orange.600',\n      },\n      menu: {\n        bg: 'orange.100',\n      },\n    },\n  },\n  defaultProps: {\n    size: 'md',\n  },\n})\n```\n\nNext, we'll update the theme object to include this new component style.\n\n```jsx live=false\nimport { extendTheme } from '@incmix-ui/react'\n\nconst theme = extendTheme({\n  components: {\n    Menu,\n  },\n})\n```\n\n### Consuming multipart style config\n\nNow that the style config is hooked into the theme, we can consume within any\ncomponent using `useMultiStyleConfig` hook.\n\nWe can also mount the computed styles on a specialized context provider called\n`StylesProvider`. These styles will now be available to other sub-components. To\nread from the context, use the `useStyles` hook.\n\n### useMultiStyleConfig API\n\n```jsx live=false\nconst styles = useMultiStyleConfig(themeKey, props)\n```\n\n#### Parameters\n\n- `themeKey`: the key in `theme.components` that points to the desired\n  styleConfig.\n- `props`: an option of the options for computing the final styles. It typically\n  consists of the `size`, `variant`, and `colorScheme`.\n\n#### Return Values\n\nThe computed styles for each component part based on `size`, or `variant`. If\nnone of these were passed, the `defaultProps` defined in the styleConfig will be\nused.\n\n```jsx live=false\n// 1. Import the components and hook\nimport { StylesProvider, useMultiStyleConfig, useStyles } from '@incmix-ui/react'\n\nfunction Menu(props) {\n  const { size, variant, children, ...rest } = props\n\n  // 2. Consume the `useMultiStyleConfig` hook\n  const styles = useMultiStyleConfig('Menu', { size, variant })\n\n  return (\n    <Flex __css={styles.menu} {...rest}>\n      {/* 3. Mount the computed styles on `StylesProvider` */}\n      <StylesProvider value={styles}>{children}</StylesProvider>\n    </Flex>\n  )\n}\n\nfunction MenuItem(props) {\n  // 4. Read computed `item` styles from styles provider\n  const styles = useStyles()\n  return <Box as=\"button\" __css={styles.item} {...props} />\n}\n```\n\nThat's it! We can use our newly created multipart component in our application:\n\n```jsx live=false\n// 1. Using the default props defined in style config\nfunction Usage() {\n  return (\n    <Menu>\n      <MenuItem>Awesome</MenuItem>\n      <MenuItem>Sauce</MenuItem>\n    </Menu>\n  )\n}\n\n// 2. Overriding the default\nfunction Usage() {\n  return (\n    <Menu size=\"sm\">\n      <MenuItem>Awesome</MenuItem>\n      <MenuItem>Sauce</MenuItem>\n    </Menu>\n  )\n}\n```\n",
    "code": "var Component=(()=>{var h=Object.create;var s=Object.defineProperty;var p=Object.getOwnPropertyDescriptor;var m=Object.getOwnPropertyNames;var u=Object.getPrototypeOf,g=Object.prototype.hasOwnProperty;var f=(t,e)=>()=>(e||t((e={exports:{}}).exports,e),e.exports),y=(t,e)=>{for(var o in e)s(t,o,{get:e[o],enumerable:!0})},l=(t,e,o,r)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let i of m(e))!g.call(t,i)&&i!==o&&s(t,i,{get:()=>e[i],enumerable:!(r=p(e,i))||r.enumerable});return t};var b=(t,e,o)=>(o=t!=null?h(u(t)):{},l(e||!t||!t.__esModule?s(o,\"default\",{value:t,enumerable:!0}):o,t)),x=t=>l(s({},\"__esModule\",{value:!0}),t);var c=f((k,a)=>{a.exports=_jsx_runtime});var C={};y(C,{default:()=>T,frontmatter:()=>v});var n=b(c()),v={title:\"Component Style\",description:\"How to create and theme custom components.\",category:\"theming\"};function d(t){let e=Object.assign({p:\"p\",code:\"code\",h2:\"h2\",strong:\"strong\",ul:\"ul\",li:\"li\",h3:\"h3\",pre:\"pre\",blockquote:\"blockquote\",h4:\"h4\",a:\"a\"},t.components),{Img:o}=e;return o||S(\"Img\",!0),(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(e.p,{children:`Writing component styles in a way that is easy to maintain over the life of a\ngrowing and changing project is a challenging task.`}),`\n`,(0,n.jsxs)(e.p,{children:[\"To solve this, we came up with the idea of style configuration or \",(0,n.jsx)(e.code,{children:\"styleConfig\"}),`.\nThis is a consistent theming API that makes component styling easy to understand\nand maintain.`]}),`\n`,(0,n.jsx)(e.h2,{id:\"base-styles-and-modifier-styles\",children:\"Base styles and Modifier styles\"}),`\n`,(0,n.jsxs)(e.p,{children:[\"Most component style consists of \",(0,n.jsx)(e.strong,{children:\"base or default styles\"}),\" and \",(0,n.jsx)(e.strong,{children:`modifier\nstyles`}),\" that alter its size or visual style based on some properties or state.\"]}),`\n`,(0,n.jsx)(e.p,{children:\"Common modifier styles includes:\"}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"Size:\"}),\" A component can have different sizes (e.g. small, medium, large)\"]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"Variant:\"}),` A component can have different visual styles (e.g. outline,\nsolid, ghost)`]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"Color scheme:\"}),` For a given variant, a component can have different color\nschemes (e.g. an outline button with a red color scheme)`]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"Color mode:\"}),` A component can change its visual styles based on color mode\n(e.g. light or dark).`]}),`\n`]}),`\n`,(0,n.jsx)(e.h3,{id:\"single-part-and-multipart-components\",children:\"Single part and multipart components\"}),`\n`,(0,n.jsx)(e.p,{children:`Most components we build today are either single part components (e.g. Button,\nBadge) or multipart components (e.g. Tabs, Menu, Modal).`}),`\n`,(0,n.jsxs)(e.p,{children:[(0,n.jsx)(e.strong,{children:\"A single part component\"}),` is a component that returns a single element. For\nexample, the `,(0,n.jsx)(e.code,{children:\"<Button>\"}),\" component renders a \",(0,n.jsx)(e.code,{children:\"<button>\"}),\" HTML element:\"]}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-jsx\",live:\"false\",children:`// This component renders only one element (<button>)\n<Button>My button</Button>\n`})}),`\n`,(0,n.jsxs)(e.p,{children:[(0,n.jsx)(e.strong,{children:\"A multipart component\"}),` is a component that has multiple parts, and require\nthese parts to work correctly. This is commonly referred to as a composite\ncomponent.`]}),`\n`,(0,n.jsxs)(e.p,{children:[\"For example, a \",(0,n.jsx)(e.code,{children:\"Tabs\"}),\" component consists of \",(0,n.jsx)(e.code,{children:\"TabList\"}),\", \",(0,n.jsx)(e.code,{children:\"Tab\"}),\", \",(0,n.jsx)(e.code,{children:\"TabPanels\"}),`, and\n`,(0,n.jsx)(e.code,{children:\"TabPanel\"}),`. Styling this component as a whole might require styling each\ncomponent part.`]}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-jsx\",live:\"false\",children:`<Tabs>\n  <TabList>\n    <Tab>Tab 1</Tab>\n    <Tab>Tab 2</Tab>\n  </TabList>\n  <TabPanels>\n    <TabPanel>Tab 1</TabPanel>\n    <TabPanel>Tab 2</TabPanel>\n  </TabPanels>\n</Tabs>\n`})}),`\n`,(0,n.jsx)(e.h2,{id:\"styling-single-part-components\",children:\"Styling single part components\"}),`\n`,(0,n.jsx)(e.p,{children:\"The basic API for styling a single part component is:\"}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-jsx\",live:\"false\",children:`import { defineStyleConfig } from '@incmix-ui/react'\n\nexport default defineStyleConfig({\n  // Styles for the base style\n  baseStyle: {},\n  // Styles for the size variations\n  sizes: {},\n  // Styles for the visual style variations\n  variants: {},\n  // The default \\`size\\` or \\`variant\\` values\n  defaultProps: {},\n})\n`})}),`\n`,(0,n.jsxs)(e.blockquote,{children:[`\n`,(0,n.jsxs)(e.p,{children:[\"The \",(0,n.jsx)(e.code,{children:\"defineStyleConfig\"}),` function provide us with better type safety out of the\nbox.`]}),`\n`]}),`\n`,(0,n.jsx)(e.p,{children:`Let's say we want to create a custom button component following the design spec\nbelow.`}),`\n`,(0,n.jsx)(o,{mt:\"10\",mb:\"12\",src:\"/button-spec.png\"}),`\n`,(0,n.jsx)(e.p,{children:\"Here's a contrived implementation of the design:\"}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-tsx\",live:\"false\",children:`import { defineStyleConfig } from '@incmix-ui/react'\n\nconst Button = defineStyleConfig({\n  // The styles all button have in common\n  baseStyle: {\n    fontWeight: 'bold',\n    textTransform: 'uppercase',\n    borderRadius: 'base', // <-- border radius is same for all variants and sizes\n  },\n  // Two sizes: sm and md\n  sizes: {\n    sm: {\n      fontSize: 'sm',\n      px: 4, // <-- px is short for paddingLeft and paddingRight\n      py: 3, // <-- py is short for paddingTop and paddingBottom\n    },\n    md: {\n      fontSize: 'md',\n      px: 6, // <-- these values are tokens from the design system\n      py: 4, // <-- these values are tokens from the design system\n    },\n  },\n  // Two variants: outline and solid\n  variants: {\n    outline: {\n      border: '2px solid',\n      borderColor: 'purple.500',\n      color: 'purple.500',\n    },\n    solid: {\n      bg: 'purple.500',\n      color: 'white',\n    },\n  },\n  // The default size and variant values\n  defaultProps: {\n    size: 'md',\n    variant: 'outline',\n  },\n})\n`})}),`\n`,(0,n.jsx)(e.p,{children:`Makes sense right? Now, let's update the theme to include this new component\nstyle.`}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-jsx\",live:\"false\",children:`import { extendTheme } from '@incmix-ui/react'\n\nconst theme = extendTheme({\n  components: {\n    Button,\n  },\n})\n`})}),`\n`,(0,n.jsxs)(e.p,{children:[(0,n.jsx)(e.strong,{children:\"And that's it!\"}),` You can use your new Button along with its custom variants\nthroughout your app. But what if we want to create a custom component that's not\npart of Incmix UI? Let's use the following design spec for a Card component:`]}),`\n`,(0,n.jsx)(o,{mt:\"10\",mb:\"12\",src:\"/card-spec.png\"}),`\n`,(0,n.jsx)(e.p,{children:\"Here's a contrived implementation of the design:\"}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-jsx\",live:\"false\",children:`const Card = defineStyleConfig({\n  // The styles all Cards have in common\n  baseStyle: {\n    display: 'flex',\n    flexDirection: 'column',\n    background: 'white',\n    alignItems: 'center',\n    gap: 6,\n  },\n  // Two variants: rounded and smooth\n  variants: {\n    rounded: {\n      padding: 8,\n      borderRadius: 'xl',\n      boxShadow: 'xl',\n    },\n    smooth: {\n      padding: 6,\n      borderRadius: 'base',\n      boxShadow: 'md',\n    },\n  },\n  // The default variant value\n  defaultProps: {\n    variant: 'smooth',\n  },\n})\n`})}),`\n`,(0,n.jsx)(e.p,{children:`As with the Button component, we'll update the theme to include the new Card\ncomponent style.`}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-jsx\",live:\"false\",children:`import { extendTheme } from '@incmix-ui/react'\n\nconst theme = extendTheme({\n  components: {\n    Card,\n  },\n})\n`})}),`\n`,(0,n.jsxs)(e.p,{children:[\"But in this case we'd have to \",(0,n.jsx)(e.strong,{children:\"consume\"}),\" these styles because the \",(0,n.jsx)(e.code,{children:\"Card\"}),`\ncomponent is not a built-in component in Incmix UI.`]}),`\n`,(0,n.jsx)(e.h3,{id:\"consuming-style-config\",children:\"Consuming style config\"}),`\n`,(0,n.jsxs)(e.p,{children:[\"Since the new Card component is \",(0,n.jsx)(e.strong,{children:\"not\"}),` part of Incmix UI we need to create a\nnew React component and consume the style we just created. We can do that using\n`,(0,n.jsx)(e.code,{children:\"useStyleConfig\"}),\" hook.\"]}),`\n`,(0,n.jsx)(e.h3,{id:\"usestyleconfig-api\",children:\"useStyleConfig API\"}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-jsx\",live:\"false\",children:`const styles = useStyleConfig(themeKey, props)\n`})}),`\n`,(0,n.jsx)(e.h4,{id:\"parameters\",children:\"Parameters\"}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.code,{children:\"themeKey\"}),\": the key in \",(0,n.jsx)(e.code,{children:\"theme.components\"}),` that points to the desired\nstyleConfig.`]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.code,{children:\"props\"}),`: the options object used to compute the component styles. It typically\nconsists of the `,(0,n.jsx)(e.code,{children:\"size\"}),\", \",(0,n.jsx)(e.code,{children:\"variant\"}),\", and \",(0,n.jsx)(e.code,{children:\"colorScheme\"})]}),`\n`]}),`\n`,(0,n.jsx)(e.h4,{id:\"return-value\",children:\"Return Value\"}),`\n`,(0,n.jsxs)(e.p,{children:[\"The computed styles for the component based on \",(0,n.jsx)(e.code,{children:\"props\"}),\" passed. If no \",(0,n.jsx)(e.code,{children:\"props\"}),` is\npassed, the `,(0,n.jsx)(e.code,{children:\"defaultProps\"}),\" defined in the style config will be used.\"]}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-jsx\",live:\"false\",children:`import { Box, useStyleConfig } from '@incmix-ui/react'\n\nfunction Card(props) {\n  const { variant, ...rest } = props\n\n  const styles = useStyleConfig('Card', { variant })\n\n  // Pass the computed styles into the \\`__css\\` prop\n  return <Box __css={styles} {...rest} />\n}\n`})}),`\n`,(0,n.jsxs)(e.blockquote,{children:[`\n`,(0,n.jsxs)(e.p,{children:[\"Please note that we are passing the styles to the prop \",(0,n.jsx)(e.code,{children:\"__css\"}),`. It has the\nsame API as `,(0,n.jsxs)(e.a,{href:\"/docs/styled-system/the-sx-prop\",children:[\"the \",(0,n.jsx)(e.code,{children:\"sx\"}),\" prop\"]}),`, but has a lower\nstyle priority. This means you can override the style properties with incmix\nstyle props.`]}),`\n`]}),`\n`,(0,n.jsx)(e.p,{children:`And lastly - the fun part - let's use our custom Card component anywhere in our\napp:`}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-jsx\",live:\"false\",children:`// 1. Using the default props defined in style config\nfunction Usage() {\n  return (\n    <Card>\n      <Image src=\"https://incmix-ui.com/eric.jpg\" rounded=\"full\" w={32} h={32} boxShadow=\"md\" />\n      <Heading mt={6} maxW={60} size=\"lg\" textAlign=\"center\" color=\"gray.700\">\n        Welcome back, Eric\n      </Heading>\n      <Text mt={6} mb={6} size=\"sm\" color=\"blackAlpha.500\">\n        Use your fingerprint to continue.\n      </Text>\n      <Image src=\"/fingerprint.png\" w={32} h={32} />\n    </Card>\n  )\n}\n\n// 2. Overriding the default\nfunction Usage() {\n  return (\n    <Card variant=\"smooth\">\n      <Image src=\"https://incmix-ui.com/eric.jpg\" rounded=\"full\" w={32} h={32} boxShadow=\"md\" />\n      <Heading mt={6} maxW={60} size=\"lg\" textAlign=\"center\" color=\"gray.700\">\n        Welcome back, Eric\n      </Heading>\n      <Text mt={6} mb={6} size=\"sm\" color=\"blackAlpha.500\">\n        Use your fingerprint to continue.\n      </Text>\n      <Image src=\"/fingerprint.png\" w={32} h={32} />\n    </Card>\n  )\n}\n`})}),`\n`,(0,n.jsx)(e.h2,{id:\"styling-multipart-components\",children:\"Styling multipart components\"}),`\n`,(0,n.jsx)(e.p,{children:`This is very similar to styling single part components with a few differences\nyou need to be aware of.`}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsxs)(e.li,{children:[`Given that multipart refers to a component with multiple parts, you'll need to\ndefine the parts, and pass them into the `,(0,n.jsx)(e.code,{children:\"createMultiStyleConfigHelpers\"}),`\nfunction`]}),`\n`,(0,n.jsxs)(e.li,{children:[\"You'll need to provide styles for each \",(0,n.jsx)(e.code,{children:\"part\"}),\", \",(0,n.jsx)(e.code,{children:\"baseStyle\"}),\", \",(0,n.jsx)(e.code,{children:\"sizes\"}),`, and\n`,(0,n.jsx)(e.code,{children:\"variants\"}),\".\"]}),`\n`]}),`\n`,(0,n.jsxs)(e.blockquote,{children:[`\n`,(0,n.jsxs)(e.p,{children:[(0,n.jsx)(e.strong,{children:\"Pro tip \\u{1F4A1}\"}),`: If you're looking for a list of parts of a multipart component\nyou can check it by clicking on the `,(0,n.jsx)(e.strong,{children:'\"View theme source\"'}),` button at the top\nof the documentation page for that certain component. Check out\n`,(0,n.jsx)(e.a,{href:\"https://incmix-ui.com/docs/components/overlay/modal\",children:\"this\"}),\" example.\"]}),`\n`]}),`\n`,(0,n.jsx)(e.p,{children:\"Here's what the style config for multipart components looks like:\"}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-jsx\",live:\"false\",children:`export default {\n  // The parts of the component\n  parts: [],\n  // The base styles for each part\n  baseStyle: {},\n  // The size styles for each part\n  sizes: {},\n  // The variant styles for each part\n  variants: {},\n  // The default \\`size\\` or \\`variant\\` values\n  defaultProps: {},\n}\n`})}),`\n`,(0,n.jsx)(e.p,{children:`For example, here's what the style configurations for a custom menu component\nlooks like:`}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-tsx\",live:\"false\",children:`import { createMultiStyleConfigHelpers } from '@incmix-ui/styled-system'\n\n// This function creates a set of function that helps us create multipart component styles.\nconst helpers = createMultiStyleConfigHelpers(['menu', 'item'])\n\nconst Menu = helpers.defineMultiStyleConfig({\n  baseStyle: {\n    menu: {\n      boxShadow: 'lg',\n      rounded: 'lg',\n      flexDirection: 'column',\n      py: '2',\n    },\n    item: {\n      fontWeight: 'medium',\n      lineHeight: 'normal',\n      color: 'gray.600',\n    },\n  },\n  sizes: {\n    sm: {\n      item: {\n        fontSize: '0.75rem',\n        px: 2,\n        py: 1,\n      },\n    },\n    md: {\n      item: {\n        fontSize: '0.875rem',\n        px: 3,\n        py: 2,\n      },\n    },\n  },\n  variants: {\n    bold: {\n      item: {\n        fontWeight: 'bold',\n      },\n      menu: {\n        boxShadow: 'xl',\n      },\n    },\n    colorful: {\n      item: {\n        color: 'orange.600',\n      },\n      menu: {\n        bg: 'orange.100',\n      },\n    },\n  },\n  defaultProps: {\n    size: 'md',\n  },\n})\n`})}),`\n`,(0,n.jsx)(e.p,{children:\"Next, we'll update the theme object to include this new component style.\"}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-jsx\",live:\"false\",children:`import { extendTheme } from '@incmix-ui/react'\n\nconst theme = extendTheme({\n  components: {\n    Menu,\n  },\n})\n`})}),`\n`,(0,n.jsx)(e.h3,{id:\"consuming-multipart-style-config\",children:\"Consuming multipart style config\"}),`\n`,(0,n.jsxs)(e.p,{children:[`Now that the style config is hooked into the theme, we can consume within any\ncomponent using `,(0,n.jsx)(e.code,{children:\"useMultiStyleConfig\"}),\" hook.\"]}),`\n`,(0,n.jsxs)(e.p,{children:[`We can also mount the computed styles on a specialized context provider called\n`,(0,n.jsx)(e.code,{children:\"StylesProvider\"}),`. These styles will now be available to other sub-components. To\nread from the context, use the `,(0,n.jsx)(e.code,{children:\"useStyles\"}),\" hook.\"]}),`\n`,(0,n.jsx)(e.h3,{id:\"usemultistyleconfig-api\",children:\"useMultiStyleConfig API\"}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-jsx\",live:\"false\",children:`const styles = useMultiStyleConfig(themeKey, props)\n`})}),`\n`,(0,n.jsx)(e.h4,{id:\"parameters-1\",children:\"Parameters\"}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.code,{children:\"themeKey\"}),\": the key in \",(0,n.jsx)(e.code,{children:\"theme.components\"}),` that points to the desired\nstyleConfig.`]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.code,{children:\"props\"}),`: an option of the options for computing the final styles. It typically\nconsists of the `,(0,n.jsx)(e.code,{children:\"size\"}),\", \",(0,n.jsx)(e.code,{children:\"variant\"}),\", and \",(0,n.jsx)(e.code,{children:\"colorScheme\"}),\".\"]}),`\n`]}),`\n`,(0,n.jsx)(e.h4,{id:\"return-values\",children:\"Return Values\"}),`\n`,(0,n.jsxs)(e.p,{children:[\"The computed styles for each component part based on \",(0,n.jsx)(e.code,{children:\"size\"}),\", or \",(0,n.jsx)(e.code,{children:\"variant\"}),`. If\nnone of these were passed, the `,(0,n.jsx)(e.code,{children:\"defaultProps\"}),` defined in the styleConfig will be\nused.`]}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-jsx\",live:\"false\",children:`// 1. Import the components and hook\nimport { StylesProvider, useMultiStyleConfig, useStyles } from '@incmix-ui/react'\n\nfunction Menu(props) {\n  const { size, variant, children, ...rest } = props\n\n  // 2. Consume the \\`useMultiStyleConfig\\` hook\n  const styles = useMultiStyleConfig('Menu', { size, variant })\n\n  return (\n    <Flex __css={styles.menu} {...rest}>\n      {/* 3. Mount the computed styles on \\`StylesProvider\\` */}\n      <StylesProvider value={styles}>{children}</StylesProvider>\n    </Flex>\n  )\n}\n\nfunction MenuItem(props) {\n  // 4. Read computed \\`item\\` styles from styles provider\n  const styles = useStyles()\n  return <Box as=\"button\" __css={styles.item} {...props} />\n}\n`})}),`\n`,(0,n.jsx)(e.p,{children:\"That's it! We can use our newly created multipart component in our application:\"}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-jsx\",live:\"false\",children:`// 1. Using the default props defined in style config\nfunction Usage() {\n  return (\n    <Menu>\n      <MenuItem>Awesome</MenuItem>\n      <MenuItem>Sauce</MenuItem>\n    </Menu>\n  )\n}\n\n// 2. Overriding the default\nfunction Usage() {\n  return (\n    <Menu size=\"sm\">\n      <MenuItem>Awesome</MenuItem>\n      <MenuItem>Sauce</MenuItem>\n    </Menu>\n  )\n}\n`})})]})}function w(t={}){let{wrapper:e}=t.components||{};return e?(0,n.jsx)(e,Object.assign({},t,{children:(0,n.jsx)(d,t)})):d(t)}var T=w;function S(t,e){throw new Error(\"Expected \"+(e?\"component\":\"object\")+\" `\"+t+\"` to be defined: you likely forgot to import, pass, or provide it.\")}return x(C);})();\n;return Component;"
  },
  "_id": "docs/styled-system/component-style.mdx",
  "_raw": {
    "sourceFilePath": "docs/styled-system/component-style.mdx",
    "sourceFileName": "component-style.mdx",
    "sourceFileDir": "docs/styled-system",
    "contentType": "mdx",
    "flattenedPath": "docs/styled-system/component-style"
  },
  "type": "Doc",
  "slug": "/docs/styled-system/component-style",
  "frontMatter": {
    "title": "Component Style",
    "description": "How to create and theme custom components.",
    "slug": "/docs/styled-system/component-style",
    "editUrl": "https://github.com/incmix-ui/incmix-ui-docs/tree/main/content/docs/styled-system/component-style.mdx",
    "headings": [
      {
        "text": "Base styles and Modifier styles",
        "id": "base-styles-and-modifier-styles",
        "level": "h2"
      },
      {
        "text": "Single part and multipart components",
        "id": "single-part-and-multipart-components",
        "level": "h3"
      },
      {
        "text": "Styling single part components",
        "id": "styling-single-part-components",
        "level": "h2"
      },
      {
        "text": "Consuming style config",
        "id": "consuming-style-config",
        "level": "h3"
      },
      {
        "text": "useStyleConfig API",
        "id": "usestyleconfig-api",
        "level": "h3"
      },
      {
        "text": "Styling multipart components",
        "id": "styling-multipart-components",
        "level": "h2"
      },
      {
        "text": "Consuming multipart style config",
        "id": "consuming-multipart-style-config",
        "level": "h3"
      },
      {
        "text": "useMultiStyleConfig API",
        "id": "usemultistyleconfig-api",
        "level": "h3"
      }
    ]
  }
}
