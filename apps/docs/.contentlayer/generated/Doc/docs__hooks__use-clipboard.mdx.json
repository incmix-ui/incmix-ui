{
  "title": "useClipboard",
  "package": "@incmix-ui/hooks",
  "description": "useClipboard is a custom hook that handles copying content to clipboard.",
  "scope": "usage",
  "body": {
    "raw": "\n`useClipboard` is a custom hook that handles copying content to clipboard.\n\n## Arguments\n\nThe `useClipboard` hook takes the following arguments:\n\n| Name               | Type                 | Required | Description                                                                                                                                                                      |\n| ------------------ | -------------------- | -------- | -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| `text`             | `string`             | `true`   | The text or value that is to be copied.                                                                                                                                          |\n| `optionsOrTimeout` | `number` or `object` | `false`  | The timeout as a `number` or an `object` containing 2 properties: `timeout` and `format` for the MIME type. The timeout is measured in milliseconds and has a default of 1500ms. |\n\n## Return value\n\nThe `useClipboard` hook returns an object with the following fields:\n\n| Name        | Type       | Default | Description                                                                                                                                                                       |\n| ----------- | ---------- | ------- | --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| `value`     | `string`   |         | The copied value.                                                                                                                                                                 |\n| `onCopy`    | `function` |         | Callback function to copy content.                                                                                                                                                |\n| `hasCopied` | `boolean`  | `false` | If `true`, the content has been copied within the last `timeout` milliseconds. That is, it is set to true right after `onCopy` is called, and `false` after `timeout` has passed. |\n\n## Import\n\n```js\nimport { useClipboard } from '@incmix-ui/react'\n```\n\n## Usage\n\n```jsx\nfunction Example() {\n  const [value, setValue] = React.useState('Hello world')\n  const { hasCopied, onCopy } = useClipboard(value)\n\n  return (\n    <>\n      <Flex mb={2}>\n        <Input value={value} isReadOnly placeholder=\"Welcome\" />\n        <Button onClick={onCopy} ml={2}>\n          {hasCopied ? 'Copied' : 'Copy'}\n        </Button>\n      </Flex>\n      <Editable placeholder=\"Paste here\">\n        <EditablePreview width=\"100%\" />\n        <EditableInput />\n      </Editable>\n    </>\n  )\n}\n```\n",
    "code": "var Component=(()=>{var s=Object.create;var c=Object.defineProperty;var u=Object.getOwnPropertyDescriptor;var p=Object.getOwnPropertyNames;var m=Object.getPrototypeOf,b=Object.prototype.hasOwnProperty;var f=(t,e)=>()=>(e||t((e={exports:{}}).exports,e),e.exports),g=(t,e)=>{for(var d in e)c(t,d,{get:e[d],enumerable:!0})},l=(t,e,d,r)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let i of p(e))!b.call(t,i)&&i!==d&&c(t,i,{get:()=>e[i],enumerable:!(r=u(e,i))||r.enumerable});return t};var C=(t,e,d)=>(d=t!=null?s(m(t)):{},l(e||!t||!t.__esModule?c(d,\"default\",{value:t,enumerable:!0}):d,t)),x=t=>l(c({},\"__esModule\",{value:!0}),t);var h=f((w,o)=>{o.exports=_jsx_runtime});var T={};g(T,{default:()=>v,frontmatter:()=>y});var n=C(h()),y={title:\"useClipboard\",package:\"@incmix-ui/hooks\",description:\"useClipboard is a custom hook that handles copying content to clipboard.\"};function a(t){let e=Object.assign({p:\"p\",code:\"code\",h2:\"h2\",table:\"table\",thead:\"thead\",tr:\"tr\",th:\"th\",tbody:\"tbody\",td:\"td\",pre:\"pre\"},t.components);return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsxs)(e.p,{children:[(0,n.jsx)(e.code,{children:\"useClipboard\"}),\" is a custom hook that handles copying content to clipboard.\"]}),`\n`,(0,n.jsx)(e.h2,{id:\"arguments\",children:\"Arguments\"}),`\n`,(0,n.jsxs)(e.p,{children:[\"The \",(0,n.jsx)(e.code,{children:\"useClipboard\"}),\" hook takes the following arguments:\"]}),`\n`,(0,n.jsxs)(e.table,{children:[(0,n.jsx)(e.thead,{children:(0,n.jsxs)(e.tr,{children:[(0,n.jsx)(e.th,{children:\"Name\"}),(0,n.jsx)(e.th,{children:\"Type\"}),(0,n.jsx)(e.th,{children:\"Required\"}),(0,n.jsx)(e.th,{children:\"Description\"})]})}),(0,n.jsxs)(e.tbody,{children:[(0,n.jsxs)(e.tr,{children:[(0,n.jsx)(e.td,{children:(0,n.jsx)(e.code,{children:\"text\"})}),(0,n.jsx)(e.td,{children:(0,n.jsx)(e.code,{children:\"string\"})}),(0,n.jsx)(e.td,{children:(0,n.jsx)(e.code,{children:\"true\"})}),(0,n.jsx)(e.td,{children:\"The text or value that is to be copied.\"})]}),(0,n.jsxs)(e.tr,{children:[(0,n.jsx)(e.td,{children:(0,n.jsx)(e.code,{children:\"optionsOrTimeout\"})}),(0,n.jsxs)(e.td,{children:[(0,n.jsx)(e.code,{children:\"number\"}),\" or \",(0,n.jsx)(e.code,{children:\"object\"})]}),(0,n.jsx)(e.td,{children:(0,n.jsx)(e.code,{children:\"false\"})}),(0,n.jsxs)(e.td,{children:[\"The timeout as a \",(0,n.jsx)(e.code,{children:\"number\"}),\" or an \",(0,n.jsx)(e.code,{children:\"object\"}),\" containing 2 properties: \",(0,n.jsx)(e.code,{children:\"timeout\"}),\" and \",(0,n.jsx)(e.code,{children:\"format\"}),\" for the MIME type. The timeout is measured in milliseconds and has a default of 1500ms.\"]})]})]})]}),`\n`,(0,n.jsx)(e.h2,{id:\"return-value\",children:\"Return value\"}),`\n`,(0,n.jsxs)(e.p,{children:[\"The \",(0,n.jsx)(e.code,{children:\"useClipboard\"}),\" hook returns an object with the following fields:\"]}),`\n`,(0,n.jsxs)(e.table,{children:[(0,n.jsx)(e.thead,{children:(0,n.jsxs)(e.tr,{children:[(0,n.jsx)(e.th,{children:\"Name\"}),(0,n.jsx)(e.th,{children:\"Type\"}),(0,n.jsx)(e.th,{children:\"Default\"}),(0,n.jsx)(e.th,{children:\"Description\"})]})}),(0,n.jsxs)(e.tbody,{children:[(0,n.jsxs)(e.tr,{children:[(0,n.jsx)(e.td,{children:(0,n.jsx)(e.code,{children:\"value\"})}),(0,n.jsx)(e.td,{children:(0,n.jsx)(e.code,{children:\"string\"})}),(0,n.jsx)(e.td,{}),(0,n.jsx)(e.td,{children:\"The copied value.\"})]}),(0,n.jsxs)(e.tr,{children:[(0,n.jsx)(e.td,{children:(0,n.jsx)(e.code,{children:\"onCopy\"})}),(0,n.jsx)(e.td,{children:(0,n.jsx)(e.code,{children:\"function\"})}),(0,n.jsx)(e.td,{}),(0,n.jsx)(e.td,{children:\"Callback function to copy content.\"})]}),(0,n.jsxs)(e.tr,{children:[(0,n.jsx)(e.td,{children:(0,n.jsx)(e.code,{children:\"hasCopied\"})}),(0,n.jsx)(e.td,{children:(0,n.jsx)(e.code,{children:\"boolean\"})}),(0,n.jsx)(e.td,{children:(0,n.jsx)(e.code,{children:\"false\"})}),(0,n.jsxs)(e.td,{children:[\"If \",(0,n.jsx)(e.code,{children:\"true\"}),\", the content has been copied within the last \",(0,n.jsx)(e.code,{children:\"timeout\"}),\" milliseconds. That is, it is set to true right after \",(0,n.jsx)(e.code,{children:\"onCopy\"}),\" is called, and \",(0,n.jsx)(e.code,{children:\"false\"}),\" after \",(0,n.jsx)(e.code,{children:\"timeout\"}),\" has passed.\"]})]})]})]}),`\n`,(0,n.jsx)(e.h2,{id:\"import\",children:\"Import\"}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-js\",children:`import { useClipboard } from '@incmix-ui/react'\n`})}),`\n`,(0,n.jsx)(e.h2,{id:\"usage\",children:\"Usage\"}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-jsx\",children:`function Example() {\n  const [value, setValue] = React.useState('Hello world')\n  const { hasCopied, onCopy } = useClipboard(value)\n\n  return (\n    <>\n      <Flex mb={2}>\n        <Input value={value} isReadOnly placeholder=\"Welcome\" />\n        <Button onClick={onCopy} ml={2}>\n          {hasCopied ? 'Copied' : 'Copy'}\n        </Button>\n      </Flex>\n      <Editable placeholder=\"Paste here\">\n        <EditablePreview width=\"100%\" />\n        <EditableInput />\n      </Editable>\n    </>\n  )\n}\n`})})]})}function j(t={}){let{wrapper:e}=t.components||{};return e?(0,n.jsx)(e,Object.assign({},t,{children:(0,n.jsx)(a,t)})):a(t)}var v=j;return x(T);})();\n;return Component;"
  },
  "_id": "docs/hooks/use-clipboard.mdx",
  "_raw": {
    "sourceFilePath": "docs/hooks/use-clipboard.mdx",
    "sourceFileName": "use-clipboard.mdx",
    "sourceFileDir": "docs/hooks",
    "contentType": "mdx",
    "flattenedPath": "docs/hooks/use-clipboard"
  },
  "type": "Doc",
  "slug": "/docs/hooks/use-clipboard",
  "frontMatter": {
    "title": "useClipboard",
    "package": "@incmix-ui/hooks",
    "description": "useClipboard is a custom hook that handles copying content to clipboard.",
    "slug": "/docs/hooks/use-clipboard",
    "editUrl": "https://github.com/incmix-ui/incmix-ui-docs/tree/main/content/docs/hooks/use-clipboard.mdx",
    "headings": [
      {
        "text": "Arguments",
        "id": "arguments",
        "level": "h2"
      },
      {
        "text": "Return value",
        "id": "return-value",
        "level": "h2"
      },
      {
        "text": "Import",
        "id": "import",
        "level": "h2"
      },
      {
        "text": "Usage",
        "id": "usage",
        "level": "h2"
      }
    ]
  }
}
