{
  "title": "Responsive Styles",
  "description": "Incmix UI supports responsive styles out of the box",
  "scope": "usage",
  "category": "features",
  "body": {
    "raw": "\nIncmix UI supports responsive styles out of the box. Instead of manually adding\n`@media` queries and adding nested styles throughout your code, Incmix UI allows\nyou to provide object and array values to add mobile-first responsive styles.\n\n> We use the `@media(min-width)` media query to ensure your interfaces are\n> mobile-first.\n\nResponsive syntax relies on the breakpoints defined in the theme object. Incmix\nUI provides default breakpoints, here's what it looks like:\n\n```js\nconst breakpoints = {\n  sm: '30em',\n  md: '48em',\n  lg: '62em',\n  xl: '80em',\n  '2xl': '96em',\n}\n```\n\nTo make styles responsive, you can use either the array or object syntax.\n\n## The Array syntax\n\nAll style props accept arrays as values for mobile-first responsive styles. This\nis the recommended method.\n\nLet's say you have a `Box` with the following properties:\n\n```jsx live=false\n<Box bg=\"red.200\" w=\"400px\">\n  This is a box\n</Box>\n```\n\nTo make the `width` or `w` responsive using the array syntax, here's what you\nneed to do:\n\n```jsx live=false\n<Box bg=\"red.200\" w={[300, 400, 500]}>\n  This is a box\n</Box>\n```\n\nTo interpret array responsive values, Incmix UI converts the values defined in\n`theme.breakpoints` and sorts them in ascending order. Afterward, we map the\nvalues defined in the array to the breakpoints\n\n```js\n// These are the default breakpoints\nconst breakpoints = {\n  sm: '30em',\n  md: '48em',\n  lg: '62em',\n  xl: '80em',\n  '2xl': '96em',\n}\n\n// Internally, we transform to this\nconst breakpoints = ['0em', '30em', '48em', '62em', '80em', '96em']\n```\n\nHere's how to interpret this syntax:\n\n- `300px`: From `0em` upwards\n- `400px`: From `30em` upwards\n- `500px`: From `48em` upwards\n\n> To skip certain breakpoints, you can pass `null` to any position in the array\n> to avoid generating unnecessary CSS.\n\n## The Object syntax\n\nYou can also define responsive values with breakpoint aliases in an object. Any\nundefined alias key will define the base, non-responsive value.\n\nLet's say you have a `Text` that looks like this:\n\n```jsx live=false\n<Text fontSize=\"40px\">This is a text</Text>\n```\n\nTo make the `fontSize` responsive using the object syntax, here's what you need\nto do:\n\n```jsx live=false\n<Text fontSize={{ base: '24px', md: '40px', lg: '56px' }}>This is responsive text</Text>\n```\n\n> **Remember, Incmix UI uses the min-width media query for responsive design**.\n> The breakpoints are: `sm = 30em`, `md = 48em`, `lg = 62em`, `xl = 80em`\n\nHere's how to interpret this syntax:\n\n- `base`: From `0em` upwards\n- `md`: From `48em` upwards\n- `lg`: From `62em` upwards\n\n## More Examples\n\nThis works for every style prop in the theme specification, which means you can\nchange the style of most properties at a given breakpoint.\n\n```jsx live=false\n<>\n  <Box\n    height={{\n      base: '100%', // 0-48em\n      md: '50%', // 48em-80em,\n      xl: '25%', // 80em+\n    }}\n    bg=\"teal.400\"\n    width={[\n      '100%', // 0-30em\n      '50%', // 30em-48em\n      '25%', // 48em-62em\n      '15%', // 62em+\n    ]}\n  />\n  {/* responsive font size */}\n  <Box fontSize={['sm', 'md', 'lg', 'xl']}>Font Size</Box>\n  {/* responsive margin */}\n  <Box mt={[2, 4, 6, 8]} width=\"full\" height=\"24px\" bg=\"tomato\" />\n  {/* responsive padding */}\n  <Box bg=\"papayawhip\" p={[2, 4, 6, 8]}>\n    Padding\n  </Box>\n</>\n```\n\n## Under the hood\n\nThis shortcut is an alternative to writing media queries out by hand. Given the\nfollowing:\n\n```jsx live=false\n<Box width={[1, 1 / 2, 1 / 4]} />\n```\n\nIt'll generate a CSS that looks like this\n\n```css\n.Box {\n  width: 100%;\n}\n\n@media screen and (min-width: 30em) {\n  .Box {\n    width: 50%;\n  }\n}\n\n@media screen and (min-width: 48em) {\n  .Box {\n    width: 25%;\n  }\n}\n```\n\nThe equivalent of this style if you passed it as an object.\n\n## Customizing Breakpoints\n\nIn some scenarios, you might need to define custom breakpoints for your\napplication. We recommended using common aliases like `sm`, `md`, `lg`, and\n`xl`.\n\nTo define custom breakpoints, just pass them as an object into the theme.\n\n> Note: Ensure the css unit of your breakpoints are the same. Use all `px` or\n> all `em`, don't mix them.\n\n```jsx live=false\n// 1. Import the utilities\nimport { extendTheme } from '@incmix-ui/react'\n\n// 2. Update the breakpoints as key-value pairs\nconst breakpoints = {\n  sm: '320px',\n  md: '768px',\n  lg: '960px',\n  xl: '1200px',\n  '2xl': '1536px',\n}\n\n// 3. Extend the theme\nconst theme = extendTheme({ breakpoints })\n\n// 4. Now you can use the custom breakpoints\nfunction Example() {\n  return <Box width={{ base: '100%', sm: '50%', md: '25%' }} />\n}\n```\n\n> Note: If you're using **pixels** as breakpoint values make sure to **always**\n> provide a value for the `2xl` breakpoint, which by its default pixels value is\n> **\"1536px\"**.\n\n## Demo\n\nHere's a simple example of a marketing page component that uses a stacked layout\non small screens, and a side-by-side layout on larger screens **(resize your\nbrowser to see it in action)**:\n\n```jsx\n<Box p={4} display={{ md: 'flex' }}>\n  <Box flexShrink={0}>\n    <Image borderRadius=\"lg\" width={{ md: 40 }} src=\"https://bit.ly/2jYM25F\" alt=\"Woman paying for a purchase\" />\n  </Box>\n  <Box mt={{ base: 4, md: 0 }} ml={{ md: 6 }}>\n    <Text fontWeight=\"bold\" textTransform=\"uppercase\" fontSize=\"sm\" letterSpacing=\"wide\" color=\"teal.600\">\n      Marketing\n    </Text>\n    <Link mt={1} display=\"block\" fontSize=\"lg\" lineHeight=\"normal\" fontWeight=\"semibold\" href=\"#\">\n      Finding customers for your new business\n    </Link>\n    <Text mt={2} color=\"gray.500\">\n      Getting a new business off the ground is a lot of hard work. Here are five ideas you can use to find your first\n      customers.\n    </Text>\n  </Box>\n</Box>\n```\n",
    "code": "var Component=(()=>{var h=Object.create;var r=Object.defineProperty;var m=Object.getOwnPropertyDescriptor;var p=Object.getOwnPropertyNames;var u=Object.getPrototypeOf,x=Object.prototype.hasOwnProperty;var g=(i,e)=>()=>(e||i((e={exports:{}}).exports,e),e.exports),y=(i,e)=>{for(var o in e)r(i,o,{get:e[o],enumerable:!0})},a=(i,e,o,t)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let s of p(e))!x.call(i,s)&&s!==o&&r(i,s,{get:()=>e[s],enumerable:!(t=m(e,s))||t.enumerable});return i};var f=(i,e,o)=>(o=i!=null?h(u(i)):{},a(e||!i||!i.__esModule?r(o,\"default\",{value:i,enumerable:!0}):o,i)),b=i=>a(r({},\"__esModule\",{value:!0}),i);var d=g((B,l)=>{l.exports=_jsx_runtime});var T={};y(T,{default:()=>v,frontmatter:()=>k});var n=f(d()),k={title:\"Responsive Styles\",description:\"Incmix UI supports responsive styles out of the box\",category:\"features\"};function c(i){let e=Object.assign({p:\"p\",code:\"code\",blockquote:\"blockquote\",pre:\"pre\",h2:\"h2\",ul:\"ul\",li:\"li\",strong:\"strong\"},i.components);return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsxs)(e.p,{children:[`Incmix UI supports responsive styles out of the box. Instead of manually adding\n`,(0,n.jsx)(e.code,{children:\"@media\"}),` queries and adding nested styles throughout your code, Incmix UI allows\nyou to provide object and array values to add mobile-first responsive styles.`]}),`\n`,(0,n.jsxs)(e.blockquote,{children:[`\n`,(0,n.jsxs)(e.p,{children:[\"We use the \",(0,n.jsx)(e.code,{children:\"@media(min-width)\"}),` media query to ensure your interfaces are\nmobile-first.`]}),`\n`]}),`\n`,(0,n.jsx)(e.p,{children:`Responsive syntax relies on the breakpoints defined in the theme object. Incmix\nUI provides default breakpoints, here's what it looks like:`}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-js\",children:`const breakpoints = {\n  sm: '30em',\n  md: '48em',\n  lg: '62em',\n  xl: '80em',\n  '2xl': '96em',\n}\n`})}),`\n`,(0,n.jsx)(e.p,{children:\"To make styles responsive, you can use either the array or object syntax.\"}),`\n`,(0,n.jsx)(e.h2,{id:\"the-array-syntax\",children:\"The Array syntax\"}),`\n`,(0,n.jsx)(e.p,{children:`All style props accept arrays as values for mobile-first responsive styles. This\nis the recommended method.`}),`\n`,(0,n.jsxs)(e.p,{children:[\"Let's say you have a \",(0,n.jsx)(e.code,{children:\"Box\"}),\" with the following properties:\"]}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-jsx\",live:\"false\",children:`<Box bg=\"red.200\" w=\"400px\">\n  This is a box\n</Box>\n`})}),`\n`,(0,n.jsxs)(e.p,{children:[\"To make the \",(0,n.jsx)(e.code,{children:\"width\"}),\" or \",(0,n.jsx)(e.code,{children:\"w\"}),` responsive using the array syntax, here's what you\nneed to do:`]}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-jsx\",live:\"false\",children:`<Box bg=\"red.200\" w={[300, 400, 500]}>\n  This is a box\n</Box>\n`})}),`\n`,(0,n.jsxs)(e.p,{children:[`To interpret array responsive values, Incmix UI converts the values defined in\n`,(0,n.jsx)(e.code,{children:\"theme.breakpoints\"}),` and sorts them in ascending order. Afterward, we map the\nvalues defined in the array to the breakpoints`]}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-js\",children:`// These are the default breakpoints\nconst breakpoints = {\n  sm: '30em',\n  md: '48em',\n  lg: '62em',\n  xl: '80em',\n  '2xl': '96em',\n}\n\n// Internally, we transform to this\nconst breakpoints = ['0em', '30em', '48em', '62em', '80em', '96em']\n`})}),`\n`,(0,n.jsx)(e.p,{children:\"Here's how to interpret this syntax:\"}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.code,{children:\"300px\"}),\": From \",(0,n.jsx)(e.code,{children:\"0em\"}),\" upwards\"]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.code,{children:\"400px\"}),\": From \",(0,n.jsx)(e.code,{children:\"30em\"}),\" upwards\"]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.code,{children:\"500px\"}),\": From \",(0,n.jsx)(e.code,{children:\"48em\"}),\" upwards\"]}),`\n`]}),`\n`,(0,n.jsxs)(e.blockquote,{children:[`\n`,(0,n.jsxs)(e.p,{children:[\"To skip certain breakpoints, you can pass \",(0,n.jsx)(e.code,{children:\"null\"}),` to any position in the array\nto avoid generating unnecessary CSS.`]}),`\n`]}),`\n`,(0,n.jsx)(e.h2,{id:\"the-object-syntax\",children:\"The Object syntax\"}),`\n`,(0,n.jsx)(e.p,{children:`You can also define responsive values with breakpoint aliases in an object. Any\nundefined alias key will define the base, non-responsive value.`}),`\n`,(0,n.jsxs)(e.p,{children:[\"Let's say you have a \",(0,n.jsx)(e.code,{children:\"Text\"}),\" that looks like this:\"]}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-jsx\",live:\"false\",children:`<Text fontSize=\"40px\">This is a text</Text>\n`})}),`\n`,(0,n.jsxs)(e.p,{children:[\"To make the \",(0,n.jsx)(e.code,{children:\"fontSize\"}),` responsive using the object syntax, here's what you need\nto do:`]}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-jsx\",live:\"false\",children:`<Text fontSize={{ base: '24px', md: '40px', lg: '56px' }}>This is responsive text</Text>\n`})}),`\n`,(0,n.jsxs)(e.blockquote,{children:[`\n`,(0,n.jsxs)(e.p,{children:[(0,n.jsx)(e.strong,{children:\"Remember, Incmix UI uses the min-width media query for responsive design\"}),`.\nThe breakpoints are: `,(0,n.jsx)(e.code,{children:\"sm = 30em\"}),\", \",(0,n.jsx)(e.code,{children:\"md = 48em\"}),\", \",(0,n.jsx)(e.code,{children:\"lg = 62em\"}),\", \",(0,n.jsx)(e.code,{children:\"xl = 80em\"})]}),`\n`]}),`\n`,(0,n.jsx)(e.p,{children:\"Here's how to interpret this syntax:\"}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.code,{children:\"base\"}),\": From \",(0,n.jsx)(e.code,{children:\"0em\"}),\" upwards\"]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.code,{children:\"md\"}),\": From \",(0,n.jsx)(e.code,{children:\"48em\"}),\" upwards\"]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.code,{children:\"lg\"}),\": From \",(0,n.jsx)(e.code,{children:\"62em\"}),\" upwards\"]}),`\n`]}),`\n`,(0,n.jsx)(e.h2,{id:\"more-examples\",children:\"More Examples\"}),`\n`,(0,n.jsx)(e.p,{children:`This works for every style prop in the theme specification, which means you can\nchange the style of most properties at a given breakpoint.`}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-jsx\",live:\"false\",children:`<>\n  <Box\n    height={{\n      base: '100%', // 0-48em\n      md: '50%', // 48em-80em,\n      xl: '25%', // 80em+\n    }}\n    bg=\"teal.400\"\n    width={[\n      '100%', // 0-30em\n      '50%', // 30em-48em\n      '25%', // 48em-62em\n      '15%', // 62em+\n    ]}\n  />\n  {/* responsive font size */}\n  <Box fontSize={['sm', 'md', 'lg', 'xl']}>Font Size</Box>\n  {/* responsive margin */}\n  <Box mt={[2, 4, 6, 8]} width=\"full\" height=\"24px\" bg=\"tomato\" />\n  {/* responsive padding */}\n  <Box bg=\"papayawhip\" p={[2, 4, 6, 8]}>\n    Padding\n  </Box>\n</>\n`})}),`\n`,(0,n.jsx)(e.h2,{id:\"under-the-hood\",children:\"Under the hood\"}),`\n`,(0,n.jsx)(e.p,{children:`This shortcut is an alternative to writing media queries out by hand. Given the\nfollowing:`}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-jsx\",live:\"false\",children:`<Box width={[1, 1 / 2, 1 / 4]} />\n`})}),`\n`,(0,n.jsx)(e.p,{children:\"It'll generate a CSS that looks like this\"}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-css\",children:`.Box {\n  width: 100%;\n}\n\n@media screen and (min-width: 30em) {\n  .Box {\n    width: 50%;\n  }\n}\n\n@media screen and (min-width: 48em) {\n  .Box {\n    width: 25%;\n  }\n}\n`})}),`\n`,(0,n.jsx)(e.p,{children:\"The equivalent of this style if you passed it as an object.\"}),`\n`,(0,n.jsx)(e.h2,{id:\"customizing-breakpoints\",children:\"Customizing Breakpoints\"}),`\n`,(0,n.jsxs)(e.p,{children:[`In some scenarios, you might need to define custom breakpoints for your\napplication. We recommended using common aliases like `,(0,n.jsx)(e.code,{children:\"sm\"}),\", \",(0,n.jsx)(e.code,{children:\"md\"}),\", \",(0,n.jsx)(e.code,{children:\"lg\"}),`, and\n`,(0,n.jsx)(e.code,{children:\"xl\"}),\".\"]}),`\n`,(0,n.jsx)(e.p,{children:\"To define custom breakpoints, just pass them as an object into the theme.\"}),`\n`,(0,n.jsxs)(e.blockquote,{children:[`\n`,(0,n.jsxs)(e.p,{children:[\"Note: Ensure the css unit of your breakpoints are the same. Use all \",(0,n.jsx)(e.code,{children:\"px\"}),` or\nall `,(0,n.jsx)(e.code,{children:\"em\"}),\", don't mix them.\"]}),`\n`]}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-jsx\",live:\"false\",children:`// 1. Import the utilities\nimport { extendTheme } from '@incmix-ui/react'\n\n// 2. Update the breakpoints as key-value pairs\nconst breakpoints = {\n  sm: '320px',\n  md: '768px',\n  lg: '960px',\n  xl: '1200px',\n  '2xl': '1536px',\n}\n\n// 3. Extend the theme\nconst theme = extendTheme({ breakpoints })\n\n// 4. Now you can use the custom breakpoints\nfunction Example() {\n  return <Box width={{ base: '100%', sm: '50%', md: '25%' }} />\n}\n`})}),`\n`,(0,n.jsxs)(e.blockquote,{children:[`\n`,(0,n.jsxs)(e.p,{children:[\"Note: If you're using \",(0,n.jsx)(e.strong,{children:\"pixels\"}),\" as breakpoint values make sure to \",(0,n.jsx)(e.strong,{children:\"always\"}),`\nprovide a value for the `,(0,n.jsx)(e.code,{children:\"2xl\"}),` breakpoint, which by its default pixels value is\n`,(0,n.jsx)(e.strong,{children:'\"1536px\"'}),\".\"]}),`\n`]}),`\n`,(0,n.jsx)(e.h2,{id:\"demo\",children:\"Demo\"}),`\n`,(0,n.jsxs)(e.p,{children:[`Here's a simple example of a marketing page component that uses a stacked layout\non small screens, and a side-by-side layout on larger screens `,(0,n.jsx)(e.strong,{children:`(resize your\nbrowser to see it in action)`}),\":\"]}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-jsx\",children:`<Box p={4} display={{ md: 'flex' }}>\n  <Box flexShrink={0}>\n    <Image borderRadius=\"lg\" width={{ md: 40 }} src=\"https://bit.ly/2jYM25F\" alt=\"Woman paying for a purchase\" />\n  </Box>\n  <Box mt={{ base: 4, md: 0 }} ml={{ md: 6 }}>\n    <Text fontWeight=\"bold\" textTransform=\"uppercase\" fontSize=\"sm\" letterSpacing=\"wide\" color=\"teal.600\">\n      Marketing\n    </Text>\n    <Link mt={1} display=\"block\" fontSize=\"lg\" lineHeight=\"normal\" fontWeight=\"semibold\" href=\"#\">\n      Finding customers for your new business\n    </Link>\n    <Text mt={2} color=\"gray.500\">\n      Getting a new business off the ground is a lot of hard work. Here are five ideas you can use to find your first\n      customers.\n    </Text>\n  </Box>\n</Box>\n`})})]})}function w(i={}){let{wrapper:e}=i.components||{};return e?(0,n.jsx)(e,Object.assign({},i,{children:(0,n.jsx)(c,i)})):c(i)}var v=w;return b(T);})();\n;return Component;"
  },
  "_id": "docs/styled-system/responsive-styles.mdx",
  "_raw": {
    "sourceFilePath": "docs/styled-system/responsive-styles.mdx",
    "sourceFileName": "responsive-styles.mdx",
    "sourceFileDir": "docs/styled-system",
    "contentType": "mdx",
    "flattenedPath": "docs/styled-system/responsive-styles"
  },
  "type": "Doc",
  "slug": "/docs/styled-system/responsive-styles",
  "frontMatter": {
    "title": "Responsive Styles",
    "description": "Incmix UI supports responsive styles out of the box",
    "slug": "/docs/styled-system/responsive-styles",
    "editUrl": "https://github.com/incmix-ui/incmix-ui-docs/tree/main/content/docs/styled-system/responsive-styles.mdx",
    "headings": [
      {
        "text": "The Array syntax",
        "id": "the-array-syntax",
        "level": "h2"
      },
      {
        "text": "The Object syntax",
        "id": "the-object-syntax",
        "level": "h2"
      },
      {
        "text": "More Examples",
        "id": "more-examples",
        "level": "h2"
      },
      {
        "text": "Under the hood",
        "id": "under-the-hood",
        "level": "h2"
      },
      {
        "text": "Customizing Breakpoints",
        "id": "customizing-breakpoints",
        "level": "h2"
      },
      {
        "text": "Demo",
        "id": "demo",
        "level": "h2"
      }
    ]
  }
}
