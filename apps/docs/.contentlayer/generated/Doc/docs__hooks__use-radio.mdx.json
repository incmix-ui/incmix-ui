{
  "title": "useRadio",
  "package": "@incmix-ui/radio",
  "description": "React hook to manage radio.",
  "scope": "usage",
  "body": {
    "raw": "\n`useRadio` is a custom hook used to provide radio functionality, as well as\nstate and focus management to custom radio components when using it.\n\n## Import\n\n```js\nimport { useRadio } from '@incmix-ui/react'\n```\n\n## Return value\n\nThe `useRadio` hook returns following props\n\n| Name               | Type         | Description                                                              |\n| ------------------ | ------------ | ------------------------------------------------------------------------ |\n| `state`            | `RadioState` | An object that contains all props defining the current state of a radio. |\n| `getCheckboxProps` | `PropGetter` | A function to get the props of the radio.                                |\n| `getInputProps`    | `PropGetter` | A function to get the props of the input field.                          |\n| `getLabelProps`    | `PropGetter` | A function to get the props of the radio label.                          |\n| `getRootProps`     | `PropGetter` | A function to get the props of the radio root.                           |\n| `htmlProps`        | `{}`         | An object with all htmlProps.                                            |\n\n> The `getCheckboxProps` function does return the props of the radio. The naming\n> error is known. Changing it would mean a breaking change to a lot of users,\n> which is why it will stay like this until the next major release.\n\n## Usage\n\n```jsx\nfunction Example() {\n  const CustomRadio = props => {\n    const { image, ...radioProps } = props\n    const { state, getInputProps, getCheckboxProps, htmlProps, getLabelProps } = useRadio(radioProps)\n\n    return (\n      <incmix.label {...htmlProps} cursor=\"pointer\">\n        <input {...getInputProps({})} hidden />\n        <Box {...getCheckboxProps()} bg={state.isChecked ? 'green.200' : 'transparent'} w={12} p={1} rounded=\"full\">\n          <Image src={image} rounded=\"full\" {...getLabelProps()} />\n        </Box>\n      </incmix.label>\n    )\n  }\n\n  return (\n    <div>\n      <CustomRadio image={'https://randomuser.me/api/portraits/men/86.jpg'} />\n    </div>\n  )\n}\n```\n\n## Parameters\n\nThe `useRadio` hook accepts an object with the following properties:\n\n<PropsTable of=\"useRadio\" />\n",
    "code": "var Component=(()=>{var s=Object.create;var i=Object.defineProperty;var p=Object.getOwnPropertyDescriptor;var u=Object.getOwnPropertyNames;var m=Object.getPrototypeOf,g=Object.prototype.hasOwnProperty;var f=(n,e)=>()=>(e||n((e={exports:{}}).exports,e),e.exports),b=(n,e)=>{for(var r in e)i(n,r,{get:e[r],enumerable:!0})},c=(n,e,r,d)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let o of u(e))!g.call(n,o)&&o!==r&&i(n,o,{get:()=>e[o],enumerable:!(d=p(e,o))||d.enumerable});return n};var x=(n,e,r)=>(r=n!=null?s(m(n)):{},c(e||!n||!n.__esModule?i(r,\"default\",{value:n,enumerable:!0}):r,n)),P=n=>c(i({},\"__esModule\",{value:!0}),n);var l=f((_,h)=>{h.exports=_jsx_runtime});var y={};b(y,{default:()=>w,frontmatter:()=>k});var t=x(l()),k={title:\"useRadio\",package:\"@incmix-ui/radio\",description:\"React hook to manage radio.\"};function a(n){let e=Object.assign({p:\"p\",code:\"code\",h2:\"h2\",pre:\"pre\",table:\"table\",thead:\"thead\",tr:\"tr\",th:\"th\",tbody:\"tbody\",td:\"td\",blockquote:\"blockquote\"},n.components),{PropsTable:r}=e;return r||R(\"PropsTable\",!0),(0,t.jsxs)(t.Fragment,{children:[(0,t.jsxs)(e.p,{children:[(0,t.jsx)(e.code,{children:\"useRadio\"}),` is a custom hook used to provide radio functionality, as well as\nstate and focus management to custom radio components when using it.`]}),`\n`,(0,t.jsx)(e.h2,{id:\"import\",children:\"Import\"}),`\n`,(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:\"language-js\",children:`import { useRadio } from '@incmix-ui/react'\n`})}),`\n`,(0,t.jsx)(e.h2,{id:\"return-value\",children:\"Return value\"}),`\n`,(0,t.jsxs)(e.p,{children:[\"The \",(0,t.jsx)(e.code,{children:\"useRadio\"}),\" hook returns following props\"]}),`\n`,(0,t.jsxs)(e.table,{children:[(0,t.jsx)(e.thead,{children:(0,t.jsxs)(e.tr,{children:[(0,t.jsx)(e.th,{children:\"Name\"}),(0,t.jsx)(e.th,{children:\"Type\"}),(0,t.jsx)(e.th,{children:\"Description\"})]})}),(0,t.jsxs)(e.tbody,{children:[(0,t.jsxs)(e.tr,{children:[(0,t.jsx)(e.td,{children:(0,t.jsx)(e.code,{children:\"state\"})}),(0,t.jsx)(e.td,{children:(0,t.jsx)(e.code,{children:\"RadioState\"})}),(0,t.jsx)(e.td,{children:\"An object that contains all props defining the current state of a radio.\"})]}),(0,t.jsxs)(e.tr,{children:[(0,t.jsx)(e.td,{children:(0,t.jsx)(e.code,{children:\"getCheckboxProps\"})}),(0,t.jsx)(e.td,{children:(0,t.jsx)(e.code,{children:\"PropGetter\"})}),(0,t.jsx)(e.td,{children:\"A function to get the props of the radio.\"})]}),(0,t.jsxs)(e.tr,{children:[(0,t.jsx)(e.td,{children:(0,t.jsx)(e.code,{children:\"getInputProps\"})}),(0,t.jsx)(e.td,{children:(0,t.jsx)(e.code,{children:\"PropGetter\"})}),(0,t.jsx)(e.td,{children:\"A function to get the props of the input field.\"})]}),(0,t.jsxs)(e.tr,{children:[(0,t.jsx)(e.td,{children:(0,t.jsx)(e.code,{children:\"getLabelProps\"})}),(0,t.jsx)(e.td,{children:(0,t.jsx)(e.code,{children:\"PropGetter\"})}),(0,t.jsx)(e.td,{children:\"A function to get the props of the radio label.\"})]}),(0,t.jsxs)(e.tr,{children:[(0,t.jsx)(e.td,{children:(0,t.jsx)(e.code,{children:\"getRootProps\"})}),(0,t.jsx)(e.td,{children:(0,t.jsx)(e.code,{children:\"PropGetter\"})}),(0,t.jsx)(e.td,{children:\"A function to get the props of the radio root.\"})]}),(0,t.jsxs)(e.tr,{children:[(0,t.jsx)(e.td,{children:(0,t.jsx)(e.code,{children:\"htmlProps\"})}),(0,t.jsx)(e.td,{children:(0,t.jsx)(e.code,{children:\"{}\"})}),(0,t.jsx)(e.td,{children:\"An object with all htmlProps.\"})]})]})]}),`\n`,(0,t.jsxs)(e.blockquote,{children:[`\n`,(0,t.jsxs)(e.p,{children:[\"The \",(0,t.jsx)(e.code,{children:\"getCheckboxProps\"}),` function does return the props of the radio. The naming\nerror is known. Changing it would mean a breaking change to a lot of users,\nwhich is why it will stay like this until the next major release.`]}),`\n`]}),`\n`,(0,t.jsx)(e.h2,{id:\"usage\",children:\"Usage\"}),`\n`,(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:\"language-jsx\",children:`function Example() {\n  const CustomRadio = props => {\n    const { image, ...radioProps } = props\n    const { state, getInputProps, getCheckboxProps, htmlProps, getLabelProps } = useRadio(radioProps)\n\n    return (\n      <incmix.label {...htmlProps} cursor=\"pointer\">\n        <input {...getInputProps({})} hidden />\n        <Box {...getCheckboxProps()} bg={state.isChecked ? 'green.200' : 'transparent'} w={12} p={1} rounded=\"full\">\n          <Image src={image} rounded=\"full\" {...getLabelProps()} />\n        </Box>\n      </incmix.label>\n    )\n  }\n\n  return (\n    <div>\n      <CustomRadio image={'https://randomuser.me/api/portraits/men/86.jpg'} />\n    </div>\n  )\n}\n`})}),`\n`,(0,t.jsx)(e.h2,{id:\"parameters\",children:\"Parameters\"}),`\n`,(0,t.jsxs)(e.p,{children:[\"The \",(0,t.jsx)(e.code,{children:\"useRadio\"}),\" hook accepts an object with the following properties:\"]}),`\n`,(0,t.jsx)(r,{of:\"useRadio\"})]})}function j(n={}){let{wrapper:e}=n.components||{};return e?(0,t.jsx)(e,Object.assign({},n,{children:(0,t.jsx)(a,n)})):a(n)}var w=j;function R(n,e){throw new Error(\"Expected \"+(e?\"component\":\"object\")+\" `\"+n+\"` to be defined: you likely forgot to import, pass, or provide it.\")}return P(y);})();\n;return Component;"
  },
  "_id": "docs/hooks/use-radio.mdx",
  "_raw": {
    "sourceFilePath": "docs/hooks/use-radio.mdx",
    "sourceFileName": "use-radio.mdx",
    "sourceFileDir": "docs/hooks",
    "contentType": "mdx",
    "flattenedPath": "docs/hooks/use-radio"
  },
  "type": "Doc",
  "slug": "/docs/hooks/use-radio",
  "frontMatter": {
    "title": "useRadio",
    "package": "@incmix-ui/radio",
    "description": "React hook to manage radio.",
    "slug": "/docs/hooks/use-radio",
    "editUrl": "https://github.com/incmix-ui/incmix-ui-docs/tree/main/content/docs/hooks/use-radio.mdx",
    "headings": [
      {
        "text": "Import",
        "id": "import",
        "level": "h2"
      },
      {
        "text": "Return value",
        "id": "return-value",
        "level": "h2"
      },
      {
        "text": "Usage",
        "id": "usage",
        "level": "h2"
      },
      {
        "text": "Parameters",
        "id": "parameters",
        "level": "h2"
      }
    ]
  }
}
