{
  "title": "Global Styles",
  "description": "How to manage and inject global styles in Incmix UI",
  "scope": "usage",
  "category": "features",
  "body": {
    "raw": "\n`GlobalStyle` is a new component in v1 that injects styles defined in\n`theme.styles.global` into the global styles of your app or website.\n\nThis allows you to define theme-aware styles for any elements.\n\n## How it works\n\nBy using `IncmixProvider` at the root of your application, we automatically\nrender a `GlobalStyle` component. Here's what `GlobalStyle` does under the hood:\n\n- Reads the styles defined in `theme.styles.global`, this style can be a style\n  object or a function that returns a style object.\n- Process the styles and pass it to emotion's `Global` component which is used\n  to handle global style injection.\n\n```js\n// 1. Using a style object\nconst theme = {\n  styles: {\n    global: {\n      'html, body': {\n        color: 'gray.600',\n        lineHeight: 'tall',\n      },\n      a: {\n        color: 'teal.500',\n      },\n    },\n  },\n}\n\n// 2. Using a function\n// NB: Incmix gives you access to `colorMode` and `theme` in `props`\nconst theme = {\n  styles: {\n    global: props => ({\n      'html, body': {\n        fontSize: 'sm',\n        color: props.colorMode === 'dark' ? 'white' : 'gray.600',\n        lineHeight: 'tall',\n      },\n      a: {\n        color: props.colorMode === 'dark' ? 'teal.300' : 'teal.500',\n      },\n    }),\n  },\n}\n```\n\n## Default styles\n\nThe default Incmix theme provides sensible global styles. Here's what it looks\nlike:\n\n```js\nimport { mode } from '@incmix-ui/theme-tools'\n\nconst styles = {\n  global: props => ({\n    body: {\n      fontFamily: 'body',\n      color: mode('gray.800', 'whiteAlpha.900')(props),\n      bg: mode('white', 'gray.800')(props),\n      lineHeight: 'base',\n    },\n    '*::placeholder': {\n      color: mode('gray.400', 'whiteAlpha.400')(props),\n    },\n    '*, *::before, &::after': {\n      borderColor: mode('gray.200', 'whiteAlpha.300')(props),\n      wordWrap: 'break-word',\n    },\n  }),\n}\n```\n\n> **Note ðŸš¨:** `mode(lightMode, darkMode)(props)` function is the same as\n> `props.colorMode === \"dark\" ? darkMode : lightMode`\n\n## Styling non-Incmix elements globally\n\nWhen combining Incmix with other libraries, you might need a way to style some\nelements in those libraries using the theme defined tokens.\n\nLet's say you have a blog written in `mdx` and you'd like to style all the MDX\nelements globally. Here's what you'll do.\n\n```js\n// 1. Wrap the rendered mdx in a container\nconst MDXWrapper = props => <div className=\"mdx-prose\" {...props} />\n\n// 2. Define global styles\n// PRO TIP: Again, you can also use the function version here\nconst theme = {\n  styles: {\n    global: {\n      '.mdx-prose': {\n        h1: {\n          fontSize: 'xl',\n          mb: '4',\n        },\n        p: {\n          fontSize: 'sm',\n          lineHeight: '1.4',\n        },\n      },\n    },\n  },\n}\n\n// 3. That's it! Your app will now read and use the global styles\n```\n",
    "code": "var Component=(()=>{var h=Object.create;var s=Object.defineProperty;var p=Object.getOwnPropertyDescriptor;var m=Object.getOwnPropertyNames;var y=Object.getPrototypeOf,g=Object.prototype.hasOwnProperty;var b=(o,e)=>()=>(e||o((e={exports:{}}).exports,e),e.exports),u=(o,e)=>{for(var l in e)s(o,l,{get:e[l],enumerable:!0})},r=(o,e,l,i)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let t of m(e))!g.call(o,t)&&t!==l&&s(o,t,{get:()=>e[t],enumerable:!(i=p(e,t))||i.enumerable});return o};var f=(o,e,l)=>(l=o!=null?h(y(o)):{},r(e||!o||!o.__esModule?s(l,\"default\",{value:o,enumerable:!0}):l,o)),w=o=>r(s({},\"__esModule\",{value:!0}),o);var c=b((I,a)=>{a.exports=_jsx_runtime});var M={};u(M,{default:()=>k,frontmatter:()=>x});var n=f(c()),x={title:\"Global Styles\",description:\"How to manage and inject global styles in Incmix UI\",category:\"features\"};function d(o){let e=Object.assign({p:\"p\",code:\"code\",h2:\"h2\",ul:\"ul\",li:\"li\",pre:\"pre\",blockquote:\"blockquote\",strong:\"strong\"},o.components);return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsxs)(e.p,{children:[(0,n.jsx)(e.code,{children:\"GlobalStyle\"}),` is a new component in v1 that injects styles defined in\n`,(0,n.jsx)(e.code,{children:\"theme.styles.global\"}),\" into the global styles of your app or website.\"]}),`\n`,(0,n.jsx)(e.p,{children:\"This allows you to define theme-aware styles for any elements.\"}),`\n`,(0,n.jsx)(e.h2,{id:\"how-it-works\",children:\"How it works\"}),`\n`,(0,n.jsxs)(e.p,{children:[\"By using \",(0,n.jsx)(e.code,{children:\"IncmixProvider\"}),` at the root of your application, we automatically\nrender a `,(0,n.jsx)(e.code,{children:\"GlobalStyle\"}),\" component. Here's what \",(0,n.jsx)(e.code,{children:\"GlobalStyle\"}),\" does under the hood:\"]}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsxs)(e.li,{children:[\"Reads the styles defined in \",(0,n.jsx)(e.code,{children:\"theme.styles.global\"}),`, this style can be a style\nobject or a function that returns a style object.`]}),`\n`,(0,n.jsxs)(e.li,{children:[\"Process the styles and pass it to emotion's \",(0,n.jsx)(e.code,{children:\"Global\"}),` component which is used\nto handle global style injection.`]}),`\n`]}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-js\",children:`// 1. Using a style object\nconst theme = {\n  styles: {\n    global: {\n      'html, body': {\n        color: 'gray.600',\n        lineHeight: 'tall',\n      },\n      a: {\n        color: 'teal.500',\n      },\n    },\n  },\n}\n\n// 2. Using a function\n// NB: Incmix gives you access to \\`colorMode\\` and \\`theme\\` in \\`props\\`\nconst theme = {\n  styles: {\n    global: props => ({\n      'html, body': {\n        fontSize: 'sm',\n        color: props.colorMode === 'dark' ? 'white' : 'gray.600',\n        lineHeight: 'tall',\n      },\n      a: {\n        color: props.colorMode === 'dark' ? 'teal.300' : 'teal.500',\n      },\n    }),\n  },\n}\n`})}),`\n`,(0,n.jsx)(e.h2,{id:\"default-styles\",children:\"Default styles\"}),`\n`,(0,n.jsx)(e.p,{children:`The default Incmix theme provides sensible global styles. Here's what it looks\nlike:`}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-js\",children:`import { mode } from '@incmix-ui/theme-tools'\n\nconst styles = {\n  global: props => ({\n    body: {\n      fontFamily: 'body',\n      color: mode('gray.800', 'whiteAlpha.900')(props),\n      bg: mode('white', 'gray.800')(props),\n      lineHeight: 'base',\n    },\n    '*::placeholder': {\n      color: mode('gray.400', 'whiteAlpha.400')(props),\n    },\n    '*, *::before, &::after': {\n      borderColor: mode('gray.200', 'whiteAlpha.300')(props),\n      wordWrap: 'break-word',\n    },\n  }),\n}\n`})}),`\n`,(0,n.jsxs)(e.blockquote,{children:[`\n`,(0,n.jsxs)(e.p,{children:[(0,n.jsx)(e.strong,{children:\"Note \\u{1F6A8}:\"}),\" \",(0,n.jsx)(e.code,{children:\"mode(lightMode, darkMode)(props)\"}),` function is the same as\n`,(0,n.jsx)(e.code,{children:'props.colorMode === \"dark\" ? darkMode : lightMode'})]}),`\n`]}),`\n`,(0,n.jsx)(e.h2,{id:\"styling-non-incmix-elements-globally\",children:\"Styling non-Incmix elements globally\"}),`\n`,(0,n.jsx)(e.p,{children:`When combining Incmix with other libraries, you might need a way to style some\nelements in those libraries using the theme defined tokens.`}),`\n`,(0,n.jsxs)(e.p,{children:[\"Let's say you have a blog written in \",(0,n.jsx)(e.code,{children:\"mdx\"}),` and you'd like to style all the MDX\nelements globally. Here's what you'll do.`]}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-js\",children:`// 1. Wrap the rendered mdx in a container\nconst MDXWrapper = props => <div className=\"mdx-prose\" {...props} />\n\n// 2. Define global styles\n// PRO TIP: Again, you can also use the function version here\nconst theme = {\n  styles: {\n    global: {\n      '.mdx-prose': {\n        h1: {\n          fontSize: 'xl',\n          mb: '4',\n        },\n        p: {\n          fontSize: 'sm',\n          lineHeight: '1.4',\n        },\n      },\n    },\n  },\n}\n\n// 3. That's it! Your app will now read and use the global styles\n`})})]})}function j(o={}){let{wrapper:e}=o.components||{};return e?(0,n.jsx)(e,Object.assign({},o,{children:(0,n.jsx)(d,o)})):d(o)}var k=j;return w(M);})();\n;return Component;"
  },
  "_id": "docs/styled-system/global-styles.mdx",
  "_raw": {
    "sourceFilePath": "docs/styled-system/global-styles.mdx",
    "sourceFileName": "global-styles.mdx",
    "sourceFileDir": "docs/styled-system",
    "contentType": "mdx",
    "flattenedPath": "docs/styled-system/global-styles"
  },
  "type": "Doc",
  "slug": "/docs/styled-system/global-styles",
  "frontMatter": {
    "title": "Global Styles",
    "description": "How to manage and inject global styles in Incmix UI",
    "slug": "/docs/styled-system/global-styles",
    "editUrl": "https://github.com/incmix-ui/incmix-ui-docs/tree/main/content/docs/styled-system/global-styles.mdx",
    "headings": [
      {
        "text": "How it works",
        "id": "how-it-works",
        "level": "h2"
      },
      {
        "text": "Default styles",
        "id": "default-styles",
        "level": "h2"
      },
      {
        "text": "Styling non-Incmix elements globally",
        "id": "styling-non-incmix-elements-globally",
        "level": "h2"
      }
    ]
  }
}
