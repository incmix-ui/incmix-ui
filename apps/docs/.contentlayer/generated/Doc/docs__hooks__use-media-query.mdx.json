{
  "title": "useMediaQuery",
  "package": "@incmix-ui/hooks",
  "description": "React hook to detect media queries",
  "scope": "usage",
  "body": {
    "raw": "\n`useMediaQuery` is a custom hook used to help detect whether a single media\nquery or multiple media queries individually match.\n\n[Learn more about the API and its backgrounds.](https://developer.mozilla.org/en-US/docs/Web/API/Window/matchMedia)\n\n## Import\n\n```js\nimport { useMediaQuery } from '@incmix-ui/react'\n```\n\n## Return value\n\nThe `useMediaQuery` hook returns an array of booleans, indicating whether the\ngiven query matches or queries match.\n\nWhy an array? `useMediaQuery` accepts both a string and an array of strings, but\nwill always return an array. This way, you can combine multiple media queries\nwhich will be individually matched in a single call.\n\n> Keep in mind this API relies on the users browser support of\n> `window.matchMedia` and will always return `false` if it is not supported or\n> does not exist (e.g. during serverside rendering).\n\n## Usage\n\n```jsx\nfunction Example() {\n  const [isLargerThan1280] = useMediaQuery('(min-width: 1280px)')\n\n  return <Text>{isLargerThan1280 ? 'larger than 1280px' : 'smaller than 1280px'}</Text>\n}\n```\n\n```jsx\nfunction Example() {\n  const [isLargerThanHD, isDisplayingInBrowser] = useMediaQuery(['(min-width: 1920px)', '(display-mode: browser)'])\n\n  function determineText() {\n    if (isLargerThanHD) {\n      return `high resolution you got there ${isDisplayingInBrowser ? 'in your browser' : 'on your screen'}`\n    }\n\n    return isDisplayingInBrowser ? 'rendering in a browser' : 'rendering on something else, e.g. PWA'\n  }\n\n  return <Text>{determineText()}</Text>\n}\n```\n",
    "code": "var Component=(()=>{var u=Object.create;var t=Object.defineProperty;var h=Object.getOwnPropertyDescriptor;var m=Object.getOwnPropertyNames;var p=Object.getPrototypeOf,g=Object.prototype.hasOwnProperty;var y=(r,e)=>()=>(e||r((e={exports:{}}).exports,e),e.exports),x=(r,e)=>{for(var i in e)t(r,i,{get:e[i],enumerable:!0})},o=(r,e,i,s)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let a of m(e))!g.call(r,a)&&a!==i&&t(r,a,{get:()=>e[a],enumerable:!(s=h(e,a))||s.enumerable});return r};var w=(r,e,i)=>(i=r!=null?u(p(r)):{},o(e||!r||!r.__esModule?t(i,\"default\",{value:r,enumerable:!0}):i,r)),b=r=>o(t({},\"__esModule\",{value:!0}),r);var c=y((q,d)=>{d.exports=_jsx_runtime});var j={};x(j,{default:()=>T,frontmatter:()=>f});var n=w(c()),f={title:\"useMediaQuery\",package:\"@incmix-ui/hooks\",description:\"React hook to detect media queries\"};function l(r){let e=Object.assign({p:\"p\",code:\"code\",a:\"a\",h2:\"h2\",pre:\"pre\",blockquote:\"blockquote\"},r.components);return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsxs)(e.p,{children:[(0,n.jsx)(e.code,{children:\"useMediaQuery\"}),` is a custom hook used to help detect whether a single media\nquery or multiple media queries individually match.`]}),`\n`,(0,n.jsx)(e.p,{children:(0,n.jsx)(e.a,{href:\"https://developer.mozilla.org/en-US/docs/Web/API/Window/matchMedia\",children:\"Learn more about the API and its backgrounds.\"})}),`\n`,(0,n.jsx)(e.h2,{id:\"import\",children:\"Import\"}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-js\",children:`import { useMediaQuery } from '@incmix-ui/react'\n`})}),`\n`,(0,n.jsx)(e.h2,{id:\"return-value\",children:\"Return value\"}),`\n`,(0,n.jsxs)(e.p,{children:[\"The \",(0,n.jsx)(e.code,{children:\"useMediaQuery\"}),` hook returns an array of booleans, indicating whether the\ngiven query matches or queries match.`]}),`\n`,(0,n.jsxs)(e.p,{children:[\"Why an array? \",(0,n.jsx)(e.code,{children:\"useMediaQuery\"}),` accepts both a string and an array of strings, but\nwill always return an array. This way, you can combine multiple media queries\nwhich will be individually matched in a single call.`]}),`\n`,(0,n.jsxs)(e.blockquote,{children:[`\n`,(0,n.jsxs)(e.p,{children:[`Keep in mind this API relies on the users browser support of\n`,(0,n.jsx)(e.code,{children:\"window.matchMedia\"}),\" and will always return \",(0,n.jsx)(e.code,{children:\"false\"}),` if it is not supported or\ndoes not exist (e.g. during serverside rendering).`]}),`\n`]}),`\n`,(0,n.jsx)(e.h2,{id:\"usage\",children:\"Usage\"}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-jsx\",children:`function Example() {\n  const [isLargerThan1280] = useMediaQuery('(min-width: 1280px)')\n\n  return <Text>{isLargerThan1280 ? 'larger than 1280px' : 'smaller than 1280px'}</Text>\n}\n`})}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-jsx\",children:`function Example() {\n  const [isLargerThanHD, isDisplayingInBrowser] = useMediaQuery(['(min-width: 1920px)', '(display-mode: browser)'])\n\n  function determineText() {\n    if (isLargerThanHD) {\n      return \\`high resolution you got there \\${isDisplayingInBrowser ? 'in your browser' : 'on your screen'}\\`\n    }\n\n    return isDisplayingInBrowser ? 'rendering in a browser' : 'rendering on something else, e.g. PWA'\n  }\n\n  return <Text>{determineText()}</Text>\n}\n`})})]})}function M(r={}){let{wrapper:e}=r.components||{};return e?(0,n.jsx)(e,Object.assign({},r,{children:(0,n.jsx)(l,r)})):l(r)}var T=M;return b(j);})();\n;return Component;"
  },
  "_id": "docs/hooks/use-media-query.mdx",
  "_raw": {
    "sourceFilePath": "docs/hooks/use-media-query.mdx",
    "sourceFileName": "use-media-query.mdx",
    "sourceFileDir": "docs/hooks",
    "contentType": "mdx",
    "flattenedPath": "docs/hooks/use-media-query"
  },
  "type": "Doc",
  "slug": "/docs/hooks/use-media-query",
  "frontMatter": {
    "title": "useMediaQuery",
    "package": "@incmix-ui/hooks",
    "description": "React hook to detect media queries",
    "slug": "/docs/hooks/use-media-query",
    "editUrl": "https://github.com/incmix-ui/incmix-ui-docs/tree/main/content/docs/hooks/use-media-query.mdx",
    "headings": [
      {
        "text": "Import",
        "id": "import",
        "level": "h2"
      },
      {
        "text": "Return value",
        "id": "return-value",
        "level": "h2"
      },
      {
        "text": "Usage",
        "id": "usage",
        "level": "h2"
      }
    ]
  }
}
