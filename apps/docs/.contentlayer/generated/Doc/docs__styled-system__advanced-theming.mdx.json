{
  "title": "Advanced Theming",
  "description": "Documentation for making advanced modifications to themes.",
  "scope": "usage",
  "category": "theming",
  "body": {
    "raw": "\nNow that you understand how to use Incmix UI theming API. Let's take a step\nfurther and see if we can adapt a component to color mode.\n\nWhen defining the styles for the `sizes` or `variants`, you can either pass a\nstyle object or a function that returns a style object.\n\n## Single Part Component\n\nFor a single part component like button, badge, etc. The style configuration has\nthe following signature:\n\n```tsx live=false\ntype StyleInterpolation = StyleObject | ((options: StyleOptions) => StyleObject)\n\ninterface StyleOptions {\n  theme: Theme\n  colorMode: 'light' | 'dark'\n  colorScheme: string\n}\n\ninterface StyleConfig {\n  baseStyle: StyleInterpolation\n  sizes: { [size: string]: StyleInterpolation }\n  variants: { [variant: string]: StyleInterpolation }\n  defaultProps?: {\n    variant: string\n    size: string\n  }\n}\n```\n\nFor example, to create a simple badge that changes its background based on color\nmode, here's how to go about it:\n\nimport {\n  App as AppSingleComponentStyle,\n  Index as IndexSingleComponentStyle,\n} from 'configs/sandpack-contents/single-component-style/custom-badge.js'\n\n<SandpackEmbed\n  dependencies={{\n    '@incmix-ui/theme-tools': '2.0.0',\n    react: '^18.0.0',\n    'react-dom': '^18.0.0',\n    'react-scripts': '^5.0.0',\n  }}\n  devDependencies={{\n    '@types/react': '^18.0.0',\n    '@types/react-dom': '^18.0.0',\n  }}\n  files={{\n    '/App.tsx': AppSingleComponentStyle,\n    '/index.tsx': IndexSingleComponentStyle,\n  }}\n/>\n\n## Multipart or Composite Component\n\nWhen it comes to multipart components for example tabs or menus etc, that have\nmultiple sub-parts, you can also style them based on the color mode. Here's the\nsignature:\n\n```tsx live=false\ntype StyleInterpolation =\n  | { [part: string]: SystemStyleObject }\n  | ((options: StyleOptions) => { [part: string]: SystemStyleObject })\n\ninterface StyleOptions {\n  theme: Theme\n  colorMode: 'light' | 'dark'\n  colorScheme: string\n}\n\ninterface StyleConfig {\n  baseStyle: StyleInterpolation\n  sizes: { [size: string]: StyleInterpolation }\n  variants: { [variant: string]: StyleInterpolation }\n  defaultProps?: {\n    variant: string\n    size: string\n  }\n}\n```\n\n## Distributing a Theme Package\n\nPublishing your theme to a package registry such as NPM is a great way to share\nyour theme across multiple projects or applications.\n\nA published theme package should export a theme object as either the `default`\nexport or an export named `theme`. For example, in\n`incmix-theme-package/src/index.js`:\n\n```js\nimport { extendTheme } from '@incmix-ui/react'\nconst theme = extendTheme({})\n\n// as default export\nexport default theme\n\n// as named export\nexport { theme }\n```\n\nSee\n[this guide](/docs/styled-system/customize-theme#scaling-out-your-project)\nfor more recommendations on how to structure your theme package.\n\n> Note ⚠️: If you're using TypeScript, you'll want to include some documentation\n> guiding consumers of your theme package to add a `postinstall` script to\n> generate typings for your theme. See the\n> [theme typings](/docs/styled-system/advanced-theming#theme-typings) section\n> for details.\n\n## Theme Typings\n\n<Badge fontSize=\"sm\" colorScheme=\"teal\" letterSpacing=\"wider\">\n  v1.2.0\n</Badge>\n\nWhen adding new components, component variations, sizes, colors and other theme\nfoundations, you can extend the internal theme typings to provide autocomplete\nfor your application theme.\n\nIf you want to learn how to scale your custom theme you can\n[follow this guide](/docs/styled-system/customize-theme#scaling-out-your-project).\n\n### Install\n\n```bash\nyarn add --dev @incmix-ui/cli\n```\n\nor\n\n```bash\nnpm install -D @incmix-ui/cli\n```\n\n### Usage\n\nFor a theme file:\n\n```bash\nincmix-cli tokens <path/to/your/theme.(js|ts)>\n```\n\nor, for a\n[theme package](/docs/styled-system/advanced-theming#distributing-a-theme-package):\n\n```bash\nincmix-cli tokens <@your-org/incmix-theme-package>\n```\n\nThe theme entrypoint file should export the theme object either as `default`\nexport or as named `theme` export.\n\n> Note 🚨: If you delete the `node_modules` directory, you'll need to re-run the\n> command to get proper typings again.\n\nFor convenience, you can add a `postinstall` script to your `package.json`, so\nyou don't have to think about this every time you reinstall your dependencies.\n\n```json\n\"scripts\": {\n  \"gen:theme-typings\": \"incmix-cli tokens <path/to/your/theme.(js|ts)>\",\n  \"postinstall\": \"npm run gen:theme-typings\"\n},\n\"devDependencies\": {\n  \"@incmix-ui/cli\": \"^1.1.0\"\n}\n```\n\nThe autocomplete for theme token **only works in _Visual Studio Code_ for now**.\nWe'd love to support JetBrains IDEs, but we have to wait for them to improve\ntheir TypeScript support.\n\nPlease note that the CLI cannot read non-JavaScript/TypeScript files. If you\nimport other file types (`.css`, `.woff` or `.svg`) in your theme file, you'll\nneed to move those imports out of the theme file.\n",
    "code": "var Component=(()=>{var f=Object.create;var s=Object.defineProperty;var x=Object.getOwnPropertyDescriptor;var b=Object.getOwnPropertyNames;var S=Object.getPrototypeOf,v=Object.prototype.hasOwnProperty;var c=(t,e)=>()=>(e||t((e={exports:{}}).exports,e),e.exports),k=(t,e)=>{for(var o in e)s(t,o,{get:e[o],enumerable:!0})},l=(t,e,o,r)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let i of b(e))!v.call(t,i)&&i!==o&&s(t,i,{get:()=>e[i],enumerable:!(r=x(e,i))||r.enumerable});return t};var d=(t,e,o)=>(o=t!=null?f(S(t)):{},l(e||!t||!t.__esModule?s(o,\"default\",{value:t,enumerable:!0}):o,t)),C=t=>l(s({},\"__esModule\",{value:!0}),t);var p=c((P,m)=>{m.exports=_jsx_runtime});var u=c((_,h)=>{h.exports={App:`import React from \"react\";\nimport {\n  Button,\n  Flex,\n  useColorMode,\n  extendTheme,\n  useStyleConfig,\n  forwardRef,\n  incmix,\n  HTMLIncmixProps,\n  ThemingProps\n} from \"@incmix-ui/react\";\nimport { StyleConfig } from \"@incmix-ui/theme-tools\";\n\n// 1. define component configuration\nconst components: Record<string, StyleConfig> = {\n  CustomBadge: {\n    baseStyle: ({ colorMode }) => ({\n      bg: colorMode === \"dark\" ? \"green.300\" : \"green.500\",\n      color: colorMode === \"dark\" ? \"gray.800\" : \"white\",\n      textTransform: \"uppercase\",\n      fontWeight: \"semibold\",\n      letterSpacing: \"0.02em\",\n      padding: \"4px\",\n      borderRadius: \"2px\",\n      fontSize: \"12px\"\n    }),\n    variants: {\n      custom: ({ colorMode }) => ({\n        bg: colorMode === \"dark\" ? \"blue.200\" : \"blue.500\",\n        padding: \"8px\"\n      })\n    }\n  }\n};\n\n// 2. Call 'extendTheme' and pass your custom values\nexport const customTheme = extendTheme({ components });\n\nexport interface CustomBadgeProps\n  extends HTMLIncmixProps<\"span\">,\n    ThemingProps {}\n\n// 3. Use it in your components\nconst CustomBadge = forwardRef<CustomBadgeProps, \"span\">((props, ref) => {\n  const { size, variant, ...rest } = props;\n  const styles = useStyleConfig(\"CustomBadge\", { size, variant });\n\n  return <incmix.span ref={ref} __css={styles} {...rest} />;\n});\n\nexport default function App() {\n  const { toggleColorMode } = useColorMode();\n  return (\n    <>\n      <Flex\n        height=\"100vh\"\n        direction=\"column\"\n        justifyContent=\"center\"\n        alignItems=\"center\"\n      >\n        {/* Remove the variant to see the other custom styling */}\n        <CustomBadge variant=\"custom\">I am a custom badge</CustomBadge>\n        <Button onClick={toggleColorMode} mt={6}>\n          Toggle Color Mode\n        </Button>\n      </Flex>\n    </>\n  );\n}`,Index:`import { IncmixProvider } from \"@incmix-ui/react\";\nimport { createRoot } from \"react-dom/client\";\n\nimport App, { customTheme } from \"./App\";\n\nconst rootElement = document.getElementById(\"root\");\nconst root = createRoot(rootElement!);\nroot.render(\n  <IncmixProvider theme={customTheme}>\n    <App />\n  </IncmixProvider>\n);\n`}});var w={};k(w,{default:()=>T,frontmatter:()=>I});var n=d(p()),a=d(u()),I={title:\"Advanced Theming\",description:\"Documentation for making advanced modifications to themes.\",category:\"theming\"};function g(t){let e=Object.assign({p:\"p\",code:\"code\",h2:\"h2\",pre:\"pre\",a:\"a\",blockquote:\"blockquote\",h3:\"h3\",strong:\"strong\",em:\"em\"},t.components),{SandpackEmbed:o,Badge:r}=e;return r||y(\"Badge\",!0,\"123:1-125:9\"),o||y(\"SandpackEmbed\",!0,\"46:1-61:3\"),(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(e.p,{children:`Now that you understand how to use Incmix UI theming API. Let's take a step\nfurther and see if we can adapt a component to color mode.`}),`\n`,(0,n.jsxs)(e.p,{children:[\"When defining the styles for the \",(0,n.jsx)(e.code,{children:\"sizes\"}),\" or \",(0,n.jsx)(e.code,{children:\"variants\"}),`, you can either pass a\nstyle object or a function that returns a style object.`]}),`\n`,(0,n.jsx)(e.h2,{id:\"single-part-component\",children:\"Single Part Component\"}),`\n`,(0,n.jsx)(e.p,{children:`For a single part component like button, badge, etc. The style configuration has\nthe following signature:`}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-tsx\",live:\"false\",children:`type StyleInterpolation = StyleObject | ((options: StyleOptions) => StyleObject)\n\ninterface StyleOptions {\n  theme: Theme\n  colorMode: 'light' | 'dark'\n  colorScheme: string\n}\n\ninterface StyleConfig {\n  baseStyle: StyleInterpolation\n  sizes: { [size: string]: StyleInterpolation }\n  variants: { [variant: string]: StyleInterpolation }\n  defaultProps?: {\n    variant: string\n    size: string\n  }\n}\n`})}),`\n`,(0,n.jsx)(e.p,{children:`For example, to create a simple badge that changes its background based on color\nmode, here's how to go about it:`}),`\n`,`\n`,(0,n.jsx)(o,{dependencies:{\"@incmix-ui/theme-tools\":\"2.0.0\",react:\"^18.0.0\",\"react-dom\":\"^18.0.0\",\"react-scripts\":\"^5.0.0\"},devDependencies:{\"@types/react\":\"^18.0.0\",\"@types/react-dom\":\"^18.0.0\"},files:{\"/App.tsx\":a.App,\"/index.tsx\":a.Index}}),`\n`,(0,n.jsx)(e.h2,{id:\"multipart-or-composite-component\",children:\"Multipart or Composite Component\"}),`\n`,(0,n.jsx)(e.p,{children:`When it comes to multipart components for example tabs or menus etc, that have\nmultiple sub-parts, you can also style them based on the color mode. Here's the\nsignature:`}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-tsx\",live:\"false\",children:`type StyleInterpolation =\n  | { [part: string]: SystemStyleObject }\n  | ((options: StyleOptions) => { [part: string]: SystemStyleObject })\n\ninterface StyleOptions {\n  theme: Theme\n  colorMode: 'light' | 'dark'\n  colorScheme: string\n}\n\ninterface StyleConfig {\n  baseStyle: StyleInterpolation\n  sizes: { [size: string]: StyleInterpolation }\n  variants: { [variant: string]: StyleInterpolation }\n  defaultProps?: {\n    variant: string\n    size: string\n  }\n}\n`})}),`\n`,(0,n.jsx)(e.h2,{id:\"distributing-a-theme-package\",children:\"Distributing a Theme Package\"}),`\n`,(0,n.jsx)(e.p,{children:`Publishing your theme to a package registry such as NPM is a great way to share\nyour theme across multiple projects or applications.`}),`\n`,(0,n.jsxs)(e.p,{children:[\"A published theme package should export a theme object as either the \",(0,n.jsx)(e.code,{children:\"default\"}),`\nexport or an export named `,(0,n.jsx)(e.code,{children:\"theme\"}),`. For example, in\n`,(0,n.jsx)(e.code,{children:\"incmix-theme-package/src/index.js\"}),\":\"]}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-js\",children:`import { extendTheme } from '@incmix-ui/react'\nconst theme = extendTheme({})\n\n// as default export\nexport default theme\n\n// as named export\nexport { theme }\n`})}),`\n`,(0,n.jsxs)(e.p,{children:[`See\n`,(0,n.jsx)(e.a,{href:\"/docs/styled-system/customize-theme#scaling-out-your-project\",children:\"this guide\"}),`\nfor more recommendations on how to structure your theme package.`]}),`\n`,(0,n.jsxs)(e.blockquote,{children:[`\n`,(0,n.jsxs)(e.p,{children:[`Note \\u26A0\\uFE0F: If you're using TypeScript, you'll want to include some documentation\nguiding consumers of your theme package to add a `,(0,n.jsx)(e.code,{children:\"postinstall\"}),` script to\ngenerate typings for your theme. See the\n`,(0,n.jsx)(e.a,{href:\"/docs/styled-system/advanced-theming#theme-typings\",children:\"theme typings\"}),` section\nfor details.`]}),`\n`]}),`\n`,(0,n.jsx)(e.h2,{id:\"theme-typings\",children:\"Theme Typings\"}),`\n`,(0,n.jsx)(r,{fontSize:\"sm\",colorScheme:\"teal\",letterSpacing:\"wider\",children:(0,n.jsx)(e.p,{children:\"v1.2.0\"})}),`\n`,(0,n.jsx)(e.p,{children:`When adding new components, component variations, sizes, colors and other theme\nfoundations, you can extend the internal theme typings to provide autocomplete\nfor your application theme.`}),`\n`,(0,n.jsxs)(e.p,{children:[`If you want to learn how to scale your custom theme you can\n`,(0,n.jsx)(e.a,{href:\"/docs/styled-system/customize-theme#scaling-out-your-project\",children:\"follow this guide\"}),\".\"]}),`\n`,(0,n.jsx)(e.h3,{id:\"install\",children:\"Install\"}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-bash\",children:`yarn add --dev @incmix-ui/cli\n`})}),`\n`,(0,n.jsx)(e.p,{children:\"or\"}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-bash\",children:`npm install -D @incmix-ui/cli\n`})}),`\n`,(0,n.jsx)(e.h3,{id:\"usage\",children:\"Usage\"}),`\n`,(0,n.jsx)(e.p,{children:\"For a theme file:\"}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-bash\",children:`incmix-cli tokens <path/to/your/theme.(js|ts)>\n`})}),`\n`,(0,n.jsxs)(e.p,{children:[`or, for a\n`,(0,n.jsx)(e.a,{href:\"/docs/styled-system/advanced-theming#distributing-a-theme-package\",children:\"theme package\"}),\":\"]}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-bash\",children:`incmix-cli tokens <@your-org/incmix-theme-package>\n`})}),`\n`,(0,n.jsxs)(e.p,{children:[\"The theme entrypoint file should export the theme object either as \",(0,n.jsx)(e.code,{children:\"default\"}),`\nexport or as named `,(0,n.jsx)(e.code,{children:\"theme\"}),\" export.\"]}),`\n`,(0,n.jsxs)(e.blockquote,{children:[`\n`,(0,n.jsxs)(e.p,{children:[\"Note \\u{1F6A8}: If you delete the \",(0,n.jsx)(e.code,{children:\"node_modules\"}),` directory, you'll need to re-run the\ncommand to get proper typings again.`]}),`\n`]}),`\n`,(0,n.jsxs)(e.p,{children:[\"For convenience, you can add a \",(0,n.jsx)(e.code,{children:\"postinstall\"}),\" script to your \",(0,n.jsx)(e.code,{children:\"package.json\"}),`, so\nyou don't have to think about this every time you reinstall your dependencies.`]}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-json\",children:`\"scripts\": {\n  \"gen:theme-typings\": \"incmix-cli tokens <path/to/your/theme.(js|ts)>\",\n  \"postinstall\": \"npm run gen:theme-typings\"\n},\n\"devDependencies\": {\n  \"@incmix-ui/cli\": \"^1.1.0\"\n}\n`})}),`\n`,(0,n.jsxs)(e.p,{children:[\"The autocomplete for theme token \",(0,n.jsxs)(e.strong,{children:[\"only works in \",(0,n.jsx)(e.em,{children:\"Visual Studio Code\"}),\" for now\"]}),`.\nWe'd love to support JetBrains IDEs, but we have to wait for them to improve\ntheir TypeScript support.`]}),`\n`,(0,n.jsxs)(e.p,{children:[`Please note that the CLI cannot read non-JavaScript/TypeScript files. If you\nimport other file types (`,(0,n.jsx)(e.code,{children:\".css\"}),\", \",(0,n.jsx)(e.code,{children:\".woff\"}),\" or \",(0,n.jsx)(e.code,{children:\".svg\"}),`) in your theme file, you'll\nneed to move those imports out of the theme file.`]})]})}function j(t={}){let{wrapper:e}=t.components||{};return e?(0,n.jsx)(e,Object.assign({},t,{children:(0,n.jsx)(g,t)})):g(t)}var T=j;function y(t,e,o){throw new Error(\"Expected \"+(e?\"component\":\"object\")+\" `\"+t+\"` to be defined: you likely forgot to import, pass, or provide it.\"+(o?\"\\nIt\\u2019s referenced in your code at `\"+o+\"` in `/Users/uma.krishnan/projects/incmixlabs/incmix-ui/apps/docs/content/_mdx_bundler_entry_point-6b3cb70b-19d7-459e-af4a-001075e1677a.mdx`\":\"\"))}return C(w);})();\n;return Component;"
  },
  "_id": "docs/styled-system/advanced-theming.mdx",
  "_raw": {
    "sourceFilePath": "docs/styled-system/advanced-theming.mdx",
    "sourceFileName": "advanced-theming.mdx",
    "sourceFileDir": "docs/styled-system",
    "contentType": "mdx",
    "flattenedPath": "docs/styled-system/advanced-theming"
  },
  "type": "Doc",
  "slug": "/docs/styled-system/advanced-theming",
  "frontMatter": {
    "title": "Advanced Theming",
    "description": "Documentation for making advanced modifications to themes.",
    "slug": "/docs/styled-system/advanced-theming",
    "editUrl": "https://github.com/incmix-ui/incmix-ui-docs/tree/main/content/docs/styled-system/advanced-theming.mdx",
    "headings": [
      {
        "text": "Single Part Component",
        "id": "single-part-component",
        "level": "h2"
      },
      {
        "text": "Multipart or Composite Component",
        "id": "multipart-or-composite-component",
        "level": "h2"
      },
      {
        "text": "Distributing a Theme Package",
        "id": "distributing-a-theme-package",
        "level": "h2"
      },
      {
        "text": "Theme Typings",
        "id": "theme-typings",
        "level": "h2"
      },
      {
        "text": "Install",
        "id": "install",
        "level": "h3"
      },
      {
        "text": "Usage",
        "id": "usage",
        "level": "h3"
      }
    ]
  }
}
