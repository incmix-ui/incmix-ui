[
  {
    "title": "Advanced Theming",
    "description": "Documentation for making advanced modifications to themes.",
    "scope": "usage",
    "category": "theming",
    "body": {
      "raw": "\nNow that you understand how to use Incmix UI theming API. Let's take a step\nfurther and see if we can adapt a component to color mode.\n\nWhen defining the styles for the `sizes` or `variants`, you can either pass a\nstyle object or a function that returns a style object.\n\n## Single Part Component\n\nFor a single part component like button, badge, etc. The style configuration has\nthe following signature:\n\n```tsx live=false\ntype StyleInterpolation = StyleObject | ((options: StyleOptions) => StyleObject)\n\ninterface StyleOptions {\n  theme: Theme\n  colorMode: 'light' | 'dark'\n  colorScheme: string\n}\n\ninterface StyleConfig {\n  baseStyle: StyleInterpolation\n  sizes: { [size: string]: StyleInterpolation }\n  variants: { [variant: string]: StyleInterpolation }\n  defaultProps?: {\n    variant: string\n    size: string\n  }\n}\n```\n\nFor example, to create a simple badge that changes its background based on color\nmode, here's how to go about it:\n\nimport {\n  App as AppSingleComponentStyle,\n  Index as IndexSingleComponentStyle,\n} from 'configs/sandpack-contents/single-component-style/custom-badge.js'\n\n<SandpackEmbed\n  dependencies={{\n    '@incmix-ui/theme-tools': '2.0.0',\n    react: '^18.0.0',\n    'react-dom': '^18.0.0',\n    'react-scripts': '^5.0.0',\n  }}\n  devDependencies={{\n    '@types/react': '^18.0.0',\n    '@types/react-dom': '^18.0.0',\n  }}\n  files={{\n    '/App.tsx': AppSingleComponentStyle,\n    '/index.tsx': IndexSingleComponentStyle,\n  }}\n/>\n\n## Multipart or Composite Component\n\nWhen it comes to multipart components for example tabs or menus etc, that have\nmultiple sub-parts, you can also style them based on the color mode. Here's the\nsignature:\n\n```tsx live=false\ntype StyleInterpolation =\n  | { [part: string]: SystemStyleObject }\n  | ((options: StyleOptions) => { [part: string]: SystemStyleObject })\n\ninterface StyleOptions {\n  theme: Theme\n  colorMode: 'light' | 'dark'\n  colorScheme: string\n}\n\ninterface StyleConfig {\n  baseStyle: StyleInterpolation\n  sizes: { [size: string]: StyleInterpolation }\n  variants: { [variant: string]: StyleInterpolation }\n  defaultProps?: {\n    variant: string\n    size: string\n  }\n}\n```\n\n## Distributing a Theme Package\n\nPublishing your theme to a package registry such as NPM is a great way to share\nyour theme across multiple projects or applications.\n\nA published theme package should export a theme object as either the `default`\nexport or an export named `theme`. For example, in\n`incmix-theme-package/src/index.js`:\n\n```js\nimport { extendTheme } from '@incmix-ui/react'\nconst theme = extendTheme({})\n\n// as default export\nexport default theme\n\n// as named export\nexport { theme }\n```\n\nSee\n[this guide](/docs/styled-system/customize-theme#scaling-out-your-project)\nfor more recommendations on how to structure your theme package.\n\n> Note ⚠️: If you're using TypeScript, you'll want to include some documentation\n> guiding consumers of your theme package to add a `postinstall` script to\n> generate typings for your theme. See the\n> [theme typings](/docs/styled-system/advanced-theming#theme-typings) section\n> for details.\n\n## Theme Typings\n\n<Badge fontSize=\"sm\" colorScheme=\"teal\" letterSpacing=\"wider\">\n  v1.2.0\n</Badge>\n\nWhen adding new components, component variations, sizes, colors and other theme\nfoundations, you can extend the internal theme typings to provide autocomplete\nfor your application theme.\n\nIf you want to learn how to scale your custom theme you can\n[follow this guide](/docs/styled-system/customize-theme#scaling-out-your-project).\n\n### Install\n\n```bash\nyarn add --dev @incmix-ui/cli\n```\n\nor\n\n```bash\nnpm install -D @incmix-ui/cli\n```\n\n### Usage\n\nFor a theme file:\n\n```bash\nincmix-cli tokens <path/to/your/theme.(js|ts)>\n```\n\nor, for a\n[theme package](/docs/styled-system/advanced-theming#distributing-a-theme-package):\n\n```bash\nincmix-cli tokens <@your-org/incmix-theme-package>\n```\n\nThe theme entrypoint file should export the theme object either as `default`\nexport or as named `theme` export.\n\n> Note 🚨: If you delete the `node_modules` directory, you'll need to re-run the\n> command to get proper typings again.\n\nFor convenience, you can add a `postinstall` script to your `package.json`, so\nyou don't have to think about this every time you reinstall your dependencies.\n\n```json\n\"scripts\": {\n  \"gen:theme-typings\": \"incmix-cli tokens <path/to/your/theme.(js|ts)>\",\n  \"postinstall\": \"npm run gen:theme-typings\"\n},\n\"devDependencies\": {\n  \"@incmix-ui/cli\": \"^1.1.0\"\n}\n```\n\nThe autocomplete for theme token **only works in _Visual Studio Code_ for now**.\nWe'd love to support JetBrains IDEs, but we have to wait for them to improve\ntheir TypeScript support.\n\nPlease note that the CLI cannot read non-JavaScript/TypeScript files. If you\nimport other file types (`.css`, `.woff` or `.svg`) in your theme file, you'll\nneed to move those imports out of the theme file.\n",
      "code": "var Component=(()=>{var f=Object.create;var s=Object.defineProperty;var x=Object.getOwnPropertyDescriptor;var b=Object.getOwnPropertyNames;var S=Object.getPrototypeOf,v=Object.prototype.hasOwnProperty;var c=(n,e)=>()=>(e||n((e={exports:{}}).exports,e),e.exports),k=(n,e)=>{for(var o in e)s(n,o,{get:e[o],enumerable:!0})},l=(n,e,o,r)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let i of b(e))!v.call(n,i)&&i!==o&&s(n,i,{get:()=>e[i],enumerable:!(r=x(e,i))||r.enumerable});return n};var d=(n,e,o)=>(o=n!=null?f(S(n)):{},l(e||!n||!n.__esModule?s(o,\"default\",{value:n,enumerable:!0}):o,n)),C=n=>l(s({},\"__esModule\",{value:!0}),n);var p=c((P,m)=>{m.exports=_jsx_runtime});var u=c((z,h)=>{h.exports={App:`import React from \"react\";\nimport {\n  Button,\n  Flex,\n  useColorMode,\n  extendTheme,\n  useStyleConfig,\n  forwardRef,\n  incmix,\n  HTMLIncmixProps,\n  ThemingProps\n} from \"@incmix-ui/react\";\nimport { StyleConfig } from \"@incmix-ui/theme-tools\";\n\n// 1. define component configuration\nconst components: Record<string, StyleConfig> = {\n  CustomBadge: {\n    baseStyle: ({ colorMode }) => ({\n      bg: colorMode === \"dark\" ? \"green.300\" : \"green.500\",\n      color: colorMode === \"dark\" ? \"gray.800\" : \"white\",\n      textTransform: \"uppercase\",\n      fontWeight: \"semibold\",\n      letterSpacing: \"0.02em\",\n      padding: \"4px\",\n      borderRadius: \"2px\",\n      fontSize: \"12px\"\n    }),\n    variants: {\n      custom: ({ colorMode }) => ({\n        bg: colorMode === \"dark\" ? \"blue.200\" : \"blue.500\",\n        padding: \"8px\"\n      })\n    }\n  }\n};\n\n// 2. Call 'extendTheme' and pass your custom values\nexport const customTheme = extendTheme({ components });\n\nexport interface CustomBadgeProps\n  extends HTMLIncmixProps<\"span\">,\n    ThemingProps {}\n\n// 3. Use it in your components\nconst CustomBadge = forwardRef<CustomBadgeProps, \"span\">((props, ref) => {\n  const { size, variant, ...rest } = props;\n  const styles = useStyleConfig(\"CustomBadge\", { size, variant });\n\n  return <incmix.span ref={ref} __css={styles} {...rest} />;\n});\n\nexport default function App() {\n  const { toggleColorMode } = useColorMode();\n  return (\n    <>\n      <Flex\n        height=\"100vh\"\n        direction=\"column\"\n        justifyContent=\"center\"\n        alignItems=\"center\"\n      >\n        {/* Remove the variant to see the other custom styling */}\n        <CustomBadge variant=\"custom\">I am a custom badge</CustomBadge>\n        <Button onClick={toggleColorMode} mt={6}>\n          Toggle Color Mode\n        </Button>\n      </Flex>\n    </>\n  );\n}`,Index:`import { IncmixProvider } from \"@incmix-ui/react\";\nimport { createRoot } from \"react-dom/client\";\n\nimport App, { customTheme } from \"./App\";\n\nconst rootElement = document.getElementById(\"root\");\nconst root = createRoot(rootElement!);\nroot.render(\n  <IncmixProvider theme={customTheme}>\n    <App />\n  </IncmixProvider>\n);\n`}});var w={};k(w,{default:()=>T,frontmatter:()=>I});var t=d(p()),a=d(u()),I={title:\"Advanced Theming\",description:\"Documentation for making advanced modifications to themes.\",category:\"theming\"};function g(n){let e=Object.assign({p:\"p\",code:\"code\",h2:\"h2\",pre:\"pre\",a:\"a\",blockquote:\"blockquote\",h3:\"h3\",strong:\"strong\",em:\"em\"},n.components),{SandpackEmbed:o,Badge:r}=e;return r||y(\"Badge\",!0),o||y(\"SandpackEmbed\",!0),(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(e.p,{children:`Now that you understand how to use Incmix UI theming API. Let's take a step\nfurther and see if we can adapt a component to color mode.`}),`\n`,(0,t.jsxs)(e.p,{children:[\"When defining the styles for the \",(0,t.jsx)(e.code,{children:\"sizes\"}),\" or \",(0,t.jsx)(e.code,{children:\"variants\"}),`, you can either pass a\nstyle object or a function that returns a style object.`]}),`\n`,(0,t.jsx)(e.h2,{id:\"single-part-component\",children:\"Single Part Component\"}),`\n`,(0,t.jsx)(e.p,{children:`For a single part component like button, badge, etc. The style configuration has\nthe following signature:`}),`\n`,(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:\"language-tsx\",live:\"false\",children:`type StyleInterpolation = StyleObject | ((options: StyleOptions) => StyleObject)\n\ninterface StyleOptions {\n  theme: Theme\n  colorMode: 'light' | 'dark'\n  colorScheme: string\n}\n\ninterface StyleConfig {\n  baseStyle: StyleInterpolation\n  sizes: { [size: string]: StyleInterpolation }\n  variants: { [variant: string]: StyleInterpolation }\n  defaultProps?: {\n    variant: string\n    size: string\n  }\n}\n`})}),`\n`,(0,t.jsx)(e.p,{children:`For example, to create a simple badge that changes its background based on color\nmode, here's how to go about it:`}),`\n`,`\n`,(0,t.jsx)(o,{dependencies:{\"@incmix-ui/theme-tools\":\"2.0.0\",react:\"^18.0.0\",\"react-dom\":\"^18.0.0\",\"react-scripts\":\"^5.0.0\"},devDependencies:{\"@types/react\":\"^18.0.0\",\"@types/react-dom\":\"^18.0.0\"},files:{\"/App.tsx\":a.App,\"/index.tsx\":a.Index}}),`\n`,(0,t.jsx)(e.h2,{id:\"multipart-or-composite-component\",children:\"Multipart or Composite Component\"}),`\n`,(0,t.jsx)(e.p,{children:`When it comes to multipart components for example tabs or menus etc, that have\nmultiple sub-parts, you can also style them based on the color mode. Here's the\nsignature:`}),`\n`,(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:\"language-tsx\",live:\"false\",children:`type StyleInterpolation =\n  | { [part: string]: SystemStyleObject }\n  | ((options: StyleOptions) => { [part: string]: SystemStyleObject })\n\ninterface StyleOptions {\n  theme: Theme\n  colorMode: 'light' | 'dark'\n  colorScheme: string\n}\n\ninterface StyleConfig {\n  baseStyle: StyleInterpolation\n  sizes: { [size: string]: StyleInterpolation }\n  variants: { [variant: string]: StyleInterpolation }\n  defaultProps?: {\n    variant: string\n    size: string\n  }\n}\n`})}),`\n`,(0,t.jsx)(e.h2,{id:\"distributing-a-theme-package\",children:\"Distributing a Theme Package\"}),`\n`,(0,t.jsx)(e.p,{children:`Publishing your theme to a package registry such as NPM is a great way to share\nyour theme across multiple projects or applications.`}),`\n`,(0,t.jsxs)(e.p,{children:[\"A published theme package should export a theme object as either the \",(0,t.jsx)(e.code,{children:\"default\"}),`\nexport or an export named `,(0,t.jsx)(e.code,{children:\"theme\"}),`. For example, in\n`,(0,t.jsx)(e.code,{children:\"incmix-theme-package/src/index.js\"}),\":\"]}),`\n`,(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:\"language-js\",children:`import { extendTheme } from '@incmix-ui/react'\nconst theme = extendTheme({})\n\n// as default export\nexport default theme\n\n// as named export\nexport { theme }\n`})}),`\n`,(0,t.jsxs)(e.p,{children:[`See\n`,(0,t.jsx)(e.a,{href:\"/docs/styled-system/customize-theme#scaling-out-your-project\",children:\"this guide\"}),`\nfor more recommendations on how to structure your theme package.`]}),`\n`,(0,t.jsxs)(e.blockquote,{children:[`\n`,(0,t.jsxs)(e.p,{children:[`Note \\u26A0\\uFE0F: If you're using TypeScript, you'll want to include some documentation\nguiding consumers of your theme package to add a `,(0,t.jsx)(e.code,{children:\"postinstall\"}),` script to\ngenerate typings for your theme. See the\n`,(0,t.jsx)(e.a,{href:\"/docs/styled-system/advanced-theming#theme-typings\",children:\"theme typings\"}),` section\nfor details.`]}),`\n`]}),`\n`,(0,t.jsx)(e.h2,{id:\"theme-typings\",children:\"Theme Typings\"}),`\n`,(0,t.jsx)(r,{fontSize:\"sm\",colorScheme:\"teal\",letterSpacing:\"wider\",children:(0,t.jsx)(e.p,{children:\"v1.2.0\"})}),`\n`,(0,t.jsx)(e.p,{children:`When adding new components, component variations, sizes, colors and other theme\nfoundations, you can extend the internal theme typings to provide autocomplete\nfor your application theme.`}),`\n`,(0,t.jsxs)(e.p,{children:[`If you want to learn how to scale your custom theme you can\n`,(0,t.jsx)(e.a,{href:\"/docs/styled-system/customize-theme#scaling-out-your-project\",children:\"follow this guide\"}),\".\"]}),`\n`,(0,t.jsx)(e.h3,{id:\"install\",children:\"Install\"}),`\n`,(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:\"language-bash\",children:`yarn add --dev @incmix-ui/cli\n`})}),`\n`,(0,t.jsx)(e.p,{children:\"or\"}),`\n`,(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:\"language-bash\",children:`npm install -D @incmix-ui/cli\n`})}),`\n`,(0,t.jsx)(e.h3,{id:\"usage\",children:\"Usage\"}),`\n`,(0,t.jsx)(e.p,{children:\"For a theme file:\"}),`\n`,(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:\"language-bash\",children:`incmix-cli tokens <path/to/your/theme.(js|ts)>\n`})}),`\n`,(0,t.jsxs)(e.p,{children:[`or, for a\n`,(0,t.jsx)(e.a,{href:\"/docs/styled-system/advanced-theming#distributing-a-theme-package\",children:\"theme package\"}),\":\"]}),`\n`,(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:\"language-bash\",children:`incmix-cli tokens <@your-org/incmix-theme-package>\n`})}),`\n`,(0,t.jsxs)(e.p,{children:[\"The theme entrypoint file should export the theme object either as \",(0,t.jsx)(e.code,{children:\"default\"}),`\nexport or as named `,(0,t.jsx)(e.code,{children:\"theme\"}),\" export.\"]}),`\n`,(0,t.jsxs)(e.blockquote,{children:[`\n`,(0,t.jsxs)(e.p,{children:[\"Note \\u{1F6A8}: If you delete the \",(0,t.jsx)(e.code,{children:\"node_modules\"}),` directory, you'll need to re-run the\ncommand to get proper typings again.`]}),`\n`]}),`\n`,(0,t.jsxs)(e.p,{children:[\"For convenience, you can add a \",(0,t.jsx)(e.code,{children:\"postinstall\"}),\" script to your \",(0,t.jsx)(e.code,{children:\"package.json\"}),`, so\nyou don't have to think about this every time you reinstall your dependencies.`]}),`\n`,(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:\"language-json\",children:`\"scripts\": {\n  \"gen:theme-typings\": \"incmix-cli tokens <path/to/your/theme.(js|ts)>\",\n  \"postinstall\": \"npm run gen:theme-typings\"\n},\n\"devDependencies\": {\n  \"@incmix-ui/cli\": \"^1.1.0\"\n}\n`})}),`\n`,(0,t.jsxs)(e.p,{children:[\"The autocomplete for theme token \",(0,t.jsxs)(e.strong,{children:[\"only works in \",(0,t.jsx)(e.em,{children:\"Visual Studio Code\"}),\" for now\"]}),`.\nWe'd love to support JetBrains IDEs, but we have to wait for them to improve\ntheir TypeScript support.`]}),`\n`,(0,t.jsxs)(e.p,{children:[`Please note that the CLI cannot read non-JavaScript/TypeScript files. If you\nimport other file types (`,(0,t.jsx)(e.code,{children:\".css\"}),\", \",(0,t.jsx)(e.code,{children:\".woff\"}),\" or \",(0,t.jsx)(e.code,{children:\".svg\"}),`) in your theme file, you'll\nneed to move those imports out of the theme file.`]})]})}function j(n={}){let{wrapper:e}=n.components||{};return e?(0,t.jsx)(e,Object.assign({},n,{children:(0,t.jsx)(g,n)})):g(n)}var T=j;function y(n,e){throw new Error(\"Expected \"+(e?\"component\":\"object\")+\" `\"+n+\"` to be defined: you likely forgot to import, pass, or provide it.\")}return C(w);})();\n;return Component;"
    },
    "_id": "docs/styled-system/advanced-theming.mdx",
    "_raw": {
      "sourceFilePath": "docs/styled-system/advanced-theming.mdx",
      "sourceFileName": "advanced-theming.mdx",
      "sourceFileDir": "docs/styled-system",
      "contentType": "mdx",
      "flattenedPath": "docs/styled-system/advanced-theming"
    },
    "type": "Doc",
    "slug": "/docs/styled-system/advanced-theming",
    "frontMatter": {
      "title": "Advanced Theming",
      "description": "Documentation for making advanced modifications to themes.",
      "slug": "/docs/styled-system/advanced-theming",
      "editUrl": "https://github.com/incmix-ui/incmix-ui-docs/tree/main/content/docs/styled-system/advanced-theming.mdx",
      "headings": [
        {
          "text": "Single Part Component",
          "id": "single-part-component",
          "level": "h2"
        },
        {
          "text": "Multipart or Composite Component",
          "id": "multipart-or-composite-component",
          "level": "h2"
        },
        {
          "text": "Distributing a Theme Package",
          "id": "distributing-a-theme-package",
          "level": "h2"
        },
        {
          "text": "Theme Typings",
          "id": "theme-typings",
          "level": "h2"
        },
        {
          "text": "Install",
          "id": "install",
          "level": "h3"
        },
        {
          "text": "Usage",
          "id": "usage",
          "level": "h3"
        }
      ]
    }
  },
  {
    "title": "Incmix Factory",
    "package": "@incmix-ui/system",
    "description": "Using the incmix factory and elements",
    "scope": "usage",
    "category": "features",
    "body": {
      "raw": "\nIncmix factory serves as an **object of incmix enabled JSX elements**, and also\n**a function that can be used to enable custom component** receive incmix's\nstyle props.\n\n```bash\nimport { incmix } from \"@incmix-ui/react\"\n```\n\n## Incmix JSX Elements\n\nCreate base html elements with theme-aware style props using `incmix.<element>`\nnotation. For example, if you want a plain html button with ability to pass\nincmix styles, you can write `<incmix.button />`.\n\n```jsx\n<incmix.button px=\"3\" py=\"2\" bg=\"green.200\" rounded=\"md\" _hover={{ bg: 'green.300' }}>\n  Click me\n</incmix.button>\n```\n\nThis reduces the need to create custom component wrappers and name them. This\nsyntax is available for common html elements. See the reference for the full\n[list of elements](https://github.com/incmix-ui/incmix-ui/blob/main/packages/system/src/system.utils.ts#L9)\nsupported.\n\n```jsx live=false\n<incmix.h1 fontSize=\"lg\"> Heading </incmix.h1>\n```\n\n## Incmix factory function\n\nThis is a function that converts **non-incmix components** or **jsx element** to\nincmix-enabled components so you can pass style props to them.\n\nConsider a package called `react-input-autoresize`, let's use the incmix factory\nfunction to make possible to pass style props.\n\nThe function will infer the prop types from the wrapped component and also add\nincmix style props.\n\n```jsx live=false\nimport { incmix } from '@incmix-ui/react'\nimport Textarea from 'react-input-autoresize'\n\nconst AutoResizeInput = incmix(Textarea)\n\nfunction Example() {\n  return <AutoResizeInput bg=\"red.200\" fontSize=\"12px\" />\n}\n```\n\n> Considering that Incmix uses `emotion` under the hood, ensure the non-incmix\n> component accepts `className` as props for this to work correctly\n\n### Attaching styles\n\nIn some instances, you might need to attach specific styles to the component\nwrapped in the incmix factory\n\n```jsx live=false\nconst AutoResizeInput = incmix(AutoResizeInput, {\n  baseStyle: {\n    bg: 'papayawhip',\n    color: 'red.500',\n  },\n})\n```\n\nYou can also use the incmix factory on jsx elements as well.\n\n```jsx live=false\nconst Card = incmix('div', {\n  baseStyle: {\n    shadow: 'lg',\n    rounded: 'lg',\n    bg: 'white',\n  },\n})\n```\n\n### Allowing custom props to be forwarded\n\nBy default, the `incmix` factory only filters incmix related style props from\ngetting to the DOM. For more fine-grained control of how and what prop should be\nforwarded, pass the `shouldForwardProp` option.\n\nHere's a simple example that allows all props (including incmix's style props)\nto pass through except the `sample` prop.\n\n```jsx live=false\nconst Div = incmix('div', {\n  shouldForwardProp: prop => !['sample'].includes(prop),\n})\n```\n\nAnother example that combines the default `shouldForwardProp` from Incmix UI\nwith custom logic.\n\n```jsx live=false\nimport { incmix, shouldForwardProp } from '@incmix-ui/react'\n\nconst Div = incmix('div', {\n  shouldForwardProp: prop => {\n    // don't forward Incmix's props\n    const isIncmixProp = !shouldForwardProp(prop)\n    if (isIncmixProp) return false\n\n    // else, only forward `sample` prop\n    return ['sample'].includes(prop)\n  },\n})\n```\n\nTo filter non-HTML attributes, you can leverage\n[@emotion/is-prop-valid](https://github.com/emotion-js/emotion/tree/master/packages/is-prop-valid)\npackage.\n\n```jsx live=false\nimport isValidHTMLProp from '@emotion/is-prop-valid'\nimport { incmix, shouldForwardProp } from '@incmix-ui/react'\n\nconst Div = incmix('div', {\n  shouldForwardProp: prop => {\n    // don't forward Incmix's props\n    const isIncmixProp = !shouldForwardProp(prop)\n    if (isIncmixProp) return false\n\n    // forward valid HTML props\n    const isValidProp = isValidHTMLProp(prop)\n    if (isValidProp) return true\n\n    // else, only forward `sample` prop\n    return ['sample'].includes(prop)\n  },\n})\n```\n",
      "code": "var Component=(()=>{var d=Object.create;var t=Object.defineProperty;var m=Object.getOwnPropertyDescriptor;var h=Object.getOwnPropertyNames;var u=Object.getPrototypeOf,x=Object.prototype.hasOwnProperty;var f=(o,n)=>()=>(n||o((n={exports:{}}).exports,n),n.exports),g=(o,n)=>{for(var i in n)t(o,i,{get:n[i],enumerable:!0})},c=(o,n,i,s)=>{if(n&&typeof n==\"object\"||typeof n==\"function\")for(let r of h(n))!x.call(o,r)&&r!==i&&t(o,r,{get:()=>n[r],enumerable:!(s=m(n,r))||s.enumerable});return o};var y=(o,n,i)=>(i=o!=null?d(u(o)):{},c(n||!o||!o.__esModule?t(i,\"default\",{value:o,enumerable:!0}):i,o)),w=o=>c(t({},\"__esModule\",{value:!0}),o);var l=f((F,a)=>{a.exports=_jsx_runtime});var I={};g(I,{default:()=>j,frontmatter:()=>b});var e=y(l()),b={title:\"Incmix Factory\",package:\"@incmix-ui/system\",description:\"Using the incmix factory and elements\",category:\"features\"};function p(o){let n=Object.assign({p:\"p\",strong:\"strong\",pre:\"pre\",code:\"code\",h2:\"h2\",a:\"a\",blockquote:\"blockquote\",h3:\"h3\"},o.components);return(0,e.jsxs)(e.Fragment,{children:[(0,e.jsxs)(n.p,{children:[\"Incmix factory serves as an \",(0,e.jsx)(n.strong,{children:\"object of incmix enabled JSX elements\"}),`, and also\n`,(0,e.jsx)(n.strong,{children:\"a function that can be used to enable custom component\"}),` receive incmix's\nstyle props.`]}),`\n`,(0,e.jsx)(n.pre,{children:(0,e.jsx)(n.code,{className:\"language-bash\",children:`import { incmix } from \"@incmix-ui/react\"\n`})}),`\n`,(0,e.jsx)(n.h2,{id:\"incmix-jsx-elements\",children:\"Incmix JSX Elements\"}),`\n`,(0,e.jsxs)(n.p,{children:[\"Create base html elements with theme-aware style props using \",(0,e.jsx)(n.code,{children:\"incmix.<element>\"}),`\nnotation. For example, if you want a plain html button with ability to pass\nincmix styles, you can write `,(0,e.jsx)(n.code,{children:\"<incmix.button />\"}),\".\"]}),`\n`,(0,e.jsx)(n.pre,{children:(0,e.jsx)(n.code,{className:\"language-jsx\",children:`<incmix.button px=\"3\" py=\"2\" bg=\"green.200\" rounded=\"md\" _hover={{ bg: 'green.300' }}>\n  Click me\n</incmix.button>\n`})}),`\n`,(0,e.jsxs)(n.p,{children:[`This reduces the need to create custom component wrappers and name them. This\nsyntax is available for common html elements. See the reference for the full\n`,(0,e.jsx)(n.a,{href:\"https://github.com/incmix-ui/incmix-ui/blob/main/packages/system/src/system.utils.ts#L9\",children:\"list of elements\"}),`\nsupported.`]}),`\n`,(0,e.jsx)(n.pre,{children:(0,e.jsx)(n.code,{className:\"language-jsx\",live:\"false\",children:`<incmix.h1 fontSize=\"lg\"> Heading </incmix.h1>\n`})}),`\n`,(0,e.jsx)(n.h2,{id:\"incmix-factory-function\",children:\"Incmix factory function\"}),`\n`,(0,e.jsxs)(n.p,{children:[\"This is a function that converts \",(0,e.jsx)(n.strong,{children:\"non-incmix components\"}),\" or \",(0,e.jsx)(n.strong,{children:\"jsx element\"}),` to\nincmix-enabled components so you can pass style props to them.`]}),`\n`,(0,e.jsxs)(n.p,{children:[\"Consider a package called \",(0,e.jsx)(n.code,{children:\"react-input-autoresize\"}),`, let's use the incmix factory\nfunction to make possible to pass style props.`]}),`\n`,(0,e.jsx)(n.p,{children:`The function will infer the prop types from the wrapped component and also add\nincmix style props.`}),`\n`,(0,e.jsx)(n.pre,{children:(0,e.jsx)(n.code,{className:\"language-jsx\",live:\"false\",children:`import { incmix } from '@incmix-ui/react'\nimport Textarea from 'react-input-autoresize'\n\nconst AutoResizeInput = incmix(Textarea)\n\nfunction Example() {\n  return <AutoResizeInput bg=\"red.200\" fontSize=\"12px\" />\n}\n`})}),`\n`,(0,e.jsxs)(n.blockquote,{children:[`\n`,(0,e.jsxs)(n.p,{children:[\"Considering that Incmix uses \",(0,e.jsx)(n.code,{children:\"emotion\"}),` under the hood, ensure the non-incmix\ncomponent accepts `,(0,e.jsx)(n.code,{children:\"className\"}),\" as props for this to work correctly\"]}),`\n`]}),`\n`,(0,e.jsx)(n.h3,{id:\"attaching-styles\",children:\"Attaching styles\"}),`\n`,(0,e.jsx)(n.p,{children:`In some instances, you might need to attach specific styles to the component\nwrapped in the incmix factory`}),`\n`,(0,e.jsx)(n.pre,{children:(0,e.jsx)(n.code,{className:\"language-jsx\",live:\"false\",children:`const AutoResizeInput = incmix(AutoResizeInput, {\n  baseStyle: {\n    bg: 'papayawhip',\n    color: 'red.500',\n  },\n})\n`})}),`\n`,(0,e.jsx)(n.p,{children:\"You can also use the incmix factory on jsx elements as well.\"}),`\n`,(0,e.jsx)(n.pre,{children:(0,e.jsx)(n.code,{className:\"language-jsx\",live:\"false\",children:`const Card = incmix('div', {\n  baseStyle: {\n    shadow: 'lg',\n    rounded: 'lg',\n    bg: 'white',\n  },\n})\n`})}),`\n`,(0,e.jsx)(n.h3,{id:\"allowing-custom-props-to-be-forwarded\",children:\"Allowing custom props to be forwarded\"}),`\n`,(0,e.jsxs)(n.p,{children:[\"By default, the \",(0,e.jsx)(n.code,{children:\"incmix\"}),` factory only filters incmix related style props from\ngetting to the DOM. For more fine-grained control of how and what prop should be\nforwarded, pass the `,(0,e.jsx)(n.code,{children:\"shouldForwardProp\"}),\" option.\"]}),`\n`,(0,e.jsxs)(n.p,{children:[`Here's a simple example that allows all props (including incmix's style props)\nto pass through except the `,(0,e.jsx)(n.code,{children:\"sample\"}),\" prop.\"]}),`\n`,(0,e.jsx)(n.pre,{children:(0,e.jsx)(n.code,{className:\"language-jsx\",live:\"false\",children:`const Div = incmix('div', {\n  shouldForwardProp: prop => !['sample'].includes(prop),\n})\n`})}),`\n`,(0,e.jsxs)(n.p,{children:[\"Another example that combines the default \",(0,e.jsx)(n.code,{children:\"shouldForwardProp\"}),` from Incmix UI\nwith custom logic.`]}),`\n`,(0,e.jsx)(n.pre,{children:(0,e.jsx)(n.code,{className:\"language-jsx\",live:\"false\",children:`import { incmix, shouldForwardProp } from '@incmix-ui/react'\n\nconst Div = incmix('div', {\n  shouldForwardProp: prop => {\n    // don't forward Incmix's props\n    const isIncmixProp = !shouldForwardProp(prop)\n    if (isIncmixProp) return false\n\n    // else, only forward \\`sample\\` prop\n    return ['sample'].includes(prop)\n  },\n})\n`})}),`\n`,(0,e.jsxs)(n.p,{children:[`To filter non-HTML attributes, you can leverage\n`,(0,e.jsx)(n.a,{href:\"https://github.com/emotion-js/emotion/tree/master/packages/is-prop-valid\",children:\"@emotion/is-prop-valid\"}),`\npackage.`]}),`\n`,(0,e.jsx)(n.pre,{children:(0,e.jsx)(n.code,{className:\"language-jsx\",live:\"false\",children:`import isValidHTMLProp from '@emotion/is-prop-valid'\nimport { incmix, shouldForwardProp } from '@incmix-ui/react'\n\nconst Div = incmix('div', {\n  shouldForwardProp: prop => {\n    // don't forward Incmix's props\n    const isIncmixProp = !shouldForwardProp(prop)\n    if (isIncmixProp) return false\n\n    // forward valid HTML props\n    const isValidProp = isValidHTMLProp(prop)\n    if (isValidProp) return true\n\n    // else, only forward \\`sample\\` prop\n    return ['sample'].includes(prop)\n  },\n})\n`})})]})}function v(o={}){let{wrapper:n}=o.components||{};return n?(0,e.jsx)(n,Object.assign({},o,{children:(0,e.jsx)(p,o)})):p(o)}var j=v;return w(I);})();\n;return Component;"
    },
    "_id": "docs/styled-system/chakra-factory.mdx",
    "_raw": {
      "sourceFilePath": "docs/styled-system/chakra-factory.mdx",
      "sourceFileName": "chakra-factory.mdx",
      "sourceFileDir": "docs/styled-system",
      "contentType": "mdx",
      "flattenedPath": "docs/styled-system/chakra-factory"
    },
    "type": "Doc",
    "slug": "/docs/styled-system/chakra-factory",
    "frontMatter": {
      "title": "Incmix Factory",
      "package": "@incmix-ui/system",
      "description": "Using the incmix factory and elements",
      "slug": "/docs/styled-system/chakra-factory",
      "editUrl": "https://github.com/incmix-ui/incmix-ui-docs/tree/main/content/docs/styled-system/chakra-factory.mdx",
      "headings": [
        {
          "text": "Incmix JSX Elements",
          "id": "incmix-jsx-elements",
          "level": "h2"
        },
        {
          "text": "Incmix factory function",
          "id": "incmix-factory-function",
          "level": "h2"
        },
        {
          "text": "Attaching styles",
          "id": "attaching-styles",
          "level": "h3"
        },
        {
          "text": "Allowing custom props to be forwarded",
          "id": "allowing-custom-props-to-be-forwarded",
          "level": "h3"
        }
      ]
    }
  },
  {
    "title": "CLI",
    "package": "@incmix-ui/cli",
    "description": "Using the CLI command to generate theme typings",
    "scope": "usage",
    "category": "features",
    "body": {
      "raw": "\nThe Incmix UI CLI can be used to generate typings for your custom theme tokens,\nlike colors, semantic tokens, component variants, etc.\n\nThe CLI scans your theme configuration and generates typings for your custom\ntokens in the `node_modules/@incmix-ui/styled-system/dist/theming.types.d.ts`\nfile.\n\n> **Troubleshoot:** If the theme typings don't show up immediately, try\n> restarting your TypeScript server\n> (`Cmd + Shift + P > \"TypeScript: Restart TS server\"` if you're using VSCode).\n\n## Installation\n\nIn order to use the CLI, you need to install it as a dev dependency in your\nproject:\n\n```bash\nnpm install --save-dev @incmix-ui/cli\n#or\nyarn add --dev @incmix-ui/cli\n```\n\nTo make it more convenient, it's also a good idea to create an npm script that\ntriggers it:\n\n```json\n// package.json\n{\n  ...\n  \"scripts\": {\n    ...\n    \"theme\": \"incmix-cli tokens path/to/theme.ts\",\n    \"theme:watch\": \"incmix-cli tokens path/to/theme.ts --watch\",\n  },\n  ...\n}\n```\n\nDon't forget to replace `path/to/theme.ts` with your theme file location.\n\n## Usage\n\nTo generate typings for your theme, run the `theme` script:\n\n```bash\nnpm run theme\n# or\nyarn theme\n```\n\nIf you'd like to continuously generate theme typings as you're editing your\ntheme, run the `theme:watch` script:\n\n```bash\nnpm run theme:watch\n# or\nyarn theme:watch\n```\n\nA successful execution should output something like this:\n\n```sh\n$ incmix-cli tokens src/theme/index.ts\n\nIncmix UI CLI v2.1.8 by Incmix UI\nGenerate theme typings for autocomplete\n\n\nℹ Generating incmix theme typings\n✔ Done\n✨  Done in 0.83s.\n```\n",
      "code": "var Component=(()=>{var d=Object.create;var r=Object.defineProperty;var m=Object.getOwnPropertyDescriptor;var p=Object.getOwnPropertyNames;var u=Object.getPrototypeOf,g=Object.prototype.hasOwnProperty;var y=(t,e)=>()=>(e||t((e={exports:{}}).exports,e),e.exports),x=(t,e)=>{for(var i in e)r(t,i,{get:e[i],enumerable:!0})},s=(t,e,i,c)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let o of p(e))!g.call(t,o)&&o!==i&&r(t,o,{get:()=>e[o],enumerable:!(c=m(e,o))||c.enumerable});return t};var f=(t,e,i)=>(i=t!=null?d(u(t)):{},s(e||!t||!t.__esModule?r(i,\"default\",{value:t,enumerable:!0}):i,t)),I=t=>s(r({},\"__esModule\",{value:!0}),t);var h=y((w,a)=>{a.exports=_jsx_runtime});var C={};x(C,{default:()=>j,frontmatter:()=>k});var n=f(h()),k={title:\"CLI\",package:\"@incmix-ui/cli\",description:\"Using the CLI command to generate theme typings\",category:\"features\"};function l(t){let e=Object.assign({p:\"p\",code:\"code\",blockquote:\"blockquote\",strong:\"strong\",h2:\"h2\",pre:\"pre\"},t.components);return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(e.p,{children:`The Incmix UI CLI can be used to generate typings for your custom theme tokens,\nlike colors, semantic tokens, component variants, etc.`}),`\n`,(0,n.jsxs)(e.p,{children:[`The CLI scans your theme configuration and generates typings for your custom\ntokens in the `,(0,n.jsx)(e.code,{children:\"node_modules/@incmix-ui/styled-system/dist/theming.types.d.ts\"}),`\nfile.`]}),`\n`,(0,n.jsxs)(e.blockquote,{children:[`\n`,(0,n.jsxs)(e.p,{children:[(0,n.jsx)(e.strong,{children:\"Troubleshoot:\"}),` If the theme typings don't show up immediately, try\nrestarting your TypeScript server\n(`,(0,n.jsx)(e.code,{children:'Cmd + Shift + P > \"TypeScript: Restart TS server\"'}),\" if you're using VSCode).\"]}),`\n`]}),`\n`,(0,n.jsx)(e.h2,{id:\"installation\",children:\"Installation\"}),`\n`,(0,n.jsx)(e.p,{children:`In order to use the CLI, you need to install it as a dev dependency in your\nproject:`}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-bash\",children:`npm install --save-dev @incmix-ui/cli\n#or\nyarn add --dev @incmix-ui/cli\n`})}),`\n`,(0,n.jsx)(e.p,{children:`To make it more convenient, it's also a good idea to create an npm script that\ntriggers it:`}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-json\",children:`// package.json\n{\n  ...\n  \"scripts\": {\n    ...\n    \"theme\": \"incmix-cli tokens path/to/theme.ts\",\n    \"theme:watch\": \"incmix-cli tokens path/to/theme.ts --watch\",\n  },\n  ...\n}\n`})}),`\n`,(0,n.jsxs)(e.p,{children:[\"Don't forget to replace \",(0,n.jsx)(e.code,{children:\"path/to/theme.ts\"}),\" with your theme file location.\"]}),`\n`,(0,n.jsx)(e.h2,{id:\"usage\",children:\"Usage\"}),`\n`,(0,n.jsxs)(e.p,{children:[\"To generate typings for your theme, run the \",(0,n.jsx)(e.code,{children:\"theme\"}),\" script:\"]}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-bash\",children:`npm run theme\n# or\nyarn theme\n`})}),`\n`,(0,n.jsxs)(e.p,{children:[`If you'd like to continuously generate theme typings as you're editing your\ntheme, run the `,(0,n.jsx)(e.code,{children:\"theme:watch\"}),\" script:\"]}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-bash\",children:`npm run theme:watch\n# or\nyarn theme:watch\n`})}),`\n`,(0,n.jsx)(e.p,{children:\"A successful execution should output something like this:\"}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-sh\",children:`$ incmix-cli tokens src/theme/index.ts\n\nIncmix UI CLI v2.1.8 by Incmix UI\nGenerate theme typings for autocomplete\n\n\n\\u2139 Generating incmix theme typings\n\\u2714 Done\n\\u2728  Done in 0.83s.\n`})})]})}function b(t={}){let{wrapper:e}=t.components||{};return e?(0,n.jsx)(e,Object.assign({},t,{children:(0,n.jsx)(l,t)})):l(t)}var j=b;return I(C);})();\n;return Component;"
    },
    "_id": "docs/styled-system/cli.mdx",
    "_raw": {
      "sourceFilePath": "docs/styled-system/cli.mdx",
      "sourceFileName": "cli.mdx",
      "sourceFileDir": "docs/styled-system",
      "contentType": "mdx",
      "flattenedPath": "docs/styled-system/cli"
    },
    "type": "Doc",
    "slug": "/docs/styled-system/cli",
    "frontMatter": {
      "title": "CLI",
      "package": "@incmix-ui/cli",
      "description": "Using the CLI command to generate theme typings",
      "slug": "/docs/styled-system/cli",
      "editUrl": "https://github.com/incmix-ui/incmix-ui-docs/tree/main/content/docs/styled-system/cli.mdx",
      "headings": [
        {
          "text": "Installation",
          "id": "installation",
          "level": "h2"
        },
        {
          "text": "Usage",
          "id": "usage",
          "level": "h2"
        }
      ]
    }
  },
  {
    "title": "Color Mode",
    "package": "@incmix-ui/color-mode",
    "description": "Working with color mode (light and dark mode) in Incmix UI",
    "scope": "usage",
    "category": "features",
    "body": {
      "raw": "\nIncmix UI comes with built-in support for managing color mode in your apps.\n\nBy default, most of Incmix's components are dark mode compatible. In some\nscenarios, you might need to make your component respond to color mode.\n\n> **Tip:** Incmix stores the color mode in `localStorage` and appends a\n> className to the `body` to ensure the color mode is persistent.\n\n## Setup\n\nTo get dark mode working correctly, you need to do two things:\n\n1. Update your theme config to determine how Incmix should manage color mode\n   updates.\n\n2. Add the `ColorModeScript` to your application, and set the initial color mode\n   your application should start with to either `light`, `dark` or `system`. It\n   is `light` by default.\n\n> **Note:** When using `system` as initial color mode, the theme will change\n> with the system preference. However, if another theme is manually selected by\n> the user then that theme will be used on the next page load. To reset it to\n> system preference, simply remove the `incmix-ui-color-mode` entry from\n> localStorage.\n\n### Updating the theme config\n\nThe theme config for color mode has 2 options:\n\n- `initialColorMode`: The initial mode you'd like your app to start with\n- `useSystemColorMode`: If `true`, your app will change color mode based on the\n  user's system preferences.\n\n```jsx live=false\n// theme.js\n\n// 1. import `extendTheme` function\nimport { extendTheme } from '@incmix-ui/react'\n\n// 2. Add your color mode config\nconst config = {\n  initialColorMode: 'light',\n  useSystemColorMode: false,\n}\n\n// 3. extend the theme\nconst theme = extendTheme({ config })\n\nexport default theme\n```\n\nFor typescript, you need to explicitly describe the theme config type as\n`ThemeConfig` object.\n\n```tsx live=false\n// theme.ts\n\n// 1. import `extendTheme` function\nimport { extendTheme, type ThemeConfig } from '@incmix-ui/react'\n\n// 2. Add your color mode config\nconst config: ThemeConfig = {\n  initialColorMode: 'light',\n  useSystemColorMode: false,\n}\n\n// 3. extend the theme\nconst theme = extendTheme({ config })\n\nexport default theme\n```\n\n> Remember to pass your custom `theme` to the `IncmixProvider`, otherwise your\n> color mode config won't be taken into consideration.\n\n#### Behavior of ColorMode\n\nThe current hierarchy of how the color mode is defined is as follows:\n\n- if `useSystemColorMode` is true `system`-color will be used as default -\n  `initialColorMode` is the fallback if system color mode can't be resolved\n\n- if `data-theme` prop is defined through e.g. `ColorModeScript` / after\n  modification/initial load of the colorMode this value will be used\n\n- if `colorModeManager` = `localStorage` and a value is defined for\n  `incmix-ui-color-mode` this will be used\n\n- if `initialColorMode` = `system` system-color will be used as default -\n  `initialColorMode` is the fallback if system color mode isn't resolved\n\n- if `initialColorMode` = `'light'|'dark'` the corresponding value will be used\n\nWe currently accept 3 different values for `initialColorMode`:\n`light`,`dark`,`system`\n\n#### Difference between `initialColorMode='system'` and `useSystemColorMode`\n\nif `useSystemColorMode=true` we will always try to match the users\n`system`-color and fallback to `initialColorMode`. With this behavior, the\ncolorMode toggle won't have any effect.\n\nif `initialColorMode='system'` we will as well always try to match the users\n`system`-color and fallback to `light`. After the user has toggled the value,\nthis value will be used.\n\n### Adding the `ColorModeScript`\n\nThe color mode script needs to be added before the content inside the `body` tag\nfor local storage syncing to work correctly.\n\n> When setting the initial color mode, we recommend adding it as a config to\n> your theme and reference that in the `ColorModeScript`.\n\n> To use `ColorModeScript` on a site with strict `Content-Security-Policy`, you\n> can use the `nonce` prop that will be passed to the `<script>` tag.\n\n#### For Next.js\n\nFor Next.js, you need to add the `ColorModeScript` to the `_document.js` file.\n\n```jsx live=false ln={14}\n// pages/_document.js\n\nimport { ColorModeScript } from '@incmix-ui/react'\nimport NextDocument, { Html, Head, Main, NextScript } from 'next/document'\nimport theme from './theme'\n\nexport default class Document extends NextDocument {\n  render() {\n    return (\n      <Html lang=\"en\">\n        <Head />\n        <body>\n          {/* 👇 Here's the script */}\n          <ColorModeScript initialColorMode={theme.config.initialColorMode} />\n          <Main />\n          <NextScript />\n        </body>\n      </Html>\n    )\n  }\n}\n```\n\n#### For Create React App\n\nFor Create React App, you need to add the `ColorModeScript` to the `index.js`\nfile.\n\n```jsx live=false ln={11}\n// index.js\n\nimport { ColorModeScript } from '@incmix-ui/react'\nimport * as ReactDOM from 'react-dom/client'\nimport App from './App'\nimport theme from './theme'\n\nconst rootElement = document.getElementById('root')\nReactDOM.createRoot(rootElement).render(\n  <>\n    {/* 👇 Here's the script */}\n    <ColorModeScript initialColorMode={theme.config.initialColorMode} />\n    <App />\n  </>,\n)\n```\n\n#### For Gatsby\n\n## Changing Color Mode\n\nTo manage color mode in your application, incmix exposes the `useColorMode` or\n`useColorModeValue` hooks.\n\n### useColorMode\n\n`useColorMode` is a React hook that gives you access to the current color mode,\nand a function to toggle the color mode.\n\n```jsx\nfunction Example() {\n  const { colorMode, toggleColorMode } = useColorMode()\n  return (\n    <header>\n      <Button onClick={toggleColorMode}>Toggle {colorMode === 'light' ? 'Dark' : 'Light'}</Button>\n    </header>\n  )\n}\n```\n\nCalling `toggleColorMode` anywhere in your app tree toggles the color mode from\n`light` or `dark` and vice versa.\n\n### useColorModeValue\n\n`useColorModeValue` is a React hook used to change any value or style based on\nthe color mode. It takes 2 arguments: the value in light mode, and the value in\ndark mode.\n\n```jsx live=false\n// Here's the signature\nconst value = useColorModeValue(lightModeValue, darkModeValue)\n```\n\nHere's an example that changes the `background-color` and `color` using the\n`useColorModeValue` hook.\n\n> Click the **Toggle Mode** button to see it in action.\n\n```jsx\nfunction StyleColorMode() {\n  const { toggleColorMode } = useColorMode()\n\n  const bg = useColorModeValue('red.500', 'red.200')\n  const color = useColorModeValue('white', 'gray.800')\n\n  return (\n    <>\n      <Box mb={4} bg={bg} color={color}>\n        This box's style will change based on the color mode.\n      </Box>\n      <Button size=\"sm\" onClick={toggleColorMode}>\n        Toggle Mode\n      </Button>\n    </>\n  )\n}\n```\n\n## Forcing a specific mode\n\nIn some occasions, you might want Incmix components to look the same in both\nlight and dark modes. To achieve this, wrap the component in a `LightMode` or\n`DarkMode` component. Doing this will override the global `colorMode`.\n\n> Click the **\"Toggle Mode\"** button to see it in action.\n\n```jsx\nfunction Example() {\n  const { colorMode, toggleColorMode } = useColorMode()\n\n  return (\n    <HStack>\n      <LightMode>\n        <Button size=\"sm\" colorScheme=\"blue\">\n          Light Mode Always\n        </Button>\n      </LightMode>\n\n      <DarkMode>\n        <Button size=\"sm\" colorScheme=\"blue\">\n          Dark Mode Always\n        </Button>\n      </DarkMode>\n\n      <Button size=\"sm\" colorScheme=\"blue\" onClick={toggleColorMode}>\n        Toggle Mode\n      </Button>\n    </HStack>\n  )\n}\n```\n\n## Add colorModeManager (Optional, for SSR)\n\nFor server-side rendered sites, e.g. in Next.js, you may want to know the color\npreference of a user upfront so you can avoid rendering the initial color mode\nand then changing it during hydration (so-called `flashing`).\n\nIf you don't use SSR or don't care about this, you don't need to pass anything.\nIncmix will use `localStorageManager` by default.\n\nHere's how to do this in Next.js 9.3 or newer:\n\n1. Create a reusable wrapper as demonstrated in the examples:\n\n```jsx live=false\n// e.g. src/Incmix.js\n// a) import `IncmixProvider` component as well as the storageManagers\nimport { IncmixProvider, cookieStorageManagerSSR, localStorageManager } from '@incmix-ui/react'\n\nexport function Incmix({ cookies, children }) {\n  // b) Pass `colorModeManager` prop\n  const colorModeManager = typeof cookies === 'string' ? cookieStorageManagerSSR(cookies) : localStorageManager\n\n  return <IncmixProvider colorModeManager={colorModeManager}>{children}</IncmixProvider>\n}\n\n// also export a reusable function getServerSideProps\nexport function getServerSideProps({ req }) {\n  return {\n    props: {\n      // first time users will not have any cookies and you may not return\n      // undefined here, hence ?? is necessary\n      cookies: req.headers.cookie ?? '',\n    },\n  }\n}\n```\n\n2. Import your wrapper component setting up Incmix:\n\n```jsx live=false\n// setup your wrapper in the _app file (e.g: pages/_app.js)\nimport { Incmix } from \"../src/Incmix\";\n\nexport default function App({ Component, pageProps }) {\n  return (\n    <Incmix cookies={pageProps.cookies}>\n      <Component {...pageProps} />\n    </Incmix>\n  );\n}\n\n// e.g pages/index.js\nexport default function Index() {\n  return <h1>Example</h1>;\n}\n\n// re-export the reusable `getServerSideProps` function\nexport { getServerSideProps } from \"./Incmix\";\n```\n\n> If you need to know the name of the Incmix cookie for specific reasons, it's\n> `incmix-ui-color-mode`. Also, if you use `colorModeManager`, you can avoid\n> adding the `<ColorModeScript />` to `_document.js`.\n\n> **Important:** if you're using `Next.js 9.3` or newer, the Next.js team\n> recommends avoiding `getInitialProps`. The following example is for Next 9.2\n> or older!\n\n```jsx live=false\n// pages/_app.js\nimport { IncmixProvider, cookieStorageManagerSSR, localStorageManager } from '@incmix-ui/react'\n\nexport default function App({ cookies }) {\n  // 2. Pass `colorModeManager` prop - it finds the relevant cookie on its own\n  return (\n    <IncmixProvider colorModeManager={typeof cookies === 'string' ? cookieStorageManagerSSR(cookies) : localStorageManager}>\n      <h1>Example</h1>\n    </IncmixProvider>\n  )\n}\n\nApp.getInitialProps = ({ req }) => {\n  return {\n    // first time users will not have any cookies and you may not return\n    // undefined here, hence ?? is necessary\n    cookies: req.headers.cookie ?? '',\n  }\n}\n```\n\n## Color Mode Flash Issue\n\nIn some cases, when you switch to dark mode and refresh the page, you might\nexperience a quick flash of light mode before it switches correctly.\n\nThis is a known issue and we're looking to fix it. If you have some ideas, feel\nfree to share with us on Discord or Github.\n",
      "code": "var Component=(()=>{var h=Object.create;var t=Object.defineProperty;var m=Object.getOwnPropertyDescriptor;var u=Object.getOwnPropertyNames;var p=Object.getPrototypeOf,g=Object.prototype.hasOwnProperty;var f=(n,e)=>()=>(e||n((e={exports:{}}).exports,e),e.exports),y=(n,e)=>{for(var r in e)t(n,r,{get:e[r],enumerable:!0})},l=(n,e,r,c)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let i of u(e))!g.call(n,i)&&i!==r&&t(n,i,{get:()=>e[i],enumerable:!(c=m(e,i))||c.enumerable});return n};var M=(n,e,r)=>(r=n!=null?h(p(n)):{},l(e||!n||!n.__esModule?t(r,\"default\",{value:n,enumerable:!0}):r,n)),x=n=>l(t({},\"__esModule\",{value:!0}),n);var a=f((v,d)=>{d.exports=_jsx_runtime});var w={};y(w,{default:()=>b,frontmatter:()=>k});var o=M(a()),k={title:\"Color Mode\",package:\"@incmix-ui/color-mode\",description:\"Working with color mode (light and dark mode) in Incmix UI\",category:\"features\"};function s(n){let e=Object.assign({p:\"p\",blockquote:\"blockquote\",strong:\"strong\",code:\"code\",h2:\"h2\",ol:\"ol\",li:\"li\",h3:\"h3\",ul:\"ul\",pre:\"pre\",h4:\"h4\"},n.components);return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(e.p,{children:\"Incmix UI comes with built-in support for managing color mode in your apps.\"}),`\n`,(0,o.jsx)(e.p,{children:`By default, most of Incmix's components are dark mode compatible. In some\nscenarios, you might need to make your component respond to color mode.`}),`\n`,(0,o.jsxs)(e.blockquote,{children:[`\n`,(0,o.jsxs)(e.p,{children:[(0,o.jsx)(e.strong,{children:\"Tip:\"}),\" Incmix stores the color mode in \",(0,o.jsx)(e.code,{children:\"localStorage\"}),` and appends a\nclassName to the `,(0,o.jsx)(e.code,{children:\"body\"}),\" to ensure the color mode is persistent.\"]}),`\n`]}),`\n`,(0,o.jsx)(e.h2,{id:\"setup\",children:\"Setup\"}),`\n`,(0,o.jsx)(e.p,{children:\"To get dark mode working correctly, you need to do two things:\"}),`\n`,(0,o.jsxs)(e.ol,{children:[`\n`,(0,o.jsxs)(e.li,{children:[`\n`,(0,o.jsx)(e.p,{children:`Update your theme config to determine how Incmix should manage color mode\nupdates.`}),`\n`]}),`\n`,(0,o.jsxs)(e.li,{children:[`\n`,(0,o.jsxs)(e.p,{children:[\"Add the \",(0,o.jsx)(e.code,{children:\"ColorModeScript\"}),` to your application, and set the initial color mode\nyour application should start with to either `,(0,o.jsx)(e.code,{children:\"light\"}),\", \",(0,o.jsx)(e.code,{children:\"dark\"}),\" or \",(0,o.jsx)(e.code,{children:\"system\"}),`. It\nis `,(0,o.jsx)(e.code,{children:\"light\"}),\" by default.\"]}),`\n`]}),`\n`]}),`\n`,(0,o.jsxs)(e.blockquote,{children:[`\n`,(0,o.jsxs)(e.p,{children:[(0,o.jsx)(e.strong,{children:\"Note:\"}),\" When using \",(0,o.jsx)(e.code,{children:\"system\"}),` as initial color mode, the theme will change\nwith the system preference. However, if another theme is manually selected by\nthe user then that theme will be used on the next page load. To reset it to\nsystem preference, simply remove the `,(0,o.jsx)(e.code,{children:\"incmix-ui-color-mode\"}),` entry from\nlocalStorage.`]}),`\n`]}),`\n`,(0,o.jsx)(e.h3,{id:\"updating-the-theme-config\",children:\"Updating the theme config\"}),`\n`,(0,o.jsx)(e.p,{children:\"The theme config for color mode has 2 options:\"}),`\n`,(0,o.jsxs)(e.ul,{children:[`\n`,(0,o.jsxs)(e.li,{children:[(0,o.jsx)(e.code,{children:\"initialColorMode\"}),\": The initial mode you'd like your app to start with\"]}),`\n`,(0,o.jsxs)(e.li,{children:[(0,o.jsx)(e.code,{children:\"useSystemColorMode\"}),\": If \",(0,o.jsx)(e.code,{children:\"true\"}),`, your app will change color mode based on the\nuser's system preferences.`]}),`\n`]}),`\n`,(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:\"language-jsx\",live:\"false\",children:`// theme.js\n\n// 1. import \\`extendTheme\\` function\nimport { extendTheme } from '@incmix-ui/react'\n\n// 2. Add your color mode config\nconst config = {\n  initialColorMode: 'light',\n  useSystemColorMode: false,\n}\n\n// 3. extend the theme\nconst theme = extendTheme({ config })\n\nexport default theme\n`})}),`\n`,(0,o.jsxs)(e.p,{children:[`For typescript, you need to explicitly describe the theme config type as\n`,(0,o.jsx)(e.code,{children:\"ThemeConfig\"}),\" object.\"]}),`\n`,(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:\"language-tsx\",live:\"false\",children:`// theme.ts\n\n// 1. import \\`extendTheme\\` function\nimport { extendTheme, type ThemeConfig } from '@incmix-ui/react'\n\n// 2. Add your color mode config\nconst config: ThemeConfig = {\n  initialColorMode: 'light',\n  useSystemColorMode: false,\n}\n\n// 3. extend the theme\nconst theme = extendTheme({ config })\n\nexport default theme\n`})}),`\n`,(0,o.jsxs)(e.blockquote,{children:[`\n`,(0,o.jsxs)(e.p,{children:[\"Remember to pass your custom \",(0,o.jsx)(e.code,{children:\"theme\"}),\" to the \",(0,o.jsx)(e.code,{children:\"IncmixProvider\"}),`, otherwise your\ncolor mode config won't be taken into consideration.`]}),`\n`]}),`\n`,(0,o.jsx)(e.h4,{id:\"behavior-of-colormode\",children:\"Behavior of ColorMode\"}),`\n`,(0,o.jsx)(e.p,{children:\"The current hierarchy of how the color mode is defined is as follows:\"}),`\n`,(0,o.jsxs)(e.ul,{children:[`\n`,(0,o.jsxs)(e.li,{children:[`\n`,(0,o.jsxs)(e.p,{children:[\"if \",(0,o.jsx)(e.code,{children:\"useSystemColorMode\"}),\" is true \",(0,o.jsx)(e.code,{children:\"system\"}),`-color will be used as default -\n`,(0,o.jsx)(e.code,{children:\"initialColorMode\"}),\" is the fallback if system color mode can't be resolved\"]}),`\n`]}),`\n`,(0,o.jsxs)(e.li,{children:[`\n`,(0,o.jsxs)(e.p,{children:[\"if \",(0,o.jsx)(e.code,{children:\"data-theme\"}),\" prop is defined through e.g. \",(0,o.jsx)(e.code,{children:\"ColorModeScript\"}),` / after\nmodification/initial load of the colorMode this value will be used`]}),`\n`]}),`\n`,(0,o.jsxs)(e.li,{children:[`\n`,(0,o.jsxs)(e.p,{children:[\"if \",(0,o.jsx)(e.code,{children:\"colorModeManager\"}),\" = \",(0,o.jsx)(e.code,{children:\"localStorage\"}),` and a value is defined for\n`,(0,o.jsx)(e.code,{children:\"incmix-ui-color-mode\"}),\" this will be used\"]}),`\n`]}),`\n`,(0,o.jsxs)(e.li,{children:[`\n`,(0,o.jsxs)(e.p,{children:[\"if \",(0,o.jsx)(e.code,{children:\"initialColorMode\"}),\" = \",(0,o.jsx)(e.code,{children:\"system\"}),` system-color will be used as default -\n`,(0,o.jsx)(e.code,{children:\"initialColorMode\"}),\" is the fallback if system color mode isn't resolved\"]}),`\n`]}),`\n`,(0,o.jsxs)(e.li,{children:[`\n`,(0,o.jsxs)(e.p,{children:[\"if \",(0,o.jsx)(e.code,{children:\"initialColorMode\"}),\" = \",(0,o.jsx)(e.code,{children:\"'light'|'dark'\"}),\" the corresponding value will be used\"]}),`\n`]}),`\n`]}),`\n`,(0,o.jsxs)(e.p,{children:[\"We currently accept 3 different values for \",(0,o.jsx)(e.code,{children:\"initialColorMode\"}),`:\n`,(0,o.jsx)(e.code,{children:\"light\"}),\",\",(0,o.jsx)(e.code,{children:\"dark\"}),\",\",(0,o.jsx)(e.code,{children:\"system\"})]}),`\n`,(0,o.jsxs)(e.h4,{id:\"difference-between-initialcolormodesystem-and-usesystemcolormode\",children:[\"Difference between \",(0,o.jsx)(e.code,{children:\"initialColorMode='system'\"}),\" and \",(0,o.jsx)(e.code,{children:\"useSystemColorMode\"})]}),`\n`,(0,o.jsxs)(e.p,{children:[\"if \",(0,o.jsx)(e.code,{children:\"useSystemColorMode=true\"}),` we will always try to match the users\n`,(0,o.jsx)(e.code,{children:\"system\"}),\"-color and fallback to \",(0,o.jsx)(e.code,{children:\"initialColorMode\"}),`. With this behavior, the\ncolorMode toggle won't have any effect.`]}),`\n`,(0,o.jsxs)(e.p,{children:[\"if \",(0,o.jsx)(e.code,{children:\"initialColorMode='system'\"}),` we will as well always try to match the users\n`,(0,o.jsx)(e.code,{children:\"system\"}),\"-color and fallback to \",(0,o.jsx)(e.code,{children:\"light\"}),`. After the user has toggled the value,\nthis value will be used.`]}),`\n`,(0,o.jsxs)(e.h3,{id:\"adding-the-colormodescript\",children:[\"Adding the \",(0,o.jsx)(e.code,{children:\"ColorModeScript\"})]}),`\n`,(0,o.jsxs)(e.p,{children:[\"The color mode script needs to be added before the content inside the \",(0,o.jsx)(e.code,{children:\"body\"}),` tag\nfor local storage syncing to work correctly.`]}),`\n`,(0,o.jsxs)(e.blockquote,{children:[`\n`,(0,o.jsxs)(e.p,{children:[`When setting the initial color mode, we recommend adding it as a config to\nyour theme and reference that in the `,(0,o.jsx)(e.code,{children:\"ColorModeScript\"}),\".\"]}),`\n`]}),`\n`,(0,o.jsxs)(e.blockquote,{children:[`\n`,(0,o.jsxs)(e.p,{children:[\"To use \",(0,o.jsx)(e.code,{children:\"ColorModeScript\"}),\" on a site with strict \",(0,o.jsx)(e.code,{children:\"Content-Security-Policy\"}),`, you\ncan use the `,(0,o.jsx)(e.code,{children:\"nonce\"}),\" prop that will be passed to the \",(0,o.jsx)(e.code,{children:\"<script>\"}),\" tag.\"]}),`\n`]}),`\n`,(0,o.jsx)(e.h4,{id:\"for-nextjs\",children:\"For Next.js\"}),`\n`,(0,o.jsxs)(e.p,{children:[\"For Next.js, you need to add the \",(0,o.jsx)(e.code,{children:\"ColorModeScript\"}),\" to the \",(0,o.jsx)(e.code,{children:\"_document.js\"}),\" file.\"]}),`\n`,(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:\"language-jsx\",live:\"false\",ln:\"{14}\",children:`// pages/_document.js\n\nimport { ColorModeScript } from '@incmix-ui/react'\nimport NextDocument, { Html, Head, Main, NextScript } from 'next/document'\nimport theme from './theme'\n\nexport default class Document extends NextDocument {\n  render() {\n    return (\n      <Html lang=\"en\">\n        <Head />\n        <body>\n          {/* \\u{1F447} Here's the script */}\n          <ColorModeScript initialColorMode={theme.config.initialColorMode} />\n          <Main />\n          <NextScript />\n        </body>\n      </Html>\n    )\n  }\n}\n`})}),`\n`,(0,o.jsx)(e.h4,{id:\"for-create-react-app\",children:\"For Create React App\"}),`\n`,(0,o.jsxs)(e.p,{children:[\"For Create React App, you need to add the \",(0,o.jsx)(e.code,{children:\"ColorModeScript\"}),\" to the \",(0,o.jsx)(e.code,{children:\"index.js\"}),`\nfile.`]}),`\n`,(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:\"language-jsx\",live:\"false\",ln:\"{11}\",children:`// index.js\n\nimport { ColorModeScript } from '@incmix-ui/react'\nimport * as ReactDOM from 'react-dom/client'\nimport App from './App'\nimport theme from './theme'\n\nconst rootElement = document.getElementById('root')\nReactDOM.createRoot(rootElement).render(\n  <>\n    {/* \\u{1F447} Here's the script */}\n    <ColorModeScript initialColorMode={theme.config.initialColorMode} />\n    <App />\n  </>,\n)\n`})}),`\n`,(0,o.jsx)(e.h4,{id:\"for-gatsby\",children:\"For Gatsby\"}),`\n`,(0,o.jsx)(e.h2,{id:\"changing-color-mode\",children:\"Changing Color Mode\"}),`\n`,(0,o.jsxs)(e.p,{children:[\"To manage color mode in your application, incmix exposes the \",(0,o.jsx)(e.code,{children:\"useColorMode\"}),` or\n`,(0,o.jsx)(e.code,{children:\"useColorModeValue\"}),\" hooks.\"]}),`\n`,(0,o.jsx)(e.h3,{id:\"usecolormode\",children:\"useColorMode\"}),`\n`,(0,o.jsxs)(e.p,{children:[(0,o.jsx)(e.code,{children:\"useColorMode\"}),` is a React hook that gives you access to the current color mode,\nand a function to toggle the color mode.`]}),`\n`,(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:\"language-jsx\",children:`function Example() {\n  const { colorMode, toggleColorMode } = useColorMode()\n  return (\n    <header>\n      <Button onClick={toggleColorMode}>Toggle {colorMode === 'light' ? 'Dark' : 'Light'}</Button>\n    </header>\n  )\n}\n`})}),`\n`,(0,o.jsxs)(e.p,{children:[\"Calling \",(0,o.jsx)(e.code,{children:\"toggleColorMode\"}),` anywhere in your app tree toggles the color mode from\n`,(0,o.jsx)(e.code,{children:\"light\"}),\" or \",(0,o.jsx)(e.code,{children:\"dark\"}),\" and vice versa.\"]}),`\n`,(0,o.jsx)(e.h3,{id:\"usecolormodevalue\",children:\"useColorModeValue\"}),`\n`,(0,o.jsxs)(e.p,{children:[(0,o.jsx)(e.code,{children:\"useColorModeValue\"}),` is a React hook used to change any value or style based on\nthe color mode. It takes 2 arguments: the value in light mode, and the value in\ndark mode.`]}),`\n`,(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:\"language-jsx\",live:\"false\",children:`// Here's the signature\nconst value = useColorModeValue(lightModeValue, darkModeValue)\n`})}),`\n`,(0,o.jsxs)(e.p,{children:[\"Here's an example that changes the \",(0,o.jsx)(e.code,{children:\"background-color\"}),\" and \",(0,o.jsx)(e.code,{children:\"color\"}),` using the\n`,(0,o.jsx)(e.code,{children:\"useColorModeValue\"}),\" hook.\"]}),`\n`,(0,o.jsxs)(e.blockquote,{children:[`\n`,(0,o.jsxs)(e.p,{children:[\"Click the \",(0,o.jsx)(e.strong,{children:\"Toggle Mode\"}),\" button to see it in action.\"]}),`\n`]}),`\n`,(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:\"language-jsx\",children:`function StyleColorMode() {\n  const { toggleColorMode } = useColorMode()\n\n  const bg = useColorModeValue('red.500', 'red.200')\n  const color = useColorModeValue('white', 'gray.800')\n\n  return (\n    <>\n      <Box mb={4} bg={bg} color={color}>\n        This box's style will change based on the color mode.\n      </Box>\n      <Button size=\"sm\" onClick={toggleColorMode}>\n        Toggle Mode\n      </Button>\n    </>\n  )\n}\n`})}),`\n`,(0,o.jsx)(e.h2,{id:\"forcing-a-specific-mode\",children:\"Forcing a specific mode\"}),`\n`,(0,o.jsxs)(e.p,{children:[`In some occasions, you might want Incmix components to look the same in both\nlight and dark modes. To achieve this, wrap the component in a `,(0,o.jsx)(e.code,{children:\"LightMode\"}),` or\n`,(0,o.jsx)(e.code,{children:\"DarkMode\"}),\" component. Doing this will override the global \",(0,o.jsx)(e.code,{children:\"colorMode\"}),\".\"]}),`\n`,(0,o.jsxs)(e.blockquote,{children:[`\n`,(0,o.jsxs)(e.p,{children:[\"Click the \",(0,o.jsx)(e.strong,{children:'\"Toggle Mode\"'}),\" button to see it in action.\"]}),`\n`]}),`\n`,(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:\"language-jsx\",children:`function Example() {\n  const { colorMode, toggleColorMode } = useColorMode()\n\n  return (\n    <HStack>\n      <LightMode>\n        <Button size=\"sm\" colorScheme=\"blue\">\n          Light Mode Always\n        </Button>\n      </LightMode>\n\n      <DarkMode>\n        <Button size=\"sm\" colorScheme=\"blue\">\n          Dark Mode Always\n        </Button>\n      </DarkMode>\n\n      <Button size=\"sm\" colorScheme=\"blue\" onClick={toggleColorMode}>\n        Toggle Mode\n      </Button>\n    </HStack>\n  )\n}\n`})}),`\n`,(0,o.jsx)(e.h2,{id:\"add-colormodemanager-optional-for-ssr\",children:\"Add colorModeManager (Optional, for SSR)\"}),`\n`,(0,o.jsxs)(e.p,{children:[`For server-side rendered sites, e.g. in Next.js, you may want to know the color\npreference of a user upfront so you can avoid rendering the initial color mode\nand then changing it during hydration (so-called `,(0,o.jsx)(e.code,{children:\"flashing\"}),\").\"]}),`\n`,(0,o.jsxs)(e.p,{children:[`If you don't use SSR or don't care about this, you don't need to pass anything.\nIncmix will use `,(0,o.jsx)(e.code,{children:\"localStorageManager\"}),\" by default.\"]}),`\n`,(0,o.jsx)(e.p,{children:\"Here's how to do this in Next.js 9.3 or newer:\"}),`\n`,(0,o.jsxs)(e.ol,{children:[`\n`,(0,o.jsx)(e.li,{children:\"Create a reusable wrapper as demonstrated in the examples:\"}),`\n`]}),`\n`,(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:\"language-jsx\",live:\"false\",children:`// e.g. src/Incmix.js\n// a) import \\`IncmixProvider\\` component as well as the storageManagers\nimport { IncmixProvider, cookieStorageManagerSSR, localStorageManager } from '@incmix-ui/react'\n\nexport function Incmix({ cookies, children }) {\n  // b) Pass \\`colorModeManager\\` prop\n  const colorModeManager = typeof cookies === 'string' ? cookieStorageManagerSSR(cookies) : localStorageManager\n\n  return <IncmixProvider colorModeManager={colorModeManager}>{children}</IncmixProvider>\n}\n\n// also export a reusable function getServerSideProps\nexport function getServerSideProps({ req }) {\n  return {\n    props: {\n      // first time users will not have any cookies and you may not return\n      // undefined here, hence ?? is necessary\n      cookies: req.headers.cookie ?? '',\n    },\n  }\n}\n`})}),`\n`,(0,o.jsxs)(e.ol,{start:\"2\",children:[`\n`,(0,o.jsx)(e.li,{children:\"Import your wrapper component setting up Incmix:\"}),`\n`]}),`\n`,(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:\"language-jsx\",live:\"false\",children:`// setup your wrapper in the _app file (e.g: pages/_app.js)\nimport { Incmix } from \"../src/Incmix\";\n\nexport default function App({ Component, pageProps }) {\n  return (\n    <Incmix cookies={pageProps.cookies}>\n      <Component {...pageProps} />\n    </Incmix>\n  );\n}\n\n// e.g pages/index.js\nexport default function Index() {\n  return <h1>Example</h1>;\n}\n\n// re-export the reusable \\`getServerSideProps\\` function\nexport { getServerSideProps } from \"./Incmix\";\n`})}),`\n`,(0,o.jsxs)(e.blockquote,{children:[`\n`,(0,o.jsxs)(e.p,{children:[`If you need to know the name of the Incmix cookie for specific reasons, it's\n`,(0,o.jsx)(e.code,{children:\"incmix-ui-color-mode\"}),\". Also, if you use \",(0,o.jsx)(e.code,{children:\"colorModeManager\"}),`, you can avoid\nadding the `,(0,o.jsx)(e.code,{children:\"<ColorModeScript />\"}),\" to \",(0,o.jsx)(e.code,{children:\"_document.js\"}),\".\"]}),`\n`]}),`\n`,(0,o.jsxs)(e.blockquote,{children:[`\n`,(0,o.jsxs)(e.p,{children:[(0,o.jsx)(e.strong,{children:\"Important:\"}),\" if you're using \",(0,o.jsx)(e.code,{children:\"Next.js 9.3\"}),` or newer, the Next.js team\nrecommends avoiding `,(0,o.jsx)(e.code,{children:\"getInitialProps\"}),`. The following example is for Next 9.2\nor older!`]}),`\n`]}),`\n`,(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:\"language-jsx\",live:\"false\",children:`// pages/_app.js\nimport { IncmixProvider, cookieStorageManagerSSR, localStorageManager } from '@incmix-ui/react'\n\nexport default function App({ cookies }) {\n  // 2. Pass \\`colorModeManager\\` prop - it finds the relevant cookie on its own\n  return (\n    <IncmixProvider colorModeManager={typeof cookies === 'string' ? cookieStorageManagerSSR(cookies) : localStorageManager}>\n      <h1>Example</h1>\n    </IncmixProvider>\n  )\n}\n\nApp.getInitialProps = ({ req }) => {\n  return {\n    // first time users will not have any cookies and you may not return\n    // undefined here, hence ?? is necessary\n    cookies: req.headers.cookie ?? '',\n  }\n}\n`})}),`\n`,(0,o.jsx)(e.h2,{id:\"color-mode-flash-issue\",children:\"Color Mode Flash Issue\"}),`\n`,(0,o.jsx)(e.p,{children:`In some cases, when you switch to dark mode and refresh the page, you might\nexperience a quick flash of light mode before it switches correctly.`}),`\n`,(0,o.jsx)(e.p,{children:`This is a known issue and we're looking to fix it. If you have some ideas, feel\nfree to share with us on Discord or Github.`})]})}function C(n={}){let{wrapper:e}=n.components||{};return e?(0,o.jsx)(e,Object.assign({},n,{children:(0,o.jsx)(s,n)})):s(n)}var b=C;return x(w);})();\n;return Component;"
    },
    "_id": "docs/styled-system/color-mode.mdx",
    "_raw": {
      "sourceFilePath": "docs/styled-system/color-mode.mdx",
      "sourceFileName": "color-mode.mdx",
      "sourceFileDir": "docs/styled-system",
      "contentType": "mdx",
      "flattenedPath": "docs/styled-system/color-mode"
    },
    "type": "Doc",
    "slug": "/docs/styled-system/color-mode",
    "frontMatter": {
      "title": "Color Mode",
      "package": "@incmix-ui/color-mode",
      "description": "Working with color mode (light and dark mode) in Incmix UI",
      "slug": "/docs/styled-system/color-mode",
      "editUrl": "https://github.com/incmix-ui/incmix-ui-docs/tree/main/content/docs/styled-system/color-mode.mdx",
      "headings": [
        {
          "text": "Setup",
          "id": "setup",
          "level": "h2"
        },
        {
          "text": "Updating the theme config",
          "id": "updating-the-theme-config",
          "level": "h3"
        },
        {
          "text": "Adding the `ColorModeScript`",
          "id": "adding-the-colormodescript",
          "level": "h3"
        },
        {
          "text": "Changing Color Mode",
          "id": "changing-color-mode",
          "level": "h2"
        },
        {
          "text": "useColorMode",
          "id": "usecolormode",
          "level": "h3"
        },
        {
          "text": "useColorModeValue",
          "id": "usecolormodevalue",
          "level": "h3"
        },
        {
          "text": "Forcing a specific mode",
          "id": "forcing-a-specific-mode",
          "level": "h2"
        },
        {
          "text": "Add colorModeManager (Optional, for SSR)",
          "id": "add-colormodemanager-optional-for-ssr",
          "level": "h2"
        },
        {
          "text": "Color Mode Flash Issue",
          "id": "color-mode-flash-issue",
          "level": "h2"
        }
      ]
    }
  },
  {
    "title": "Component Style",
    "description": "How to create and theme custom components.",
    "scope": "usage",
    "category": "theming",
    "body": {
      "raw": "\nWriting component styles in a way that is easy to maintain over the life of a\ngrowing and changing project is a challenging task.\n\nTo solve this, we came up with the idea of style configuration or `styleConfig`.\nThis is a consistent theming API that makes component styling easy to understand\nand maintain.\n\n## Base styles and Modifier styles\n\nMost component style consists of **base or default styles** and **modifier\nstyles** that alter its size or visual style based on some properties or state.\n\nCommon modifier styles includes:\n\n- **Size:** A component can have different sizes (e.g. small, medium, large)\n- **Variant:** A component can have different visual styles (e.g. outline,\n  solid, ghost)\n- **Color scheme:** For a given variant, a component can have different color\n  schemes (e.g. an outline button with a red color scheme)\n- **Color mode:** A component can change its visual styles based on color mode\n  (e.g. light or dark).\n\n### Single part and multipart components\n\nMost components we build today are either single part components (e.g. Button,\nBadge) or multipart components (e.g. Tabs, Menu, Modal).\n\n**A single part component** is a component that returns a single element. For\nexample, the `<Button>` component renders a `<button>` HTML element:\n\n```jsx live=false\n// This component renders only one element (<button>)\n<Button>My button</Button>\n```\n\n**A multipart component** is a component that has multiple parts, and require\nthese parts to work correctly. This is commonly referred to as a composite\ncomponent.\n\nFor example, a `Tabs` component consists of `TabList`, `Tab`, `TabPanels`, and\n`TabPanel`. Styling this component as a whole might require styling each\ncomponent part.\n\n```jsx live=false\n<Tabs>\n  <TabList>\n    <Tab>Tab 1</Tab>\n    <Tab>Tab 2</Tab>\n  </TabList>\n  <TabPanels>\n    <TabPanel>Tab 1</TabPanel>\n    <TabPanel>Tab 2</TabPanel>\n  </TabPanels>\n</Tabs>\n```\n\n## Styling single part components\n\nThe basic API for styling a single part component is:\n\n```jsx live=false\nimport { defineStyleConfig } from '@incmix-ui/react'\n\nexport default defineStyleConfig({\n  // Styles for the base style\n  baseStyle: {},\n  // Styles for the size variations\n  sizes: {},\n  // Styles for the visual style variations\n  variants: {},\n  // The default `size` or `variant` values\n  defaultProps: {},\n})\n```\n\n> The `defineStyleConfig` function provide us with better type safety out of the\n> box.\n\nLet's say we want to create a custom button component following the design spec\nbelow.\n\n<Img mt=\"10\" mb=\"12\" src=\"/button-spec.png\" />\n\nHere's a contrived implementation of the design:\n\n```tsx live=false\nimport { defineStyleConfig } from '@incmix-ui/react'\n\nconst Button = defineStyleConfig({\n  // The styles all button have in common\n  baseStyle: {\n    fontWeight: 'bold',\n    textTransform: 'uppercase',\n    borderRadius: 'base', // <-- border radius is same for all variants and sizes\n  },\n  // Two sizes: sm and md\n  sizes: {\n    sm: {\n      fontSize: 'sm',\n      px: 4, // <-- px is short for paddingLeft and paddingRight\n      py: 3, // <-- py is short for paddingTop and paddingBottom\n    },\n    md: {\n      fontSize: 'md',\n      px: 6, // <-- these values are tokens from the design system\n      py: 4, // <-- these values are tokens from the design system\n    },\n  },\n  // Two variants: outline and solid\n  variants: {\n    outline: {\n      border: '2px solid',\n      borderColor: 'purple.500',\n      color: 'purple.500',\n    },\n    solid: {\n      bg: 'purple.500',\n      color: 'white',\n    },\n  },\n  // The default size and variant values\n  defaultProps: {\n    size: 'md',\n    variant: 'outline',\n  },\n})\n```\n\nMakes sense right? Now, let's update the theme to include this new component\nstyle.\n\n```jsx live=false\nimport { extendTheme } from '@incmix-ui/react'\n\nconst theme = extendTheme({\n  components: {\n    Button,\n  },\n})\n```\n\n**And that's it!** You can use your new Button along with its custom variants\nthroughout your app. But what if we want to create a custom component that's not\npart of Incmix UI? Let's use the following design spec for a Card component:\n\n<Img mt=\"10\" mb=\"12\" src=\"/card-spec.png\" />\n\nHere's a contrived implementation of the design:\n\n```jsx live=false\nconst Card = defineStyleConfig({\n  // The styles all Cards have in common\n  baseStyle: {\n    display: 'flex',\n    flexDirection: 'column',\n    background: 'white',\n    alignItems: 'center',\n    gap: 6,\n  },\n  // Two variants: rounded and smooth\n  variants: {\n    rounded: {\n      padding: 8,\n      borderRadius: 'xl',\n      boxShadow: 'xl',\n    },\n    smooth: {\n      padding: 6,\n      borderRadius: 'base',\n      boxShadow: 'md',\n    },\n  },\n  // The default variant value\n  defaultProps: {\n    variant: 'smooth',\n  },\n})\n```\n\nAs with the Button component, we'll update the theme to include the new Card\ncomponent style.\n\n```jsx live=false\nimport { extendTheme } from '@incmix-ui/react'\n\nconst theme = extendTheme({\n  components: {\n    Card,\n  },\n})\n```\n\nBut in this case we'd have to **consume** these styles because the `Card`\ncomponent is not a built-in component in Incmix UI.\n\n### Consuming style config\n\nSince the new Card component is **not** part of Incmix UI we need to create a\nnew React component and consume the style we just created. We can do that using\n`useStyleConfig` hook.\n\n### useStyleConfig API\n\n```jsx live=false\nconst styles = useStyleConfig(themeKey, props)\n```\n\n#### Parameters\n\n- `themeKey`: the key in `theme.components` that points to the desired\n  styleConfig.\n- `props`: the options object used to compute the component styles. It typically\n  consists of the `size`, `variant`, and `colorScheme`\n\n#### Return Value\n\nThe computed styles for the component based on `props` passed. If no `props` is\npassed, the `defaultProps` defined in the style config will be used.\n\n```jsx live=false\nimport { Box, useStyleConfig } from '@incmix-ui/react'\n\nfunction Card(props) {\n  const { variant, ...rest } = props\n\n  const styles = useStyleConfig('Card', { variant })\n\n  // Pass the computed styles into the `__css` prop\n  return <Box __css={styles} {...rest} />\n}\n```\n\n> Please note that we are passing the styles to the prop `__css`. It has the\n> same API as [the `sx` prop](/docs/styled-system/the-sx-prop), but has a lower\n> style priority. This means you can override the style properties with incmix\n> style props.\n\nAnd lastly - the fun part - let's use our custom Card component anywhere in our\napp:\n\n```jsx live=false\n// 1. Using the default props defined in style config\nfunction Usage() {\n  return (\n    <Card>\n      <Image src=\"https://incmix-ui.com/eric.jpg\" rounded=\"full\" w={32} h={32} boxShadow=\"md\" />\n      <Heading mt={6} maxW={60} size=\"lg\" textAlign=\"center\" color=\"gray.700\">\n        Welcome back, Eric\n      </Heading>\n      <Text mt={6} mb={6} size=\"sm\" color=\"blackAlpha.500\">\n        Use your fingerprint to continue.\n      </Text>\n      <Image src=\"/fingerprint.png\" w={32} h={32} />\n    </Card>\n  )\n}\n\n// 2. Overriding the default\nfunction Usage() {\n  return (\n    <Card variant=\"smooth\">\n      <Image src=\"https://incmix-ui.com/eric.jpg\" rounded=\"full\" w={32} h={32} boxShadow=\"md\" />\n      <Heading mt={6} maxW={60} size=\"lg\" textAlign=\"center\" color=\"gray.700\">\n        Welcome back, Eric\n      </Heading>\n      <Text mt={6} mb={6} size=\"sm\" color=\"blackAlpha.500\">\n        Use your fingerprint to continue.\n      </Text>\n      <Image src=\"/fingerprint.png\" w={32} h={32} />\n    </Card>\n  )\n}\n```\n\n## Styling multipart components\n\nThis is very similar to styling single part components with a few differences\nyou need to be aware of.\n\n- Given that multipart refers to a component with multiple parts, you'll need to\n  define the parts, and pass them into the `createMultiStyleConfigHelpers`\n  function\n- You'll need to provide styles for each `part`, `baseStyle`, `sizes`, and\n  `variants`.\n\n> **Pro tip 💡**: If you're looking for a list of parts of a multipart component\n> you can check it by clicking on the **\"View theme source\"** button at the top\n> of the documentation page for that certain component. Check out\n> [this](https://incmix-ui.com/docs/components/overlay/modal) example.\n\nHere's what the style config for multipart components looks like:\n\n```jsx live=false\nexport default {\n  // The parts of the component\n  parts: [],\n  // The base styles for each part\n  baseStyle: {},\n  // The size styles for each part\n  sizes: {},\n  // The variant styles for each part\n  variants: {},\n  // The default `size` or `variant` values\n  defaultProps: {},\n}\n```\n\nFor example, here's what the style configurations for a custom menu component\nlooks like:\n\n```tsx live=false\nimport { createMultiStyleConfigHelpers } from '@incmix-ui/styled-system'\n\n// This function creates a set of function that helps us create multipart component styles.\nconst helpers = createMultiStyleConfigHelpers(['menu', 'item'])\n\nconst Menu = helpers.defineMultiStyleConfig({\n  baseStyle: {\n    menu: {\n      boxShadow: 'lg',\n      rounded: 'lg',\n      flexDirection: 'column',\n      py: '2',\n    },\n    item: {\n      fontWeight: 'medium',\n      lineHeight: 'normal',\n      color: 'gray.600',\n    },\n  },\n  sizes: {\n    sm: {\n      item: {\n        fontSize: '0.75rem',\n        px: 2,\n        py: 1,\n      },\n    },\n    md: {\n      item: {\n        fontSize: '0.875rem',\n        px: 3,\n        py: 2,\n      },\n    },\n  },\n  variants: {\n    bold: {\n      item: {\n        fontWeight: 'bold',\n      },\n      menu: {\n        boxShadow: 'xl',\n      },\n    },\n    colorful: {\n      item: {\n        color: 'orange.600',\n      },\n      menu: {\n        bg: 'orange.100',\n      },\n    },\n  },\n  defaultProps: {\n    size: 'md',\n  },\n})\n```\n\nNext, we'll update the theme object to include this new component style.\n\n```jsx live=false\nimport { extendTheme } from '@incmix-ui/react'\n\nconst theme = extendTheme({\n  components: {\n    Menu,\n  },\n})\n```\n\n### Consuming multipart style config\n\nNow that the style config is hooked into the theme, we can consume within any\ncomponent using `useMultiStyleConfig` hook.\n\nWe can also mount the computed styles on a specialized context provider called\n`StylesProvider`. These styles will now be available to other sub-components. To\nread from the context, use the `useStyles` hook.\n\n### useMultiStyleConfig API\n\n```jsx live=false\nconst styles = useMultiStyleConfig(themeKey, props)\n```\n\n#### Parameters\n\n- `themeKey`: the key in `theme.components` that points to the desired\n  styleConfig.\n- `props`: an option of the options for computing the final styles. It typically\n  consists of the `size`, `variant`, and `colorScheme`.\n\n#### Return Values\n\nThe computed styles for each component part based on `size`, or `variant`. If\nnone of these were passed, the `defaultProps` defined in the styleConfig will be\nused.\n\n```jsx live=false\n// 1. Import the components and hook\nimport { StylesProvider, useMultiStyleConfig, useStyles } from '@incmix-ui/react'\n\nfunction Menu(props) {\n  const { size, variant, children, ...rest } = props\n\n  // 2. Consume the `useMultiStyleConfig` hook\n  const styles = useMultiStyleConfig('Menu', { size, variant })\n\n  return (\n    <Flex __css={styles.menu} {...rest}>\n      {/* 3. Mount the computed styles on `StylesProvider` */}\n      <StylesProvider value={styles}>{children}</StylesProvider>\n    </Flex>\n  )\n}\n\nfunction MenuItem(props) {\n  // 4. Read computed `item` styles from styles provider\n  const styles = useStyles()\n  return <Box as=\"button\" __css={styles.item} {...props} />\n}\n```\n\nThat's it! We can use our newly created multipart component in our application:\n\n```jsx live=false\n// 1. Using the default props defined in style config\nfunction Usage() {\n  return (\n    <Menu>\n      <MenuItem>Awesome</MenuItem>\n      <MenuItem>Sauce</MenuItem>\n    </Menu>\n  )\n}\n\n// 2. Overriding the default\nfunction Usage() {\n  return (\n    <Menu size=\"sm\">\n      <MenuItem>Awesome</MenuItem>\n      <MenuItem>Sauce</MenuItem>\n    </Menu>\n  )\n}\n```\n",
      "code": "var Component=(()=>{var h=Object.create;var s=Object.defineProperty;var p=Object.getOwnPropertyDescriptor;var m=Object.getOwnPropertyNames;var u=Object.getPrototypeOf,g=Object.prototype.hasOwnProperty;var f=(t,e)=>()=>(e||t((e={exports:{}}).exports,e),e.exports),y=(t,e)=>{for(var o in e)s(t,o,{get:e[o],enumerable:!0})},l=(t,e,o,r)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let i of m(e))!g.call(t,i)&&i!==o&&s(t,i,{get:()=>e[i],enumerable:!(r=p(e,i))||r.enumerable});return t};var b=(t,e,o)=>(o=t!=null?h(u(t)):{},l(e||!t||!t.__esModule?s(o,\"default\",{value:t,enumerable:!0}):o,t)),x=t=>l(s({},\"__esModule\",{value:!0}),t);var c=f((k,a)=>{a.exports=_jsx_runtime});var C={};y(C,{default:()=>T,frontmatter:()=>v});var n=b(c()),v={title:\"Component Style\",description:\"How to create and theme custom components.\",category:\"theming\"};function d(t){let e=Object.assign({p:\"p\",code:\"code\",h2:\"h2\",strong:\"strong\",ul:\"ul\",li:\"li\",h3:\"h3\",pre:\"pre\",blockquote:\"blockquote\",h4:\"h4\",a:\"a\"},t.components),{Img:o}=e;return o||S(\"Img\",!0),(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(e.p,{children:`Writing component styles in a way that is easy to maintain over the life of a\ngrowing and changing project is a challenging task.`}),`\n`,(0,n.jsxs)(e.p,{children:[\"To solve this, we came up with the idea of style configuration or \",(0,n.jsx)(e.code,{children:\"styleConfig\"}),`.\nThis is a consistent theming API that makes component styling easy to understand\nand maintain.`]}),`\n`,(0,n.jsx)(e.h2,{id:\"base-styles-and-modifier-styles\",children:\"Base styles and Modifier styles\"}),`\n`,(0,n.jsxs)(e.p,{children:[\"Most component style consists of \",(0,n.jsx)(e.strong,{children:\"base or default styles\"}),\" and \",(0,n.jsx)(e.strong,{children:`modifier\nstyles`}),\" that alter its size or visual style based on some properties or state.\"]}),`\n`,(0,n.jsx)(e.p,{children:\"Common modifier styles includes:\"}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"Size:\"}),\" A component can have different sizes (e.g. small, medium, large)\"]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"Variant:\"}),` A component can have different visual styles (e.g. outline,\nsolid, ghost)`]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"Color scheme:\"}),` For a given variant, a component can have different color\nschemes (e.g. an outline button with a red color scheme)`]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"Color mode:\"}),` A component can change its visual styles based on color mode\n(e.g. light or dark).`]}),`\n`]}),`\n`,(0,n.jsx)(e.h3,{id:\"single-part-and-multipart-components\",children:\"Single part and multipart components\"}),`\n`,(0,n.jsx)(e.p,{children:`Most components we build today are either single part components (e.g. Button,\nBadge) or multipart components (e.g. Tabs, Menu, Modal).`}),`\n`,(0,n.jsxs)(e.p,{children:[(0,n.jsx)(e.strong,{children:\"A single part component\"}),` is a component that returns a single element. For\nexample, the `,(0,n.jsx)(e.code,{children:\"<Button>\"}),\" component renders a \",(0,n.jsx)(e.code,{children:\"<button>\"}),\" HTML element:\"]}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-jsx\",live:\"false\",children:`// This component renders only one element (<button>)\n<Button>My button</Button>\n`})}),`\n`,(0,n.jsxs)(e.p,{children:[(0,n.jsx)(e.strong,{children:\"A multipart component\"}),` is a component that has multiple parts, and require\nthese parts to work correctly. This is commonly referred to as a composite\ncomponent.`]}),`\n`,(0,n.jsxs)(e.p,{children:[\"For example, a \",(0,n.jsx)(e.code,{children:\"Tabs\"}),\" component consists of \",(0,n.jsx)(e.code,{children:\"TabList\"}),\", \",(0,n.jsx)(e.code,{children:\"Tab\"}),\", \",(0,n.jsx)(e.code,{children:\"TabPanels\"}),`, and\n`,(0,n.jsx)(e.code,{children:\"TabPanel\"}),`. Styling this component as a whole might require styling each\ncomponent part.`]}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-jsx\",live:\"false\",children:`<Tabs>\n  <TabList>\n    <Tab>Tab 1</Tab>\n    <Tab>Tab 2</Tab>\n  </TabList>\n  <TabPanels>\n    <TabPanel>Tab 1</TabPanel>\n    <TabPanel>Tab 2</TabPanel>\n  </TabPanels>\n</Tabs>\n`})}),`\n`,(0,n.jsx)(e.h2,{id:\"styling-single-part-components\",children:\"Styling single part components\"}),`\n`,(0,n.jsx)(e.p,{children:\"The basic API for styling a single part component is:\"}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-jsx\",live:\"false\",children:`import { defineStyleConfig } from '@incmix-ui/react'\n\nexport default defineStyleConfig({\n  // Styles for the base style\n  baseStyle: {},\n  // Styles for the size variations\n  sizes: {},\n  // Styles for the visual style variations\n  variants: {},\n  // The default \\`size\\` or \\`variant\\` values\n  defaultProps: {},\n})\n`})}),`\n`,(0,n.jsxs)(e.blockquote,{children:[`\n`,(0,n.jsxs)(e.p,{children:[\"The \",(0,n.jsx)(e.code,{children:\"defineStyleConfig\"}),` function provide us with better type safety out of the\nbox.`]}),`\n`]}),`\n`,(0,n.jsx)(e.p,{children:`Let's say we want to create a custom button component following the design spec\nbelow.`}),`\n`,(0,n.jsx)(o,{mt:\"10\",mb:\"12\",src:\"/button-spec.png\"}),`\n`,(0,n.jsx)(e.p,{children:\"Here's a contrived implementation of the design:\"}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-tsx\",live:\"false\",children:`import { defineStyleConfig } from '@incmix-ui/react'\n\nconst Button = defineStyleConfig({\n  // The styles all button have in common\n  baseStyle: {\n    fontWeight: 'bold',\n    textTransform: 'uppercase',\n    borderRadius: 'base', // <-- border radius is same for all variants and sizes\n  },\n  // Two sizes: sm and md\n  sizes: {\n    sm: {\n      fontSize: 'sm',\n      px: 4, // <-- px is short for paddingLeft and paddingRight\n      py: 3, // <-- py is short for paddingTop and paddingBottom\n    },\n    md: {\n      fontSize: 'md',\n      px: 6, // <-- these values are tokens from the design system\n      py: 4, // <-- these values are tokens from the design system\n    },\n  },\n  // Two variants: outline and solid\n  variants: {\n    outline: {\n      border: '2px solid',\n      borderColor: 'purple.500',\n      color: 'purple.500',\n    },\n    solid: {\n      bg: 'purple.500',\n      color: 'white',\n    },\n  },\n  // The default size and variant values\n  defaultProps: {\n    size: 'md',\n    variant: 'outline',\n  },\n})\n`})}),`\n`,(0,n.jsx)(e.p,{children:`Makes sense right? Now, let's update the theme to include this new component\nstyle.`}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-jsx\",live:\"false\",children:`import { extendTheme } from '@incmix-ui/react'\n\nconst theme = extendTheme({\n  components: {\n    Button,\n  },\n})\n`})}),`\n`,(0,n.jsxs)(e.p,{children:[(0,n.jsx)(e.strong,{children:\"And that's it!\"}),` You can use your new Button along with its custom variants\nthroughout your app. But what if we want to create a custom component that's not\npart of Incmix UI? Let's use the following design spec for a Card component:`]}),`\n`,(0,n.jsx)(o,{mt:\"10\",mb:\"12\",src:\"/card-spec.png\"}),`\n`,(0,n.jsx)(e.p,{children:\"Here's a contrived implementation of the design:\"}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-jsx\",live:\"false\",children:`const Card = defineStyleConfig({\n  // The styles all Cards have in common\n  baseStyle: {\n    display: 'flex',\n    flexDirection: 'column',\n    background: 'white',\n    alignItems: 'center',\n    gap: 6,\n  },\n  // Two variants: rounded and smooth\n  variants: {\n    rounded: {\n      padding: 8,\n      borderRadius: 'xl',\n      boxShadow: 'xl',\n    },\n    smooth: {\n      padding: 6,\n      borderRadius: 'base',\n      boxShadow: 'md',\n    },\n  },\n  // The default variant value\n  defaultProps: {\n    variant: 'smooth',\n  },\n})\n`})}),`\n`,(0,n.jsx)(e.p,{children:`As with the Button component, we'll update the theme to include the new Card\ncomponent style.`}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-jsx\",live:\"false\",children:`import { extendTheme } from '@incmix-ui/react'\n\nconst theme = extendTheme({\n  components: {\n    Card,\n  },\n})\n`})}),`\n`,(0,n.jsxs)(e.p,{children:[\"But in this case we'd have to \",(0,n.jsx)(e.strong,{children:\"consume\"}),\" these styles because the \",(0,n.jsx)(e.code,{children:\"Card\"}),`\ncomponent is not a built-in component in Incmix UI.`]}),`\n`,(0,n.jsx)(e.h3,{id:\"consuming-style-config\",children:\"Consuming style config\"}),`\n`,(0,n.jsxs)(e.p,{children:[\"Since the new Card component is \",(0,n.jsx)(e.strong,{children:\"not\"}),` part of Incmix UI we need to create a\nnew React component and consume the style we just created. We can do that using\n`,(0,n.jsx)(e.code,{children:\"useStyleConfig\"}),\" hook.\"]}),`\n`,(0,n.jsx)(e.h3,{id:\"usestyleconfig-api\",children:\"useStyleConfig API\"}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-jsx\",live:\"false\",children:`const styles = useStyleConfig(themeKey, props)\n`})}),`\n`,(0,n.jsx)(e.h4,{id:\"parameters\",children:\"Parameters\"}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.code,{children:\"themeKey\"}),\": the key in \",(0,n.jsx)(e.code,{children:\"theme.components\"}),` that points to the desired\nstyleConfig.`]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.code,{children:\"props\"}),`: the options object used to compute the component styles. It typically\nconsists of the `,(0,n.jsx)(e.code,{children:\"size\"}),\", \",(0,n.jsx)(e.code,{children:\"variant\"}),\", and \",(0,n.jsx)(e.code,{children:\"colorScheme\"})]}),`\n`]}),`\n`,(0,n.jsx)(e.h4,{id:\"return-value\",children:\"Return Value\"}),`\n`,(0,n.jsxs)(e.p,{children:[\"The computed styles for the component based on \",(0,n.jsx)(e.code,{children:\"props\"}),\" passed. If no \",(0,n.jsx)(e.code,{children:\"props\"}),` is\npassed, the `,(0,n.jsx)(e.code,{children:\"defaultProps\"}),\" defined in the style config will be used.\"]}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-jsx\",live:\"false\",children:`import { Box, useStyleConfig } from '@incmix-ui/react'\n\nfunction Card(props) {\n  const { variant, ...rest } = props\n\n  const styles = useStyleConfig('Card', { variant })\n\n  // Pass the computed styles into the \\`__css\\` prop\n  return <Box __css={styles} {...rest} />\n}\n`})}),`\n`,(0,n.jsxs)(e.blockquote,{children:[`\n`,(0,n.jsxs)(e.p,{children:[\"Please note that we are passing the styles to the prop \",(0,n.jsx)(e.code,{children:\"__css\"}),`. It has the\nsame API as `,(0,n.jsxs)(e.a,{href:\"/docs/styled-system/the-sx-prop\",children:[\"the \",(0,n.jsx)(e.code,{children:\"sx\"}),\" prop\"]}),`, but has a lower\nstyle priority. This means you can override the style properties with incmix\nstyle props.`]}),`\n`]}),`\n`,(0,n.jsx)(e.p,{children:`And lastly - the fun part - let's use our custom Card component anywhere in our\napp:`}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-jsx\",live:\"false\",children:`// 1. Using the default props defined in style config\nfunction Usage() {\n  return (\n    <Card>\n      <Image src=\"https://incmix-ui.com/eric.jpg\" rounded=\"full\" w={32} h={32} boxShadow=\"md\" />\n      <Heading mt={6} maxW={60} size=\"lg\" textAlign=\"center\" color=\"gray.700\">\n        Welcome back, Eric\n      </Heading>\n      <Text mt={6} mb={6} size=\"sm\" color=\"blackAlpha.500\">\n        Use your fingerprint to continue.\n      </Text>\n      <Image src=\"/fingerprint.png\" w={32} h={32} />\n    </Card>\n  )\n}\n\n// 2. Overriding the default\nfunction Usage() {\n  return (\n    <Card variant=\"smooth\">\n      <Image src=\"https://incmix-ui.com/eric.jpg\" rounded=\"full\" w={32} h={32} boxShadow=\"md\" />\n      <Heading mt={6} maxW={60} size=\"lg\" textAlign=\"center\" color=\"gray.700\">\n        Welcome back, Eric\n      </Heading>\n      <Text mt={6} mb={6} size=\"sm\" color=\"blackAlpha.500\">\n        Use your fingerprint to continue.\n      </Text>\n      <Image src=\"/fingerprint.png\" w={32} h={32} />\n    </Card>\n  )\n}\n`})}),`\n`,(0,n.jsx)(e.h2,{id:\"styling-multipart-components\",children:\"Styling multipart components\"}),`\n`,(0,n.jsx)(e.p,{children:`This is very similar to styling single part components with a few differences\nyou need to be aware of.`}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsxs)(e.li,{children:[`Given that multipart refers to a component with multiple parts, you'll need to\ndefine the parts, and pass them into the `,(0,n.jsx)(e.code,{children:\"createMultiStyleConfigHelpers\"}),`\nfunction`]}),`\n`,(0,n.jsxs)(e.li,{children:[\"You'll need to provide styles for each \",(0,n.jsx)(e.code,{children:\"part\"}),\", \",(0,n.jsx)(e.code,{children:\"baseStyle\"}),\", \",(0,n.jsx)(e.code,{children:\"sizes\"}),`, and\n`,(0,n.jsx)(e.code,{children:\"variants\"}),\".\"]}),`\n`]}),`\n`,(0,n.jsxs)(e.blockquote,{children:[`\n`,(0,n.jsxs)(e.p,{children:[(0,n.jsx)(e.strong,{children:\"Pro tip \\u{1F4A1}\"}),`: If you're looking for a list of parts of a multipart component\nyou can check it by clicking on the `,(0,n.jsx)(e.strong,{children:'\"View theme source\"'}),` button at the top\nof the documentation page for that certain component. Check out\n`,(0,n.jsx)(e.a,{href:\"https://incmix-ui.com/docs/components/overlay/modal\",children:\"this\"}),\" example.\"]}),`\n`]}),`\n`,(0,n.jsx)(e.p,{children:\"Here's what the style config for multipart components looks like:\"}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-jsx\",live:\"false\",children:`export default {\n  // The parts of the component\n  parts: [],\n  // The base styles for each part\n  baseStyle: {},\n  // The size styles for each part\n  sizes: {},\n  // The variant styles for each part\n  variants: {},\n  // The default \\`size\\` or \\`variant\\` values\n  defaultProps: {},\n}\n`})}),`\n`,(0,n.jsx)(e.p,{children:`For example, here's what the style configurations for a custom menu component\nlooks like:`}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-tsx\",live:\"false\",children:`import { createMultiStyleConfigHelpers } from '@incmix-ui/styled-system'\n\n// This function creates a set of function that helps us create multipart component styles.\nconst helpers = createMultiStyleConfigHelpers(['menu', 'item'])\n\nconst Menu = helpers.defineMultiStyleConfig({\n  baseStyle: {\n    menu: {\n      boxShadow: 'lg',\n      rounded: 'lg',\n      flexDirection: 'column',\n      py: '2',\n    },\n    item: {\n      fontWeight: 'medium',\n      lineHeight: 'normal',\n      color: 'gray.600',\n    },\n  },\n  sizes: {\n    sm: {\n      item: {\n        fontSize: '0.75rem',\n        px: 2,\n        py: 1,\n      },\n    },\n    md: {\n      item: {\n        fontSize: '0.875rem',\n        px: 3,\n        py: 2,\n      },\n    },\n  },\n  variants: {\n    bold: {\n      item: {\n        fontWeight: 'bold',\n      },\n      menu: {\n        boxShadow: 'xl',\n      },\n    },\n    colorful: {\n      item: {\n        color: 'orange.600',\n      },\n      menu: {\n        bg: 'orange.100',\n      },\n    },\n  },\n  defaultProps: {\n    size: 'md',\n  },\n})\n`})}),`\n`,(0,n.jsx)(e.p,{children:\"Next, we'll update the theme object to include this new component style.\"}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-jsx\",live:\"false\",children:`import { extendTheme } from '@incmix-ui/react'\n\nconst theme = extendTheme({\n  components: {\n    Menu,\n  },\n})\n`})}),`\n`,(0,n.jsx)(e.h3,{id:\"consuming-multipart-style-config\",children:\"Consuming multipart style config\"}),`\n`,(0,n.jsxs)(e.p,{children:[`Now that the style config is hooked into the theme, we can consume within any\ncomponent using `,(0,n.jsx)(e.code,{children:\"useMultiStyleConfig\"}),\" hook.\"]}),`\n`,(0,n.jsxs)(e.p,{children:[`We can also mount the computed styles on a specialized context provider called\n`,(0,n.jsx)(e.code,{children:\"StylesProvider\"}),`. These styles will now be available to other sub-components. To\nread from the context, use the `,(0,n.jsx)(e.code,{children:\"useStyles\"}),\" hook.\"]}),`\n`,(0,n.jsx)(e.h3,{id:\"usemultistyleconfig-api\",children:\"useMultiStyleConfig API\"}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-jsx\",live:\"false\",children:`const styles = useMultiStyleConfig(themeKey, props)\n`})}),`\n`,(0,n.jsx)(e.h4,{id:\"parameters-1\",children:\"Parameters\"}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.code,{children:\"themeKey\"}),\": the key in \",(0,n.jsx)(e.code,{children:\"theme.components\"}),` that points to the desired\nstyleConfig.`]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.code,{children:\"props\"}),`: an option of the options for computing the final styles. It typically\nconsists of the `,(0,n.jsx)(e.code,{children:\"size\"}),\", \",(0,n.jsx)(e.code,{children:\"variant\"}),\", and \",(0,n.jsx)(e.code,{children:\"colorScheme\"}),\".\"]}),`\n`]}),`\n`,(0,n.jsx)(e.h4,{id:\"return-values\",children:\"Return Values\"}),`\n`,(0,n.jsxs)(e.p,{children:[\"The computed styles for each component part based on \",(0,n.jsx)(e.code,{children:\"size\"}),\", or \",(0,n.jsx)(e.code,{children:\"variant\"}),`. If\nnone of these were passed, the `,(0,n.jsx)(e.code,{children:\"defaultProps\"}),` defined in the styleConfig will be\nused.`]}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-jsx\",live:\"false\",children:`// 1. Import the components and hook\nimport { StylesProvider, useMultiStyleConfig, useStyles } from '@incmix-ui/react'\n\nfunction Menu(props) {\n  const { size, variant, children, ...rest } = props\n\n  // 2. Consume the \\`useMultiStyleConfig\\` hook\n  const styles = useMultiStyleConfig('Menu', { size, variant })\n\n  return (\n    <Flex __css={styles.menu} {...rest}>\n      {/* 3. Mount the computed styles on \\`StylesProvider\\` */}\n      <StylesProvider value={styles}>{children}</StylesProvider>\n    </Flex>\n  )\n}\n\nfunction MenuItem(props) {\n  // 4. Read computed \\`item\\` styles from styles provider\n  const styles = useStyles()\n  return <Box as=\"button\" __css={styles.item} {...props} />\n}\n`})}),`\n`,(0,n.jsx)(e.p,{children:\"That's it! We can use our newly created multipart component in our application:\"}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-jsx\",live:\"false\",children:`// 1. Using the default props defined in style config\nfunction Usage() {\n  return (\n    <Menu>\n      <MenuItem>Awesome</MenuItem>\n      <MenuItem>Sauce</MenuItem>\n    </Menu>\n  )\n}\n\n// 2. Overriding the default\nfunction Usage() {\n  return (\n    <Menu size=\"sm\">\n      <MenuItem>Awesome</MenuItem>\n      <MenuItem>Sauce</MenuItem>\n    </Menu>\n  )\n}\n`})})]})}function w(t={}){let{wrapper:e}=t.components||{};return e?(0,n.jsx)(e,Object.assign({},t,{children:(0,n.jsx)(d,t)})):d(t)}var T=w;function S(t,e){throw new Error(\"Expected \"+(e?\"component\":\"object\")+\" `\"+t+\"` to be defined: you likely forgot to import, pass, or provide it.\")}return x(C);})();\n;return Component;"
    },
    "_id": "docs/styled-system/component-style.mdx",
    "_raw": {
      "sourceFilePath": "docs/styled-system/component-style.mdx",
      "sourceFileName": "component-style.mdx",
      "sourceFileDir": "docs/styled-system",
      "contentType": "mdx",
      "flattenedPath": "docs/styled-system/component-style"
    },
    "type": "Doc",
    "slug": "/docs/styled-system/component-style",
    "frontMatter": {
      "title": "Component Style",
      "description": "How to create and theme custom components.",
      "slug": "/docs/styled-system/component-style",
      "editUrl": "https://github.com/incmix-ui/incmix-ui-docs/tree/main/content/docs/styled-system/component-style.mdx",
      "headings": [
        {
          "text": "Base styles and Modifier styles",
          "id": "base-styles-and-modifier-styles",
          "level": "h2"
        },
        {
          "text": "Single part and multipart components",
          "id": "single-part-and-multipart-components",
          "level": "h3"
        },
        {
          "text": "Styling single part components",
          "id": "styling-single-part-components",
          "level": "h2"
        },
        {
          "text": "Consuming style config",
          "id": "consuming-style-config",
          "level": "h3"
        },
        {
          "text": "useStyleConfig API",
          "id": "usestyleconfig-api",
          "level": "h3"
        },
        {
          "text": "Styling multipart components",
          "id": "styling-multipart-components",
          "level": "h2"
        },
        {
          "text": "Consuming multipart style config",
          "id": "consuming-multipart-style-config",
          "level": "h3"
        },
        {
          "text": "useMultiStyleConfig API",
          "id": "usemultistyleconfig-api",
          "level": "h3"
        }
      ]
    }
  },
  {
    "title": "CSS Variables",
    "description": "Working with color mode (light and dark mode) in Incmix UI",
    "scope": "usage",
    "category": "features",
    "body": {
      "raw": "\nIncmix UI now converts theme tokens (colors, font sizes, etc) to CSS Custom\nProperties (also known as \"CSS variables\").\n\nCSS variables are now supported in all modern browsers, and we think they are\nuseful to:\n\n- avoid prop interpolations;\n- avoid classname regeneration from\n  [emotion](https://emotion.sh/docs/introduction);\n- reduce runtime evaluation of token values in Theme context;\n- use theme token outside Incmix's component (embedded forms, markdown content,\n  etc.)\n\n## Overview\n\nThere are three main components you should know about when using CSS variables:\n\n- How Incmix converts tokens to custom properties\n- How to consume them in and outside Incmix's component\n- Where we attach the custom properties to\n\n## Converting theme tokens to CSS variables\n\nBy default, Incmix UI converts theme tokens defined in your theme (or our\ndefault theme) to CSS variables internally so you don't have to.\n\nGiven a theme object that looks like this:\n\n```jsx live=false\nconst theme = {\n  fontSizes: {\n    lg: '18px',\n  },\n  colors: {\n    gray: {\n      100: '#fafafa',\n      200: '#f7f7f7',\n    },\n  },\n}\n```\n\nWhen you pass this theme to the `IncmixProvider`, we'll automatically generate\nCSS variables that look like:\n\n```css\n:root {\n  --incmix-fontSizes-lg: '18px';\n  --incmix-colors-gray-100: '#fafafa';\n  --incmix-colors-gray-200: '#f7f7f7';\n}\n```\n\n> Note: **The generated custom properties are prefixed with `incmix-*`** to\n> avoid conflicts with third party CSS.\n\n## Consuming CSS Variables\n\nWhen using Incmix's components, we manage the conversion of theme tokens to\ntheir respective css variable.\n\n```jsx live=false\n// You type this\n<Box color=\"gray.100\" />\n\n// Incmix generates something like\n.css-box {\n   color: \"var(--incmix-colors-gray-100)\"\n}\n```\n\n> Note: We do this automatically when you pass style props or use the `sx` prop.\n\n### Styling non-incmix components\n\nIn certain scenarios, you might need to style components that are not managed by\nIncmix. In this case, you can use the raw CSS variable values.\n\n```jsx live=false\n// let's say you have an embedded form\n<FormiumForm />\n```\n\nYou can write custom CSS to style the components\n\n```css\n.formium-form {\n  color: var(--incmix-colors-gray-700);\n  background-color: var(--incmix-colors-gray-50);\n}\n```\n\nor wrap the component in `<Box/>` and style it with convenience.\n\n```jsx live=false\n<Box sx={{ '.formium': { bg: 'gray.50', color: 'gray.700' } }}>\n  <FormiumForm />\n</Box>\n```\n\n## Attaching the CSS variables\n\nBy default, Incmix attaches the generated CSS variables to the `:root` element.\n\n> The :root pseudo-class represents the top level of the HTML document.\n\nTo change the root element that Incmix attaches the CSS variables to, pass the\n`cssVarsRoot` prop to `IncmixProvider` and set its value to the css selector of\nthe element you want.\n\n```jsx live=false\n<IncmixProvider cssVarsRoot=\"#app\">\n  <App />\n</IncmixProvider>\n```\n\n## Creating scoped, theme-aware CSS variables\n\n> This is experimental and might be removed in future versions\n\nWhen using the `sx` prop or the `incmix(...)` factory, you can create variables\nthat reference theme tokens. This makes it possible to change property values\nbased on breakpoint, or light/dark mode with ease.\n\n```jsx live=false\n<Box\n  sx={{\n    // \"colors.gray.100\" is shorthand for `var(--incmix-colors-gray.100)`\n    '--banner-color': 'colors.gray.100',\n    '.external-banner': {\n      bg: 'var(--banner-color)',\n      '.button': {\n        borderColor: 'var(--banner-color)',\n      },\n    },\n  }}\n>\n  <ExternalBanner />\n</Box>\n```\n",
      "code": "var Component=(()=>{var d=Object.create;var i=Object.defineProperty;var m=Object.getOwnPropertyDescriptor;var p=Object.getOwnPropertyNames;var u=Object.getPrototypeOf,g=Object.prototype.hasOwnProperty;var v=(o,e)=>()=>(e||o((e={exports:{}}).exports,e),e.exports),x=(o,e)=>{for(var r in e)i(o,r,{get:e[r],enumerable:!0})},c=(o,e,r,a)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let t of p(e))!g.call(o,t)&&t!==r&&i(o,t,{get:()=>e[t],enumerable:!(a=m(e,t))||a.enumerable});return o};var f=(o,e,r)=>(r=o!=null?d(u(o)):{},c(e||!o||!o.__esModule?i(r,\"default\",{value:o,enumerable:!0}):r,o)),b=o=>c(i({},\"__esModule\",{value:!0}),o);var l=v((I,s)=>{s.exports=_jsx_runtime});var w={};x(w,{default:()=>k,frontmatter:()=>y});var n=f(l()),y={title:\"CSS Variables\",description:\"Working with color mode (light and dark mode) in Incmix UI\",category:\"features\"};function h(o){let e=Object.assign({p:\"p\",ul:\"ul\",li:\"li\",a:\"a\",h2:\"h2\",pre:\"pre\",code:\"code\",blockquote:\"blockquote\",strong:\"strong\",h3:\"h3\"},o.components);return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(e.p,{children:`Incmix UI now converts theme tokens (colors, font sizes, etc) to CSS Custom\nProperties (also known as \"CSS variables\").`}),`\n`,(0,n.jsx)(e.p,{children:`CSS variables are now supported in all modern browsers, and we think they are\nuseful to:`}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsx)(e.li,{children:\"avoid prop interpolations;\"}),`\n`,(0,n.jsxs)(e.li,{children:[`avoid classname regeneration from\n`,(0,n.jsx)(e.a,{href:\"https://emotion.sh/docs/introduction\",children:\"emotion\"}),\";\"]}),`\n`,(0,n.jsx)(e.li,{children:\"reduce runtime evaluation of token values in Theme context;\"}),`\n`,(0,n.jsx)(e.li,{children:`use theme token outside Incmix's component (embedded forms, markdown content,\netc.)`}),`\n`]}),`\n`,(0,n.jsx)(e.h2,{id:\"overview\",children:\"Overview\"}),`\n`,(0,n.jsx)(e.p,{children:\"There are three main components you should know about when using CSS variables:\"}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsx)(e.li,{children:\"How Incmix converts tokens to custom properties\"}),`\n`,(0,n.jsx)(e.li,{children:\"How to consume them in and outside Incmix's component\"}),`\n`,(0,n.jsx)(e.li,{children:\"Where we attach the custom properties to\"}),`\n`]}),`\n`,(0,n.jsx)(e.h2,{id:\"converting-theme-tokens-to-css-variables\",children:\"Converting theme tokens to CSS variables\"}),`\n`,(0,n.jsx)(e.p,{children:`By default, Incmix UI converts theme tokens defined in your theme (or our\ndefault theme) to CSS variables internally so you don't have to.`}),`\n`,(0,n.jsx)(e.p,{children:\"Given a theme object that looks like this:\"}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-jsx\",live:\"false\",children:`const theme = {\n  fontSizes: {\n    lg: '18px',\n  },\n  colors: {\n    gray: {\n      100: '#fafafa',\n      200: '#f7f7f7',\n    },\n  },\n}\n`})}),`\n`,(0,n.jsxs)(e.p,{children:[\"When you pass this theme to the \",(0,n.jsx)(e.code,{children:\"IncmixProvider\"}),`, we'll automatically generate\nCSS variables that look like:`]}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-css\",children:`:root {\n  --incmix-fontSizes-lg: '18px';\n  --incmix-colors-gray-100: '#fafafa';\n  --incmix-colors-gray-200: '#f7f7f7';\n}\n`})}),`\n`,(0,n.jsxs)(e.blockquote,{children:[`\n`,(0,n.jsxs)(e.p,{children:[\"Note: \",(0,n.jsxs)(e.strong,{children:[\"The generated custom properties are prefixed with \",(0,n.jsx)(e.code,{children:\"incmix-*\"})]}),` to\navoid conflicts with third party CSS.`]}),`\n`]}),`\n`,(0,n.jsx)(e.h2,{id:\"consuming-css-variables\",children:\"Consuming CSS Variables\"}),`\n`,(0,n.jsx)(e.p,{children:`When using Incmix's components, we manage the conversion of theme tokens to\ntheir respective css variable.`}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-jsx\",live:\"false\",children:`// You type this\n<Box color=\"gray.100\" />\n\n// Incmix generates something like\n.css-box {\n   color: \"var(--incmix-colors-gray-100)\"\n}\n`})}),`\n`,(0,n.jsxs)(e.blockquote,{children:[`\n`,(0,n.jsxs)(e.p,{children:[\"Note: We do this automatically when you pass style props or use the \",(0,n.jsx)(e.code,{children:\"sx\"}),\" prop.\"]}),`\n`]}),`\n`,(0,n.jsx)(e.h3,{id:\"styling-non-incmix-components\",children:\"Styling non-incmix components\"}),`\n`,(0,n.jsx)(e.p,{children:`In certain scenarios, you might need to style components that are not managed by\nIncmix. In this case, you can use the raw CSS variable values.`}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-jsx\",live:\"false\",children:`// let's say you have an embedded form\n<FormiumForm />\n`})}),`\n`,(0,n.jsx)(e.p,{children:\"You can write custom CSS to style the components\"}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-css\",children:`.formium-form {\n  color: var(--incmix-colors-gray-700);\n  background-color: var(--incmix-colors-gray-50);\n}\n`})}),`\n`,(0,n.jsxs)(e.p,{children:[\"or wrap the component in \",(0,n.jsx)(e.code,{children:\"<Box/>\"}),\" and style it with convenience.\"]}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-jsx\",live:\"false\",children:`<Box sx={{ '.formium': { bg: 'gray.50', color: 'gray.700' } }}>\n  <FormiumForm />\n</Box>\n`})}),`\n`,(0,n.jsx)(e.h2,{id:\"attaching-the-css-variables\",children:\"Attaching the CSS variables\"}),`\n`,(0,n.jsxs)(e.p,{children:[\"By default, Incmix attaches the generated CSS variables to the \",(0,n.jsx)(e.code,{children:\":root\"}),\" element.\"]}),`\n`,(0,n.jsxs)(e.blockquote,{children:[`\n`,(0,n.jsx)(e.p,{children:\"The :root pseudo-class represents the top level of the HTML document.\"}),`\n`]}),`\n`,(0,n.jsxs)(e.p,{children:[`To change the root element that Incmix attaches the CSS variables to, pass the\n`,(0,n.jsx)(e.code,{children:\"cssVarsRoot\"}),\" prop to \",(0,n.jsx)(e.code,{children:\"IncmixProvider\"}),` and set its value to the css selector of\nthe element you want.`]}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-jsx\",live:\"false\",children:`<IncmixProvider cssVarsRoot=\"#app\">\n  <App />\n</IncmixProvider>\n`})}),`\n`,(0,n.jsx)(e.h2,{id:\"creating-scoped-theme-aware-css-variables\",children:\"Creating scoped, theme-aware CSS variables\"}),`\n`,(0,n.jsxs)(e.blockquote,{children:[`\n`,(0,n.jsx)(e.p,{children:\"This is experimental and might be removed in future versions\"}),`\n`]}),`\n`,(0,n.jsxs)(e.p,{children:[\"When using the \",(0,n.jsx)(e.code,{children:\"sx\"}),\" prop or the \",(0,n.jsx)(e.code,{children:\"incmix(...)\"}),` factory, you can create variables\nthat reference theme tokens. This makes it possible to change property values\nbased on breakpoint, or light/dark mode with ease.`]}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-jsx\",live:\"false\",children:`<Box\n  sx={{\n    // \"colors.gray.100\" is shorthand for \\`var(--incmix-colors-gray.100)\\`\n    '--banner-color': 'colors.gray.100',\n    '.external-banner': {\n      bg: 'var(--banner-color)',\n      '.button': {\n        borderColor: 'var(--banner-color)',\n      },\n    },\n  }}\n>\n  <ExternalBanner />\n</Box>\n`})})]})}function S(o={}){let{wrapper:e}=o.components||{};return e?(0,n.jsx)(e,Object.assign({},o,{children:(0,n.jsx)(h,o)})):h(o)}var k=S;return b(w);})();\n;return Component;"
    },
    "_id": "docs/styled-system/css-variables.mdx",
    "_raw": {
      "sourceFilePath": "docs/styled-system/css-variables.mdx",
      "sourceFileName": "css-variables.mdx",
      "sourceFileDir": "docs/styled-system",
      "contentType": "mdx",
      "flattenedPath": "docs/styled-system/css-variables"
    },
    "type": "Doc",
    "slug": "/docs/styled-system/css-variables",
    "frontMatter": {
      "title": "CSS Variables",
      "description": "Working with color mode (light and dark mode) in Incmix UI",
      "slug": "/docs/styled-system/css-variables",
      "editUrl": "https://github.com/incmix-ui/incmix-ui-docs/tree/main/content/docs/styled-system/css-variables.mdx",
      "headings": [
        {
          "text": "Overview",
          "id": "overview",
          "level": "h2"
        },
        {
          "text": "Converting theme tokens to CSS variables",
          "id": "converting-theme-tokens-to-css-variables",
          "level": "h2"
        },
        {
          "text": "Consuming CSS Variables",
          "id": "consuming-css-variables",
          "level": "h2"
        },
        {
          "text": "Styling non-incmix components",
          "id": "styling-non-incmix-components",
          "level": "h3"
        },
        {
          "text": "Attaching the CSS variables",
          "id": "attaching-the-css-variables",
          "level": "h2"
        },
        {
          "text": "Creating scoped, theme-aware CSS variables",
          "id": "creating-scoped-theme-aware-css-variables",
          "level": "h2"
        }
      ]
    }
  },
  {
    "title": "Customize Theme",
    "description": "How to modify Incmix UI's default theme",
    "scope": "usage",
    "category": "theming",
    "body": {
      "raw": "\nBy default, all Incmix components inherit values from the default theme. In some\nscenarios, you might need to customize the theme tokens to match your design\nrequirements.\n\nHere are some options depending on your goals:\n\n- Customize the theme tokens like colors, font sizes, line heights, etc.\n- Customize the component styles, changing the base styles, sizes, or variants.\n- Customize the global styles.\n\n## Customizing theme tokens\n\nTo extend or override a token in the default theme, import the `extendTheme`\nfunction and add the keys you'd like to override. You can also add new values to\nthe theme.\n\nFor example, if you'd like to update the colors in the theme to include your\nbrand colors, here's what you'll do:\n\n```jsx live=false\n// 1. Import `extendTheme`\nimport { extendTheme } from \"@incmix-ui/react\"\n\n// 2. Call `extendTheme` and pass your custom values\nconst theme = extendTheme({\n  colors: {\n    brand: {\n      100: \"#f7fafc\",\n      // ...\n      900: \"#1a202c\",\n    },\n  },\n})\n\n// 3. Pass the new theme to `IncmixProvider`\n<IncmixProvider theme={theme}>\n  <App />\n</IncmixProvider>\n\n// 4. Now you can use these colors in your components\nfunction Usage() {\n  return <Box bg=\"brand.100\">Welcome</Box>\n}\n```\n\nYou can also use the color for the `colorScheme` prop like this:\n\n```jsx live=false\n<Button colorScheme=\"brand\">Click me</Button>\n```\n\n> If you're curious as to what theme styles you can override, please reference\n> the\n> [default theme foundation style files](https://github.com/incmix-ui/incmix-ui/tree/main/packages/components/theme/src/foundations).\n\n## Customizing component styles\n\nIncmix has a specific approach or API for styling components. The main idea is\nmost components have default or base styles (`baseStyle`), styles for different\nsizes (`sizes`), and styles for different visual variants (`variants`).\n\nIt is important to understand this so you can override any component style\neffectively.\n\n> You're not limited to the component styles that Incmix provides, you can also\n> create your own custom component styles.\n> [Learn more](/docs/styled-system/component-style).\n\n### Customizing single components\n\nAs we mentioned earlier, a component style consists of `baseStyle`, `sizes`,\n`variants` and an optional `defaultProps` to denote the default `size`,\n`variant` or `colorScheme`.\n\n> Not every component has all three `defaultProps`, to figure out which prop can\n> be set just have a short look on the theme source by using the\n> `View theme source` button on the top of every components page.\n\nHere's what the component style object looks like:\n\n```tsx live=false\nimport { ComponentStyleConfig } from '@incmix-ui/react'\n\nconst ComponentStyle: ComponentStyleConfig = {\n  // style object for base or default style\n  baseStyle: {},\n  // styles for different sizes (\"sm\", \"md\", \"lg\")\n  sizes: {},\n  // styles for different visual variants (\"outline\", \"solid\")\n  variants: {},\n  // default values for 'size', 'variant' and 'colorScheme'\n  defaultProps: {\n    size: '',\n    variant: '',\n    colorScheme: '',\n  },\n}\n```\n\nFor example, let's override the component styles for Incmix's Button component.\n\n```tsx live=false\n// theme.ts (tsx file with usage of StyleFunctions, see 4.)\nimport { extendTheme } from '@incmix-ui/react'\nimport type { StyleFunctionProps } from '@incmix-ui/styled-system'\n\nconst theme = extendTheme({\n  components: {\n    Button: {\n      // 1. We can update the base styles\n      baseStyle: {\n        fontWeight: 'bold', // Normally, it is \"semibold\"\n      },\n      // 2. We can add a new button size or extend existing\n      sizes: {\n        xl: {\n          h: '56px',\n          fontSize: 'lg',\n          px: '32px',\n        },\n      },\n      // 3. We can add a new visual variant\n      variants: {\n        'with-shadow': {\n          bg: 'red.400',\n          boxShadow: '0 0 2px 2px #efdfde',\n        },\n        // 4. We can override existing variants\n        solid: (props: StyleFunctionProps) => ({\n          bg: props.colorMode === 'dark' ? 'red.300' : 'red.500',\n        }),\n        // 5. We can add responsive variants\n        sm: {\n          bg: 'teal.500',\n          fontSize: 'md',\n        },\n      },\n      // 6. We can overwrite defaultProps\n      defaultProps: {\n        size: 'lg', // default is md\n        variant: 'sm', // default is solid\n        colorScheme: 'green', // default is gray\n      },\n    },\n  },\n})\n\nexport default theme\n```\n\nThat's it! When you use the Button from Incmix, these updates will be\nautomatically applied.\n\n> When styling/overwriting the theme for a component be sure that it is really a\n> single component with only one part, since you otherwise need to name the part\n> that should be affected by your change when styling\n> [multipart components](/docs/styled-system/component-style#styling-multipart-components).\n\n```jsx live=false\n<Button size=\"xl\" variant=\"with-shadow\">\n  Welcome\n</Button>\n```\n\n> If you're curious as to what component styles you can override, please\n> reference the\n> [default component style files](https://github.com/incmix-ui/incmix-ui/tree/main/packages/components).\n\n### Customizing global styles\n\nGlobal styles are theme-aware styles you can apply to any html element globally.\n\nTo add global styles, update the `theme.styles.global` key in the theme. Global\nstyles can be a style object or a function that returns a style object.\n\n```tsx live=false\n// theme.ts (Version 2 needs to be a tsx file, due to usage of StyleFunctions)\nimport { extendTheme } from '@incmix-ui/react'\nimport { mode } from '@incmix-ui/theme-tools'\nimport type { StyleFunctionProps } from '@incmix-ui/styled-system'\n\n// Version 1: Using objects\nconst theme = extendTheme({\n  styles: {\n    global: {\n      // styles for the `body`\n      body: {\n        bg: 'gray.400',\n        color: 'white',\n      },\n      // styles for the `a`\n      a: {\n        color: 'teal.500',\n        _hover: {\n          textDecoration: 'underline',\n        },\n      },\n    },\n  },\n})\n\n// Version 2: Using functions\nconst overrides = extendTheme({\n  styles: {\n    global: (props: StyleFunctionProps) => ({\n      body: {\n        fontFamily: 'body',\n        color: mode('gray.800', 'whiteAlpha.900')(props),\n        bg: mode('white', 'gray.800')(props),\n        lineHeight: 'base',\n      },\n    }),\n  },\n})\n```\n\n### Responsive variants\n\nResponsive variants can be used to have different styles for components\ndepending on the current active breakpoint. The properties in `sizes` of the\ncomponent will be overwritten if passed in the responsive variant.\n\n> With responsive variants, prop override might not work as expected since we\n> use regular CSS media queries. That's why we also came up with the notion of\n> `!important` as an escape hatch.\n\nTo declare the responsive variants you can simply add them to the variants of\nthe component:\n\n```ts live=false\nconst theme = extendTheme({\n  components: {\n    Button: {\n      ...\n      sizes: {\n        sm: {\n          fontSize: 'md'\n        }\n      },\n      variants: {\n        ...\n        base: {\n          bg: 'yellow.500',\n          fontSize: 'md'\n         },\n        sm: {\n          bg: 'teal.500',\n          fontSize: 'lg'\n         },\n        md: {\n          bg: 'orange.500',\n          fontSize: 'xl'\n         },\n      }\n    },\n  },\n});\n```\n\n> Based on how the responsive variants are designed, there's no support for\n> responsive `colorScheme` since it is technically not a variant.\n\nJust pass them either with the `Array syntax` or the `Object syntax` to the\ncomponent. The array syntax may not be work as expected, since it ignores the\nnaming of the variant and uses them straight in the order on which they are\npassed into the array.\n\n```tsx live=false\n<>\n  <Button variant={{ base: 'base', md: 'md' }}>Object syntax</Button>\n  // the button will be orange after the `sm` breakpoint due to the array syntax\n  <Button variant={['base', 'md']}>Array syntax</Button>\n</>\n```\n\nIt is required to use `!important` within a components style prop if this prop\nis set in the responsive variant as shown in the example below based on the\ntheme above.\n\n```tsx live=false\n<>\n  <Button variant={{ sm: 'sm' }}>fontSize lg after breakpoint sm</Button>\n  // without declaration of fontSize in the sm variant the fontSize would be lg as expected\n  <Button variant={{ sm: 'sm' }} fontSize=\"xl\">\n    still fontSize lg after breakpoint sm\n  </Button>\n  <Button variant={{ sm: 'sm' }} fontSize=\"xl !important\">\n    fontSize xl due to the !important\n  </Button>\n</>\n```\n\nCombined usage with `size` in the theme is only possible by covering breakpoints\nbelow the responsive variant or by using `!important`, which overrides\neverything.\n\n```tsx live=false\n<Button size=\"sm\" variant={{ md: 'md' }}>\n  fontSize md from 'sizes' until breakpoint md where the variant takes over\n</Button>\n```\n\n## Scaling out your project\n\nAs your project grows in size, it is best to keep things organized. We highly\nsuggest that instead of using a single `theme.js` (or `theme.ts`) file, you\ncreate a `/theme` folder in its place. Inside this folder, you could have a\ndirectory structure that looks like this:\n\n```bash\n📁 theme\n  📄 index.js  # my main theme entrypoint\n  📄 styles.js  # all my global style overrides\n  📁 foundations\n    📄 borders.js  # all my border overrides\n  📁 components\n    📄 button.js  # all my button overrides\n```\n\nThis way, you can structure your main theme entrypoint file to be much cleaner,\nlike this:\n\n```jsx live=false\n// theme/index.js\nimport { extendTheme } from '@incmix-ui/react'\n\n// Global style overrides\nimport styles from './styles'\n\n// Foundational style overrides\nimport borders from './foundations/borders'\n\n// Component style overrides\nimport Button from './components/button'\n\nconst overrides = {\n  styles,\n  borders,\n  // Other foundational style overrides go here\n  components: {\n    Button,\n    // Other components go here\n  },\n}\n\nexport default extendTheme(overrides)\n```\n\nNone of these is strictly required to use Incmix - but we've learned some hard\nlessons on the \"right\" way and the \"wrong\" way to write styles. The above is our\nbest suggestion on how to write style overrides and organize your custom theme.\n\n## Using Theme extensions\n\n<Badge fontSize=\"sm\" colorScheme=\"teal\" letterSpacing=\"wider\">\n  v1.6.0\n</Badge>\n\nThe `extendTheme` function allows you to pass multiple overrides or extensions:\n\n```js\nimport { extendTheme, withDefaultColorScheme, theme as baseTheme } from '@incmix-ui/react'\n\nconst customTheme = extendTheme(\n  {\n    colors: {\n      brand: baseTheme.colors.red,\n    },\n    components: {\n      Alert: {\n        defaultProps: {\n          colorScheme: 'blue',\n        },\n      },\n    },\n  },\n  withDefaultColorScheme({ colorScheme: 'brand' }),\n)\n```\n\nThe order of overrides is from left to right. E.g. the second extension\noverrides the first one, and so on.\n\n> Please note that you can pass a base theme as last parameter. If no base theme\n> is provided, we use the Incmix UI default theme\n\n```js\nextendTheme(withFirstExtension, withSecondExtension, withThirdExtension, optionalBaseTheme)\n```\n\n## Theme Extension: withDefaultColorScheme\n\nYou can apply a default color scheme to all components.\n\n```js\nimport { extendTheme, withDefaultColorScheme } from '@incmix-ui/react'\n\nconst customTheme = extendTheme(withDefaultColorScheme({ colorScheme: 'red' }))\n```\n\nOr pass the component names you want to apply a default `colorScheme` to. This\nlets you apply different color schemes to a group of components.\n\n```js\nimport { extendTheme, withDefaultColorScheme } from '@incmix-ui/react'\n\nconst customTheme = extendTheme(\n  withDefaultColorScheme({\n    colorScheme: 'red',\n    components: ['Button', 'Badge'],\n  }),\n  withDefaultColorScheme({\n    colorScheme: 'blue',\n    components: ['Alert', 'Table'],\n  }),\n)\n```\n\n## Theme Extension: withDefaultSize\n\nYou can apply a default size to all components.\n\n```js\nimport { extendTheme, withDefaultSize } from '@incmix-ui/react'\n\nconst customTheme = extendTheme(\n  withDefaultSize({\n    size: 'lg',\n    components: ['Button', 'Badge'],\n  }),\n)\n```\n\n## Theme Extension: withDefaultVariant\n\nYou can apply a default variant to all components.\n\n```js\nimport { extendTheme, withDefaultVariant } from '@incmix-ui/react'\n\nconst customTheme = extendTheme(\n  withDefaultVariant({\n    variant: 'outline',\n    components: ['Input', 'NumberInput', 'PinInput'],\n  }),\n)\n```\n\n## Theme Extension: withDefaultProps\n\nYou can apply default props to all components.\n\n```js\nimport { extendTheme, withDefaultProps } from '@incmix-ui/react'\n\nconst customTheme = extendTheme(\n  withDefaultProps({\n    defaultProps: {\n      variant: 'outline',\n      size: 'lg',\n    },\n    components: ['Input', 'NumberInput', 'PinInput'],\n  }),\n)\n```\n\n---\n\n[In the next section](/docs/styled-system/component-style), we'll show\nsome examples of how to create custom component styles and use them in your\ncomponents!\n",
      "code": "var Component=(()=>{var d=Object.create;var s=Object.defineProperty;var m=Object.getOwnPropertyDescriptor;var u=Object.getOwnPropertyNames;var p=Object.getPrototypeOf,f=Object.prototype.hasOwnProperty;var y=(t,e)=>()=>(e||t((e={exports:{}}).exports,e),e.exports),g=(t,e)=>{for(var o in e)s(t,o,{get:e[o],enumerable:!0})},a=(t,e,o,r)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let i of u(e))!f.call(t,i)&&i!==o&&s(t,i,{get:()=>e[i],enumerable:!(r=m(e,i))||r.enumerable});return t};var x=(t,e,o)=>(o=t!=null?d(p(t)):{},a(e||!t||!t.__esModule?s(o,\"default\",{value:t,enumerable:!0}):o,t)),b=t=>a(s({},\"__esModule\",{value:!0}),t);var c=y((j,l)=>{l.exports=_jsx_runtime});var T={};g(T,{default:()=>S,frontmatter:()=>v});var n=x(c()),v={title:\"Customize Theme\",description:\"How to modify Incmix UI's default theme\",category:\"theming\"};function h(t){let e=Object.assign({p:\"p\",ul:\"ul\",li:\"li\",h2:\"h2\",code:\"code\",pre:\"pre\",blockquote:\"blockquote\",a:\"a\",h3:\"h3\",hr:\"hr\"},t.components),{Badge:o}=e;return o||z(\"Badge\",!0),(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(e.p,{children:`By default, all Incmix components inherit values from the default theme. In some\nscenarios, you might need to customize the theme tokens to match your design\nrequirements.`}),`\n`,(0,n.jsx)(e.p,{children:\"Here are some options depending on your goals:\"}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsx)(e.li,{children:\"Customize the theme tokens like colors, font sizes, line heights, etc.\"}),`\n`,(0,n.jsx)(e.li,{children:\"Customize the component styles, changing the base styles, sizes, or variants.\"}),`\n`,(0,n.jsx)(e.li,{children:\"Customize the global styles.\"}),`\n`]}),`\n`,(0,n.jsx)(e.h2,{id:\"customizing-theme-tokens\",children:\"Customizing theme tokens\"}),`\n`,(0,n.jsxs)(e.p,{children:[\"To extend or override a token in the default theme, import the \",(0,n.jsx)(e.code,{children:\"extendTheme\"}),`\nfunction and add the keys you'd like to override. You can also add new values to\nthe theme.`]}),`\n`,(0,n.jsx)(e.p,{children:`For example, if you'd like to update the colors in the theme to include your\nbrand colors, here's what you'll do:`}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-jsx\",live:\"false\",children:`// 1. Import \\`extendTheme\\`\nimport { extendTheme } from \"@incmix-ui/react\"\n\n// 2. Call \\`extendTheme\\` and pass your custom values\nconst theme = extendTheme({\n  colors: {\n    brand: {\n      100: \"#f7fafc\",\n      // ...\n      900: \"#1a202c\",\n    },\n  },\n})\n\n// 3. Pass the new theme to \\`IncmixProvider\\`\n<IncmixProvider theme={theme}>\n  <App />\n</IncmixProvider>\n\n// 4. Now you can use these colors in your components\nfunction Usage() {\n  return <Box bg=\"brand.100\">Welcome</Box>\n}\n`})}),`\n`,(0,n.jsxs)(e.p,{children:[\"You can also use the color for the \",(0,n.jsx)(e.code,{children:\"colorScheme\"}),\" prop like this:\"]}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-jsx\",live:\"false\",children:`<Button colorScheme=\"brand\">Click me</Button>\n`})}),`\n`,(0,n.jsxs)(e.blockquote,{children:[`\n`,(0,n.jsxs)(e.p,{children:[`If you're curious as to what theme styles you can override, please reference\nthe\n`,(0,n.jsx)(e.a,{href:\"https://github.com/incmix-ui/incmix-ui/tree/main/packages/components/theme/src/foundations\",children:\"default theme foundation style files\"}),\".\"]}),`\n`]}),`\n`,(0,n.jsx)(e.h2,{id:\"customizing-component-styles\",children:\"Customizing component styles\"}),`\n`,(0,n.jsxs)(e.p,{children:[`Incmix has a specific approach or API for styling components. The main idea is\nmost components have default or base styles (`,(0,n.jsx)(e.code,{children:\"baseStyle\"}),`), styles for different\nsizes (`,(0,n.jsx)(e.code,{children:\"sizes\"}),\"), and styles for different visual variants (\",(0,n.jsx)(e.code,{children:\"variants\"}),\").\"]}),`\n`,(0,n.jsx)(e.p,{children:`It is important to understand this so you can override any component style\neffectively.`}),`\n`,(0,n.jsxs)(e.blockquote,{children:[`\n`,(0,n.jsxs)(e.p,{children:[`You're not limited to the component styles that Incmix provides, you can also\ncreate your own custom component styles.\n`,(0,n.jsx)(e.a,{href:\"/docs/styled-system/component-style\",children:\"Learn more\"}),\".\"]}),`\n`]}),`\n`,(0,n.jsx)(e.h3,{id:\"customizing-single-components\",children:\"Customizing single components\"}),`\n`,(0,n.jsxs)(e.p,{children:[\"As we mentioned earlier, a component style consists of \",(0,n.jsx)(e.code,{children:\"baseStyle\"}),\", \",(0,n.jsx)(e.code,{children:\"sizes\"}),`,\n`,(0,n.jsx)(e.code,{children:\"variants\"}),\" and an optional \",(0,n.jsx)(e.code,{children:\"defaultProps\"}),\" to denote the default \",(0,n.jsx)(e.code,{children:\"size\"}),`,\n`,(0,n.jsx)(e.code,{children:\"variant\"}),\" or \",(0,n.jsx)(e.code,{children:\"colorScheme\"}),\".\"]}),`\n`,(0,n.jsxs)(e.blockquote,{children:[`\n`,(0,n.jsxs)(e.p,{children:[\"Not every component has all three \",(0,n.jsx)(e.code,{children:\"defaultProps\"}),`, to figure out which prop can\nbe set just have a short look on the theme source by using the\n`,(0,n.jsx)(e.code,{children:\"View theme source\"}),\" button on the top of every components page.\"]}),`\n`]}),`\n`,(0,n.jsx)(e.p,{children:\"Here's what the component style object looks like:\"}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-tsx\",live:\"false\",children:`import { ComponentStyleConfig } from '@incmix-ui/react'\n\nconst ComponentStyle: ComponentStyleConfig = {\n  // style object for base or default style\n  baseStyle: {},\n  // styles for different sizes (\"sm\", \"md\", \"lg\")\n  sizes: {},\n  // styles for different visual variants (\"outline\", \"solid\")\n  variants: {},\n  // default values for 'size', 'variant' and 'colorScheme'\n  defaultProps: {\n    size: '',\n    variant: '',\n    colorScheme: '',\n  },\n}\n`})}),`\n`,(0,n.jsx)(e.p,{children:\"For example, let's override the component styles for Incmix's Button component.\"}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-tsx\",live:\"false\",children:`// theme.ts (tsx file with usage of StyleFunctions, see 4.)\nimport { extendTheme } from '@incmix-ui/react'\nimport type { StyleFunctionProps } from '@incmix-ui/styled-system'\n\nconst theme = extendTheme({\n  components: {\n    Button: {\n      // 1. We can update the base styles\n      baseStyle: {\n        fontWeight: 'bold', // Normally, it is \"semibold\"\n      },\n      // 2. We can add a new button size or extend existing\n      sizes: {\n        xl: {\n          h: '56px',\n          fontSize: 'lg',\n          px: '32px',\n        },\n      },\n      // 3. We can add a new visual variant\n      variants: {\n        'with-shadow': {\n          bg: 'red.400',\n          boxShadow: '0 0 2px 2px #efdfde',\n        },\n        // 4. We can override existing variants\n        solid: (props: StyleFunctionProps) => ({\n          bg: props.colorMode === 'dark' ? 'red.300' : 'red.500',\n        }),\n        // 5. We can add responsive variants\n        sm: {\n          bg: 'teal.500',\n          fontSize: 'md',\n        },\n      },\n      // 6. We can overwrite defaultProps\n      defaultProps: {\n        size: 'lg', // default is md\n        variant: 'sm', // default is solid\n        colorScheme: 'green', // default is gray\n      },\n    },\n  },\n})\n\nexport default theme\n`})}),`\n`,(0,n.jsx)(e.p,{children:`That's it! When you use the Button from Incmix, these updates will be\nautomatically applied.`}),`\n`,(0,n.jsxs)(e.blockquote,{children:[`\n`,(0,n.jsxs)(e.p,{children:[`When styling/overwriting the theme for a component be sure that it is really a\nsingle component with only one part, since you otherwise need to name the part\nthat should be affected by your change when styling\n`,(0,n.jsx)(e.a,{href:\"/docs/styled-system/component-style#styling-multipart-components\",children:\"multipart components\"}),\".\"]}),`\n`]}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-jsx\",live:\"false\",children:`<Button size=\"xl\" variant=\"with-shadow\">\n  Welcome\n</Button>\n`})}),`\n`,(0,n.jsxs)(e.blockquote,{children:[`\n`,(0,n.jsxs)(e.p,{children:[`If you're curious as to what component styles you can override, please\nreference the\n`,(0,n.jsx)(e.a,{href:\"https://github.com/incmix-ui/incmix-ui/tree/main/packages/components\",children:\"default component style files\"}),\".\"]}),`\n`]}),`\n`,(0,n.jsx)(e.h3,{id:\"customizing-global-styles\",children:\"Customizing global styles\"}),`\n`,(0,n.jsx)(e.p,{children:\"Global styles are theme-aware styles you can apply to any html element globally.\"}),`\n`,(0,n.jsxs)(e.p,{children:[\"To add global styles, update the \",(0,n.jsx)(e.code,{children:\"theme.styles.global\"}),` key in the theme. Global\nstyles can be a style object or a function that returns a style object.`]}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-tsx\",live:\"false\",children:`// theme.ts (Version 2 needs to be a tsx file, due to usage of StyleFunctions)\nimport { extendTheme } from '@incmix-ui/react'\nimport { mode } from '@incmix-ui/theme-tools'\nimport type { StyleFunctionProps } from '@incmix-ui/styled-system'\n\n// Version 1: Using objects\nconst theme = extendTheme({\n  styles: {\n    global: {\n      // styles for the \\`body\\`\n      body: {\n        bg: 'gray.400',\n        color: 'white',\n      },\n      // styles for the \\`a\\`\n      a: {\n        color: 'teal.500',\n        _hover: {\n          textDecoration: 'underline',\n        },\n      },\n    },\n  },\n})\n\n// Version 2: Using functions\nconst overrides = extendTheme({\n  styles: {\n    global: (props: StyleFunctionProps) => ({\n      body: {\n        fontFamily: 'body',\n        color: mode('gray.800', 'whiteAlpha.900')(props),\n        bg: mode('white', 'gray.800')(props),\n        lineHeight: 'base',\n      },\n    }),\n  },\n})\n`})}),`\n`,(0,n.jsx)(e.h3,{id:\"responsive-variants\",children:\"Responsive variants\"}),`\n`,(0,n.jsxs)(e.p,{children:[`Responsive variants can be used to have different styles for components\ndepending on the current active breakpoint. The properties in `,(0,n.jsx)(e.code,{children:\"sizes\"}),` of the\ncomponent will be overwritten if passed in the responsive variant.`]}),`\n`,(0,n.jsxs)(e.blockquote,{children:[`\n`,(0,n.jsxs)(e.p,{children:[`With responsive variants, prop override might not work as expected since we\nuse regular CSS media queries. That's why we also came up with the notion of\n`,(0,n.jsx)(e.code,{children:\"!important\"}),\" as an escape hatch.\"]}),`\n`]}),`\n`,(0,n.jsx)(e.p,{children:`To declare the responsive variants you can simply add them to the variants of\nthe component:`}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-ts\",live:\"false\",children:`const theme = extendTheme({\n  components: {\n    Button: {\n      ...\n      sizes: {\n        sm: {\n          fontSize: 'md'\n        }\n      },\n      variants: {\n        ...\n        base: {\n          bg: 'yellow.500',\n          fontSize: 'md'\n         },\n        sm: {\n          bg: 'teal.500',\n          fontSize: 'lg'\n         },\n        md: {\n          bg: 'orange.500',\n          fontSize: 'xl'\n         },\n      }\n    },\n  },\n});\n`})}),`\n`,(0,n.jsxs)(e.blockquote,{children:[`\n`,(0,n.jsxs)(e.p,{children:[`Based on how the responsive variants are designed, there's no support for\nresponsive `,(0,n.jsx)(e.code,{children:\"colorScheme\"}),\" since it is technically not a variant.\"]}),`\n`]}),`\n`,(0,n.jsxs)(e.p,{children:[\"Just pass them either with the \",(0,n.jsx)(e.code,{children:\"Array syntax\"}),\" or the \",(0,n.jsx)(e.code,{children:\"Object syntax\"}),` to the\ncomponent. The array syntax may not be work as expected, since it ignores the\nnaming of the variant and uses them straight in the order on which they are\npassed into the array.`]}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-tsx\",live:\"false\",children:`<>\n  <Button variant={{ base: 'base', md: 'md' }}>Object syntax</Button>\n  // the button will be orange after the \\`sm\\` breakpoint due to the array syntax\n  <Button variant={['base', 'md']}>Array syntax</Button>\n</>\n`})}),`\n`,(0,n.jsxs)(e.p,{children:[\"It is required to use \",(0,n.jsx)(e.code,{children:\"!important\"}),` within a components style prop if this prop\nis set in the responsive variant as shown in the example below based on the\ntheme above.`]}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-tsx\",live:\"false\",children:`<>\n  <Button variant={{ sm: 'sm' }}>fontSize lg after breakpoint sm</Button>\n  // without declaration of fontSize in the sm variant the fontSize would be lg as expected\n  <Button variant={{ sm: 'sm' }} fontSize=\"xl\">\n    still fontSize lg after breakpoint sm\n  </Button>\n  <Button variant={{ sm: 'sm' }} fontSize=\"xl !important\">\n    fontSize xl due to the !important\n  </Button>\n</>\n`})}),`\n`,(0,n.jsxs)(e.p,{children:[\"Combined usage with \",(0,n.jsx)(e.code,{children:\"size\"}),` in the theme is only possible by covering breakpoints\nbelow the responsive variant or by using `,(0,n.jsx)(e.code,{children:\"!important\"}),`, which overrides\neverything.`]}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-tsx\",live:\"false\",children:`<Button size=\"sm\" variant={{ md: 'md' }}>\n  fontSize md from 'sizes' until breakpoint md where the variant takes over\n</Button>\n`})}),`\n`,(0,n.jsx)(e.h2,{id:\"scaling-out-your-project\",children:\"Scaling out your project\"}),`\n`,(0,n.jsxs)(e.p,{children:[`As your project grows in size, it is best to keep things organized. We highly\nsuggest that instead of using a single `,(0,n.jsx)(e.code,{children:\"theme.js\"}),\" (or \",(0,n.jsx)(e.code,{children:\"theme.ts\"}),`) file, you\ncreate a `,(0,n.jsx)(e.code,{children:\"/theme\"}),` folder in its place. Inside this folder, you could have a\ndirectory structure that looks like this:`]}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-bash\",children:`\\u{1F4C1} theme\n  \\u{1F4C4} index.js  # my main theme entrypoint\n  \\u{1F4C4} styles.js  # all my global style overrides\n  \\u{1F4C1} foundations\n    \\u{1F4C4} borders.js  # all my border overrides\n  \\u{1F4C1} components\n    \\u{1F4C4} button.js  # all my button overrides\n`})}),`\n`,(0,n.jsx)(e.p,{children:`This way, you can structure your main theme entrypoint file to be much cleaner,\nlike this:`}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-jsx\",live:\"false\",children:`// theme/index.js\nimport { extendTheme } from '@incmix-ui/react'\n\n// Global style overrides\nimport styles from './styles'\n\n// Foundational style overrides\nimport borders from './foundations/borders'\n\n// Component style overrides\nimport Button from './components/button'\n\nconst overrides = {\n  styles,\n  borders,\n  // Other foundational style overrides go here\n  components: {\n    Button,\n    // Other components go here\n  },\n}\n\nexport default extendTheme(overrides)\n`})}),`\n`,(0,n.jsx)(e.p,{children:`None of these is strictly required to use Incmix - but we've learned some hard\nlessons on the \"right\" way and the \"wrong\" way to write styles. The above is our\nbest suggestion on how to write style overrides and organize your custom theme.`}),`\n`,(0,n.jsx)(e.h2,{id:\"using-theme-extensions\",children:\"Using Theme extensions\"}),`\n`,(0,n.jsx)(o,{fontSize:\"sm\",colorScheme:\"teal\",letterSpacing:\"wider\",children:(0,n.jsx)(e.p,{children:\"v1.6.0\"})}),`\n`,(0,n.jsxs)(e.p,{children:[\"The \",(0,n.jsx)(e.code,{children:\"extendTheme\"}),\" function allows you to pass multiple overrides or extensions:\"]}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-js\",children:`import { extendTheme, withDefaultColorScheme, theme as baseTheme } from '@incmix-ui/react'\n\nconst customTheme = extendTheme(\n  {\n    colors: {\n      brand: baseTheme.colors.red,\n    },\n    components: {\n      Alert: {\n        defaultProps: {\n          colorScheme: 'blue',\n        },\n      },\n    },\n  },\n  withDefaultColorScheme({ colorScheme: 'brand' }),\n)\n`})}),`\n`,(0,n.jsx)(e.p,{children:`The order of overrides is from left to right. E.g. the second extension\noverrides the first one, and so on.`}),`\n`,(0,n.jsxs)(e.blockquote,{children:[`\n`,(0,n.jsx)(e.p,{children:`Please note that you can pass a base theme as last parameter. If no base theme\nis provided, we use the Incmix UI default theme`}),`\n`]}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-js\",children:`extendTheme(withFirstExtension, withSecondExtension, withThirdExtension, optionalBaseTheme)\n`})}),`\n`,(0,n.jsx)(e.h2,{id:\"theme-extension-withdefaultcolorscheme\",children:\"Theme Extension: withDefaultColorScheme\"}),`\n`,(0,n.jsx)(e.p,{children:\"You can apply a default color scheme to all components.\"}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-js\",children:`import { extendTheme, withDefaultColorScheme } from '@incmix-ui/react'\n\nconst customTheme = extendTheme(withDefaultColorScheme({ colorScheme: 'red' }))\n`})}),`\n`,(0,n.jsxs)(e.p,{children:[\"Or pass the component names you want to apply a default \",(0,n.jsx)(e.code,{children:\"colorScheme\"}),` to. This\nlets you apply different color schemes to a group of components.`]}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-js\",children:`import { extendTheme, withDefaultColorScheme } from '@incmix-ui/react'\n\nconst customTheme = extendTheme(\n  withDefaultColorScheme({\n    colorScheme: 'red',\n    components: ['Button', 'Badge'],\n  }),\n  withDefaultColorScheme({\n    colorScheme: 'blue',\n    components: ['Alert', 'Table'],\n  }),\n)\n`})}),`\n`,(0,n.jsx)(e.h2,{id:\"theme-extension-withdefaultsize\",children:\"Theme Extension: withDefaultSize\"}),`\n`,(0,n.jsx)(e.p,{children:\"You can apply a default size to all components.\"}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-js\",children:`import { extendTheme, withDefaultSize } from '@incmix-ui/react'\n\nconst customTheme = extendTheme(\n  withDefaultSize({\n    size: 'lg',\n    components: ['Button', 'Badge'],\n  }),\n)\n`})}),`\n`,(0,n.jsx)(e.h2,{id:\"theme-extension-withdefaultvariant\",children:\"Theme Extension: withDefaultVariant\"}),`\n`,(0,n.jsx)(e.p,{children:\"You can apply a default variant to all components.\"}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-js\",children:`import { extendTheme, withDefaultVariant } from '@incmix-ui/react'\n\nconst customTheme = extendTheme(\n  withDefaultVariant({\n    variant: 'outline',\n    components: ['Input', 'NumberInput', 'PinInput'],\n  }),\n)\n`})}),`\n`,(0,n.jsx)(e.h2,{id:\"theme-extension-withdefaultprops\",children:\"Theme Extension: withDefaultProps\"}),`\n`,(0,n.jsx)(e.p,{children:\"You can apply default props to all components.\"}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-js\",children:`import { extendTheme, withDefaultProps } from '@incmix-ui/react'\n\nconst customTheme = extendTheme(\n  withDefaultProps({\n    defaultProps: {\n      variant: 'outline',\n      size: 'lg',\n    },\n    components: ['Input', 'NumberInput', 'PinInput'],\n  }),\n)\n`})}),`\n`,(0,n.jsx)(e.hr,{}),`\n`,(0,n.jsxs)(e.p,{children:[(0,n.jsx)(e.a,{href:\"/docs/styled-system/component-style\",children:\"In the next section\"}),`, we'll show\nsome examples of how to create custom component styles and use them in your\ncomponents!`]})]})}function w(t={}){let{wrapper:e}=t.components||{};return e?(0,n.jsx)(e,Object.assign({},t,{children:(0,n.jsx)(h,t)})):h(t)}var S=w;function z(t,e){throw new Error(\"Expected \"+(e?\"component\":\"object\")+\" `\"+t+\"` to be defined: you likely forgot to import, pass, or provide it.\")}return b(T);})();\n;return Component;"
    },
    "_id": "docs/styled-system/customize-theme.mdx",
    "_raw": {
      "sourceFilePath": "docs/styled-system/customize-theme.mdx",
      "sourceFileName": "customize-theme.mdx",
      "sourceFileDir": "docs/styled-system",
      "contentType": "mdx",
      "flattenedPath": "docs/styled-system/customize-theme"
    },
    "type": "Doc",
    "slug": "/docs/styled-system/customize-theme",
    "frontMatter": {
      "title": "Customize Theme",
      "description": "How to modify Incmix UI's default theme",
      "slug": "/docs/styled-system/customize-theme",
      "editUrl": "https://github.com/incmix-ui/incmix-ui-docs/tree/main/content/docs/styled-system/customize-theme.mdx",
      "headings": [
        {
          "text": "Customizing theme tokens",
          "id": "customizing-theme-tokens",
          "level": "h2"
        },
        {
          "text": "Customizing component styles",
          "id": "customizing-component-styles",
          "level": "h2"
        },
        {
          "text": "Customizing single components",
          "id": "customizing-single-components",
          "level": "h3"
        },
        {
          "text": "Customizing global styles",
          "id": "customizing-global-styles",
          "level": "h3"
        },
        {
          "text": "Responsive variants",
          "id": "responsive-variants",
          "level": "h3"
        },
        {
          "text": "Scaling out your project",
          "id": "scaling-out-your-project",
          "level": "h2"
        },
        {
          "text": "Using Theme extensions",
          "id": "using-theme-extensions",
          "level": "h2"
        },
        {
          "text": "Theme Extension: withDefaultColorScheme",
          "id": "theme-extension-withdefaultcolorscheme",
          "level": "h2"
        },
        {
          "text": "Theme Extension: withDefaultSize",
          "id": "theme-extension-withdefaultsize",
          "level": "h2"
        },
        {
          "text": "Theme Extension: withDefaultVariant",
          "id": "theme-extension-withdefaultvariant",
          "level": "h2"
        },
        {
          "text": "Theme Extension: withDefaultProps",
          "id": "theme-extension-withdefaultprops",
          "level": "h2"
        }
      ]
    }
  },
  {
    "title": "Global Styles",
    "description": "How to manage and inject global styles in Incmix UI",
    "scope": "usage",
    "category": "features",
    "body": {
      "raw": "\n`GlobalStyle` is a new component in v1 that injects styles defined in\n`theme.styles.global` into the global styles of your app or website.\n\nThis allows you to define theme-aware styles for any elements.\n\n## How it works\n\nBy using `IncmixProvider` at the root of your application, we automatically\nrender a `GlobalStyle` component. Here's what `GlobalStyle` does under the hood:\n\n- Reads the styles defined in `theme.styles.global`, this style can be a style\n  object or a function that returns a style object.\n- Process the styles and pass it to emotion's `Global` component which is used\n  to handle global style injection.\n\n```js\n// 1. Using a style object\nconst theme = {\n  styles: {\n    global: {\n      'html, body': {\n        color: 'gray.600',\n        lineHeight: 'tall',\n      },\n      a: {\n        color: 'teal.500',\n      },\n    },\n  },\n}\n\n// 2. Using a function\n// NB: Incmix gives you access to `colorMode` and `theme` in `props`\nconst theme = {\n  styles: {\n    global: props => ({\n      'html, body': {\n        fontSize: 'sm',\n        color: props.colorMode === 'dark' ? 'white' : 'gray.600',\n        lineHeight: 'tall',\n      },\n      a: {\n        color: props.colorMode === 'dark' ? 'teal.300' : 'teal.500',\n      },\n    }),\n  },\n}\n```\n\n## Default styles\n\nThe default Incmix theme provides sensible global styles. Here's what it looks\nlike:\n\n```js\nimport { mode } from '@incmix-ui/theme-tools'\n\nconst styles = {\n  global: props => ({\n    body: {\n      fontFamily: 'body',\n      color: mode('gray.800', 'whiteAlpha.900')(props),\n      bg: mode('white', 'gray.800')(props),\n      lineHeight: 'base',\n    },\n    '*::placeholder': {\n      color: mode('gray.400', 'whiteAlpha.400')(props),\n    },\n    '*, *::before, &::after': {\n      borderColor: mode('gray.200', 'whiteAlpha.300')(props),\n      wordWrap: 'break-word',\n    },\n  }),\n}\n```\n\n> **Note 🚨:** `mode(lightMode, darkMode)(props)` function is the same as\n> `props.colorMode === \"dark\" ? darkMode : lightMode`\n\n## Styling non-Incmix elements globally\n\nWhen combining Incmix with other libraries, you might need a way to style some\nelements in those libraries using the theme defined tokens.\n\nLet's say you have a blog written in `mdx` and you'd like to style all the MDX\nelements globally. Here's what you'll do.\n\n```js\n// 1. Wrap the rendered mdx in a container\nconst MDXWrapper = props => <div className=\"mdx-prose\" {...props} />\n\n// 2. Define global styles\n// PRO TIP: Again, you can also use the function version here\nconst theme = {\n  styles: {\n    global: {\n      '.mdx-prose': {\n        h1: {\n          fontSize: 'xl',\n          mb: '4',\n        },\n        p: {\n          fontSize: 'sm',\n          lineHeight: '1.4',\n        },\n      },\n    },\n  },\n}\n\n// 3. That's it! Your app will now read and use the global styles\n```\n",
      "code": "var Component=(()=>{var h=Object.create;var s=Object.defineProperty;var p=Object.getOwnPropertyDescriptor;var m=Object.getOwnPropertyNames;var y=Object.getPrototypeOf,g=Object.prototype.hasOwnProperty;var b=(o,e)=>()=>(e||o((e={exports:{}}).exports,e),e.exports),u=(o,e)=>{for(var l in e)s(o,l,{get:e[l],enumerable:!0})},r=(o,e,l,i)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let t of m(e))!g.call(o,t)&&t!==l&&s(o,t,{get:()=>e[t],enumerable:!(i=p(e,t))||i.enumerable});return o};var f=(o,e,l)=>(l=o!=null?h(y(o)):{},r(e||!o||!o.__esModule?s(l,\"default\",{value:o,enumerable:!0}):l,o)),w=o=>r(s({},\"__esModule\",{value:!0}),o);var c=b((I,a)=>{a.exports=_jsx_runtime});var M={};u(M,{default:()=>k,frontmatter:()=>x});var n=f(c()),x={title:\"Global Styles\",description:\"How to manage and inject global styles in Incmix UI\",category:\"features\"};function d(o){let e=Object.assign({p:\"p\",code:\"code\",h2:\"h2\",ul:\"ul\",li:\"li\",pre:\"pre\",blockquote:\"blockquote\",strong:\"strong\"},o.components);return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsxs)(e.p,{children:[(0,n.jsx)(e.code,{children:\"GlobalStyle\"}),` is a new component in v1 that injects styles defined in\n`,(0,n.jsx)(e.code,{children:\"theme.styles.global\"}),\" into the global styles of your app or website.\"]}),`\n`,(0,n.jsx)(e.p,{children:\"This allows you to define theme-aware styles for any elements.\"}),`\n`,(0,n.jsx)(e.h2,{id:\"how-it-works\",children:\"How it works\"}),`\n`,(0,n.jsxs)(e.p,{children:[\"By using \",(0,n.jsx)(e.code,{children:\"IncmixProvider\"}),` at the root of your application, we automatically\nrender a `,(0,n.jsx)(e.code,{children:\"GlobalStyle\"}),\" component. Here's what \",(0,n.jsx)(e.code,{children:\"GlobalStyle\"}),\" does under the hood:\"]}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsxs)(e.li,{children:[\"Reads the styles defined in \",(0,n.jsx)(e.code,{children:\"theme.styles.global\"}),`, this style can be a style\nobject or a function that returns a style object.`]}),`\n`,(0,n.jsxs)(e.li,{children:[\"Process the styles and pass it to emotion's \",(0,n.jsx)(e.code,{children:\"Global\"}),` component which is used\nto handle global style injection.`]}),`\n`]}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-js\",children:`// 1. Using a style object\nconst theme = {\n  styles: {\n    global: {\n      'html, body': {\n        color: 'gray.600',\n        lineHeight: 'tall',\n      },\n      a: {\n        color: 'teal.500',\n      },\n    },\n  },\n}\n\n// 2. Using a function\n// NB: Incmix gives you access to \\`colorMode\\` and \\`theme\\` in \\`props\\`\nconst theme = {\n  styles: {\n    global: props => ({\n      'html, body': {\n        fontSize: 'sm',\n        color: props.colorMode === 'dark' ? 'white' : 'gray.600',\n        lineHeight: 'tall',\n      },\n      a: {\n        color: props.colorMode === 'dark' ? 'teal.300' : 'teal.500',\n      },\n    }),\n  },\n}\n`})}),`\n`,(0,n.jsx)(e.h2,{id:\"default-styles\",children:\"Default styles\"}),`\n`,(0,n.jsx)(e.p,{children:`The default Incmix theme provides sensible global styles. Here's what it looks\nlike:`}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-js\",children:`import { mode } from '@incmix-ui/theme-tools'\n\nconst styles = {\n  global: props => ({\n    body: {\n      fontFamily: 'body',\n      color: mode('gray.800', 'whiteAlpha.900')(props),\n      bg: mode('white', 'gray.800')(props),\n      lineHeight: 'base',\n    },\n    '*::placeholder': {\n      color: mode('gray.400', 'whiteAlpha.400')(props),\n    },\n    '*, *::before, &::after': {\n      borderColor: mode('gray.200', 'whiteAlpha.300')(props),\n      wordWrap: 'break-word',\n    },\n  }),\n}\n`})}),`\n`,(0,n.jsxs)(e.blockquote,{children:[`\n`,(0,n.jsxs)(e.p,{children:[(0,n.jsx)(e.strong,{children:\"Note \\u{1F6A8}:\"}),\" \",(0,n.jsx)(e.code,{children:\"mode(lightMode, darkMode)(props)\"}),` function is the same as\n`,(0,n.jsx)(e.code,{children:'props.colorMode === \"dark\" ? darkMode : lightMode'})]}),`\n`]}),`\n`,(0,n.jsx)(e.h2,{id:\"styling-non-incmix-elements-globally\",children:\"Styling non-Incmix elements globally\"}),`\n`,(0,n.jsx)(e.p,{children:`When combining Incmix with other libraries, you might need a way to style some\nelements in those libraries using the theme defined tokens.`}),`\n`,(0,n.jsxs)(e.p,{children:[\"Let's say you have a blog written in \",(0,n.jsx)(e.code,{children:\"mdx\"}),` and you'd like to style all the MDX\nelements globally. Here's what you'll do.`]}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-js\",children:`// 1. Wrap the rendered mdx in a container\nconst MDXWrapper = props => <div className=\"mdx-prose\" {...props} />\n\n// 2. Define global styles\n// PRO TIP: Again, you can also use the function version here\nconst theme = {\n  styles: {\n    global: {\n      '.mdx-prose': {\n        h1: {\n          fontSize: 'xl',\n          mb: '4',\n        },\n        p: {\n          fontSize: 'sm',\n          lineHeight: '1.4',\n        },\n      },\n    },\n  },\n}\n\n// 3. That's it! Your app will now read and use the global styles\n`})})]})}function j(o={}){let{wrapper:e}=o.components||{};return e?(0,n.jsx)(e,Object.assign({},o,{children:(0,n.jsx)(d,o)})):d(o)}var k=j;return w(M);})();\n;return Component;"
    },
    "_id": "docs/styled-system/global-styles.mdx",
    "_raw": {
      "sourceFilePath": "docs/styled-system/global-styles.mdx",
      "sourceFileName": "global-styles.mdx",
      "sourceFileDir": "docs/styled-system",
      "contentType": "mdx",
      "flattenedPath": "docs/styled-system/global-styles"
    },
    "type": "Doc",
    "slug": "/docs/styled-system/global-styles",
    "frontMatter": {
      "title": "Global Styles",
      "description": "How to manage and inject global styles in Incmix UI",
      "slug": "/docs/styled-system/global-styles",
      "editUrl": "https://github.com/incmix-ui/incmix-ui-docs/tree/main/content/docs/styled-system/global-styles.mdx",
      "headings": [
        {
          "text": "How it works",
          "id": "how-it-works",
          "level": "h2"
        },
        {
          "text": "Default styles",
          "id": "default-styles",
          "level": "h2"
        },
        {
          "text": "Styling non-Incmix elements globally",
          "id": "styling-non-incmix-elements-globally",
          "level": "h2"
        }
      ]
    }
  },
  {
    "title": "Gradient",
    "description": "Learn how to use gradients in Incmix UI. Gradients are a way to transition between two or more colors.",
    "scope": "usage",
    "category": "features",
    "body": {
      "raw": "\nGradients are a way to have transition between two or more colors. You can add\ngradient support using any of the following style props.\n\n- `bgGradient`: a shorthand, convenient style prop to apply theme-aware\n  gradients.\n- `bgClip`: a shorthand for `background-clip` CSS attribute. Useful when\n  creating text gradients.\n- `backgroundClip`: the typical `background-clip` CSS attribute. Useful when\n  creating text gradients.\n\n## Background Gradient API\n\nTo add a gradient to an element, pass the `bgGradient` prop and set its value\nfollowing the API:\n\n- `linear(<direction>, <from>, <to>)`\n- `radial(<from>, <to>)`\n\nYou can also use other CSS gradient types like `repeating-linear`, `conic`, etc.\n\nFor linear gradients, the `<direction>` can be set to the default CSS directions\n(e.g. `to top`) or the shorthand equivalent (e.g `to-t`).\n\nHere's the list of supported direction shorthands and their respective values:\n\n```json\n{\n  \"to-t\": \"to top\",\n  \"to-tr\": \"to top right\",\n  \"to-r\": \"to right\",\n  \"to-br\": \"to bottom right\",\n  \"to-b\": \"to bottom\",\n  \"to-bl\": \"to bottom left\",\n  \"to-l\": \"to left\",\n  \"to-tl\": \"to top left\"\n}\n```\n\n## Usage\n\nLet's create a simple gradient from `green.200` to `pink.500`\n\n```jsx\n<Box w=\"100%\" h=\"200px\" bgGradient=\"linear(to-r, green.200, pink.500)\" />\n```\n\n### Customizing Colors\n\nYou can use both theme-aware color tokens or raw CSS color values.\n\n```jsx\n<Box w=\"100%\" h=\"200px\" bgGradient=\"linear(to-l, #7928CA, #FF0080)\" />\n```\n\n### Multiple Color Stops\n\nBy adding more color-stop points on the gradient line, you can create a highly\ncustomized transition between multiple colors.\n\n```jsx\n<Box w=\"100%\" h=\"200px\" bgGradient=\"linear(to-r, gray.300, yellow.400, pink.200)\" />\n```\n\nFollowing the CSS gradient specification, you can also define the distribution\nof the color stops\n\n```jsx\n<Box w=\"100%\" h=\"200px\" bgGradient=\"linear(red.100 0%, orange.100 25%, yellow.100 50%)\" />\n```\n\n## Text Gradient API\n\nTo add a text gradient, pass the `bgGradient` following the API and `bgClip`\nprop to `text`.\n\n```jsx\n<Text bgGradient=\"linear(to-l, #7928CA, #FF0080)\" bgClip=\"text\" fontSize=\"6xl\" fontWeight=\"extrabold\">\n  Welcome to Incmix UI\n</Text>\n```\n\n## Responsive Gradients\n\nYou can control the responsiveness of gradients by specifying the gradients at\nthe different breakpoints.\n\n```jsx\n<Box\n  w=\"100%\"\n  h=\"200px\"\n  bgGradient={[\n    'linear(to-tr, teal.300, yellow.400)',\n    'linear(to-t, blue.200, teal.500)',\n    'linear(to-b, orange.100, purple.300)',\n  ]}\n/>\n```\n\n## Changing gradient with pseudo props\n\nYou can change the gradient of an element based on common CSS pseudo attributes\n(hover, focus, active, etc).\n\nFor example, on hover, add the gradient you wish to have.\n\n```jsx\n<Box\n  as=\"button\"\n  p={4}\n  color=\"white\"\n  fontWeight=\"bold\"\n  borderRadius=\"md\"\n  bgGradient=\"linear(to-r, teal.500, green.500)\"\n  _hover={{\n    bgGradient: 'linear(to-r, red.500, yellow.500)',\n  }}\n>\n  Click here\n</Box>\n```\n",
      "code": "var Component=(()=>{var s=Object.create;var i=Object.defineProperty;var p=Object.getOwnPropertyDescriptor;var g=Object.getOwnPropertyNames;var u=Object.getPrototypeOf,b=Object.prototype.hasOwnProperty;var m=(t,e)=>()=>(e||t((e={exports:{}}).exports,e),e.exports),x=(t,e)=>{for(var r in e)i(t,r,{get:e[r],enumerable:!0})},l=(t,e,r,a)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let o of g(e))!b.call(t,o)&&o!==r&&i(t,o,{get:()=>e[o],enumerable:!(a=p(e,o))||a.enumerable});return t};var f=(t,e,r)=>(r=t!=null?s(u(t)):{},l(e||!t||!t.__esModule?i(r,\"default\",{value:t,enumerable:!0}):r,t)),w=t=>l(i({},\"__esModule\",{value:!0}),t);var c=m((v,d)=>{d.exports=_jsx_runtime});var S={};x(S,{default:()=>G,frontmatter:()=>y});var n=f(c()),y={title:\"Gradient\",description:\"Learn how to use gradients in Incmix UI. Gradients are a way to transition between two or more colors.\",category:\"features\"};function h(t){let e=Object.assign({p:\"p\",ul:\"ul\",li:\"li\",code:\"code\",h2:\"h2\",pre:\"pre\",h3:\"h3\"},t.components);return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(e.p,{children:`Gradients are a way to have transition between two or more colors. You can add\ngradient support using any of the following style props.`}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.code,{children:\"bgGradient\"}),`: a shorthand, convenient style prop to apply theme-aware\ngradients.`]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.code,{children:\"bgClip\"}),\": a shorthand for \",(0,n.jsx)(e.code,{children:\"background-clip\"}),` CSS attribute. Useful when\ncreating text gradients.`]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.code,{children:\"backgroundClip\"}),\": the typical \",(0,n.jsx)(e.code,{children:\"background-clip\"}),` CSS attribute. Useful when\ncreating text gradients.`]}),`\n`]}),`\n`,(0,n.jsx)(e.h2,{id:\"background-gradient-api\",children:\"Background Gradient API\"}),`\n`,(0,n.jsxs)(e.p,{children:[\"To add a gradient to an element, pass the \",(0,n.jsx)(e.code,{children:\"bgGradient\"}),` prop and set its value\nfollowing the API:`]}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsx)(e.li,{children:(0,n.jsx)(e.code,{children:\"linear(<direction>, <from>, <to>)\"})}),`\n`,(0,n.jsx)(e.li,{children:(0,n.jsx)(e.code,{children:\"radial(<from>, <to>)\"})}),`\n`]}),`\n`,(0,n.jsxs)(e.p,{children:[\"You can also use other CSS gradient types like \",(0,n.jsx)(e.code,{children:\"repeating-linear\"}),\", \",(0,n.jsx)(e.code,{children:\"conic\"}),\", etc.\"]}),`\n`,(0,n.jsxs)(e.p,{children:[\"For linear gradients, the \",(0,n.jsx)(e.code,{children:\"<direction>\"}),` can be set to the default CSS directions\n(e.g. `,(0,n.jsx)(e.code,{children:\"to top\"}),\") or the shorthand equivalent (e.g \",(0,n.jsx)(e.code,{children:\"to-t\"}),\").\"]}),`\n`,(0,n.jsx)(e.p,{children:\"Here's the list of supported direction shorthands and their respective values:\"}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-json\",children:`{\n  \"to-t\": \"to top\",\n  \"to-tr\": \"to top right\",\n  \"to-r\": \"to right\",\n  \"to-br\": \"to bottom right\",\n  \"to-b\": \"to bottom\",\n  \"to-bl\": \"to bottom left\",\n  \"to-l\": \"to left\",\n  \"to-tl\": \"to top left\"\n}\n`})}),`\n`,(0,n.jsx)(e.h2,{id:\"usage\",children:\"Usage\"}),`\n`,(0,n.jsxs)(e.p,{children:[\"Let's create a simple gradient from \",(0,n.jsx)(e.code,{children:\"green.200\"}),\" to \",(0,n.jsx)(e.code,{children:\"pink.500\"})]}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-jsx\",children:`<Box w=\"100%\" h=\"200px\" bgGradient=\"linear(to-r, green.200, pink.500)\" />\n`})}),`\n`,(0,n.jsx)(e.h3,{id:\"customizing-colors\",children:\"Customizing Colors\"}),`\n`,(0,n.jsx)(e.p,{children:\"You can use both theme-aware color tokens or raw CSS color values.\"}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-jsx\",children:`<Box w=\"100%\" h=\"200px\" bgGradient=\"linear(to-l, #7928CA, #FF0080)\" />\n`})}),`\n`,(0,n.jsx)(e.h3,{id:\"multiple-color-stops\",children:\"Multiple Color Stops\"}),`\n`,(0,n.jsx)(e.p,{children:`By adding more color-stop points on the gradient line, you can create a highly\ncustomized transition between multiple colors.`}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-jsx\",children:`<Box w=\"100%\" h=\"200px\" bgGradient=\"linear(to-r, gray.300, yellow.400, pink.200)\" />\n`})}),`\n`,(0,n.jsx)(e.p,{children:`Following the CSS gradient specification, you can also define the distribution\nof the color stops`}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-jsx\",children:`<Box w=\"100%\" h=\"200px\" bgGradient=\"linear(red.100 0%, orange.100 25%, yellow.100 50%)\" />\n`})}),`\n`,(0,n.jsx)(e.h2,{id:\"text-gradient-api\",children:\"Text Gradient API\"}),`\n`,(0,n.jsxs)(e.p,{children:[\"To add a text gradient, pass the \",(0,n.jsx)(e.code,{children:\"bgGradient\"}),\" following the API and \",(0,n.jsx)(e.code,{children:\"bgClip\"}),`\nprop to `,(0,n.jsx)(e.code,{children:\"text\"}),\".\"]}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-jsx\",children:`<Text bgGradient=\"linear(to-l, #7928CA, #FF0080)\" bgClip=\"text\" fontSize=\"6xl\" fontWeight=\"extrabold\">\n  Welcome to Incmix UI\n</Text>\n`})}),`\n`,(0,n.jsx)(e.h2,{id:\"responsive-gradients\",children:\"Responsive Gradients\"}),`\n`,(0,n.jsx)(e.p,{children:`You can control the responsiveness of gradients by specifying the gradients at\nthe different breakpoints.`}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-jsx\",children:`<Box\n  w=\"100%\"\n  h=\"200px\"\n  bgGradient={[\n    'linear(to-tr, teal.300, yellow.400)',\n    'linear(to-t, blue.200, teal.500)',\n    'linear(to-b, orange.100, purple.300)',\n  ]}\n/>\n`})}),`\n`,(0,n.jsx)(e.h2,{id:\"changing-gradient-with-pseudo-props\",children:\"Changing gradient with pseudo props\"}),`\n`,(0,n.jsx)(e.p,{children:`You can change the gradient of an element based on common CSS pseudo attributes\n(hover, focus, active, etc).`}),`\n`,(0,n.jsx)(e.p,{children:\"For example, on hover, add the gradient you wish to have.\"}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-jsx\",children:`<Box\n  as=\"button\"\n  p={4}\n  color=\"white\"\n  fontWeight=\"bold\"\n  borderRadius=\"md\"\n  bgGradient=\"linear(to-r, teal.500, green.500)\"\n  _hover={{\n    bgGradient: 'linear(to-r, red.500, yellow.500)',\n  }}\n>\n  Click here\n</Box>\n`})})]})}function C(t={}){let{wrapper:e}=t.components||{};return e?(0,n.jsx)(e,Object.assign({},t,{children:(0,n.jsx)(h,t)})):h(t)}var G=C;return w(S);})();\n;return Component;"
    },
    "_id": "docs/styled-system/gradient.mdx",
    "_raw": {
      "sourceFilePath": "docs/styled-system/gradient.mdx",
      "sourceFileName": "gradient.mdx",
      "sourceFileDir": "docs/styled-system",
      "contentType": "mdx",
      "flattenedPath": "docs/styled-system/gradient"
    },
    "type": "Doc",
    "slug": "/docs/styled-system/gradient",
    "frontMatter": {
      "title": "Gradient",
      "description": "Learn how to use gradients in Incmix UI. Gradients are a way to transition between two or more colors.",
      "slug": "/docs/styled-system/gradient",
      "editUrl": "https://github.com/incmix-ui/incmix-ui-docs/tree/main/content/docs/styled-system/gradient.mdx",
      "headings": [
        {
          "text": "Background Gradient API",
          "id": "background-gradient-api",
          "level": "h2"
        },
        {
          "text": "Usage",
          "id": "usage",
          "level": "h2"
        },
        {
          "text": "Customizing Colors",
          "id": "customizing-colors",
          "level": "h3"
        },
        {
          "text": "Multiple Color Stops",
          "id": "multiple-color-stops",
          "level": "h3"
        },
        {
          "text": "Text Gradient API",
          "id": "text-gradient-api",
          "level": "h2"
        },
        {
          "text": "Responsive Gradients",
          "id": "responsive-gradients",
          "level": "h2"
        },
        {
          "text": "Changing gradient with pseudo props",
          "id": "changing-gradient-with-pseudo-props",
          "level": "h2"
        }
      ]
    }
  },
  {
    "title": "Responsive Styles",
    "description": "Incmix UI supports responsive styles out of the box",
    "scope": "usage",
    "category": "features",
    "body": {
      "raw": "\nIncmix UI supports responsive styles out of the box. Instead of manually adding\n`@media` queries and adding nested styles throughout your code, Incmix UI allows\nyou to provide object and array values to add mobile-first responsive styles.\n\n> We use the `@media(min-width)` media query to ensure your interfaces are\n> mobile-first.\n\nResponsive syntax relies on the breakpoints defined in the theme object. Incmix\nUI provides default breakpoints, here's what it looks like:\n\n```js\nconst breakpoints = {\n  sm: '30em',\n  md: '48em',\n  lg: '62em',\n  xl: '80em',\n  '2xl': '96em',\n}\n```\n\nTo make styles responsive, you can use either the array or object syntax.\n\n## The Array syntax\n\nAll style props accept arrays as values for mobile-first responsive styles. This\nis the recommended method.\n\nLet's say you have a `Box` with the following properties:\n\n```jsx live=false\n<Box bg=\"red.200\" w=\"400px\">\n  This is a box\n</Box>\n```\n\nTo make the `width` or `w` responsive using the array syntax, here's what you\nneed to do:\n\n```jsx live=false\n<Box bg=\"red.200\" w={[300, 400, 500]}>\n  This is a box\n</Box>\n```\n\nTo interpret array responsive values, Incmix UI converts the values defined in\n`theme.breakpoints` and sorts them in ascending order. Afterward, we map the\nvalues defined in the array to the breakpoints\n\n```js\n// These are the default breakpoints\nconst breakpoints = {\n  sm: '30em',\n  md: '48em',\n  lg: '62em',\n  xl: '80em',\n  '2xl': '96em',\n}\n\n// Internally, we transform to this\nconst breakpoints = ['0em', '30em', '48em', '62em', '80em', '96em']\n```\n\nHere's how to interpret this syntax:\n\n- `300px`: From `0em` upwards\n- `400px`: From `30em` upwards\n- `500px`: From `48em` upwards\n\n> To skip certain breakpoints, you can pass `null` to any position in the array\n> to avoid generating unnecessary CSS.\n\n## The Object syntax\n\nYou can also define responsive values with breakpoint aliases in an object. Any\nundefined alias key will define the base, non-responsive value.\n\nLet's say you have a `Text` that looks like this:\n\n```jsx live=false\n<Text fontSize=\"40px\">This is a text</Text>\n```\n\nTo make the `fontSize` responsive using the object syntax, here's what you need\nto do:\n\n```jsx live=false\n<Text fontSize={{ base: '24px', md: '40px', lg: '56px' }}>This is responsive text</Text>\n```\n\n> **Remember, Incmix UI uses the min-width media query for responsive design**.\n> The breakpoints are: `sm = 30em`, `md = 48em`, `lg = 62em`, `xl = 80em`\n\nHere's how to interpret this syntax:\n\n- `base`: From `0em` upwards\n- `md`: From `48em` upwards\n- `lg`: From `62em` upwards\n\n## More Examples\n\nThis works for every style prop in the theme specification, which means you can\nchange the style of most properties at a given breakpoint.\n\n```jsx live=false\n<>\n  <Box\n    height={{\n      base: '100%', // 0-48em\n      md: '50%', // 48em-80em,\n      xl: '25%', // 80em+\n    }}\n    bg=\"teal.400\"\n    width={[\n      '100%', // 0-30em\n      '50%', // 30em-48em\n      '25%', // 48em-62em\n      '15%', // 62em+\n    ]}\n  />\n  {/* responsive font size */}\n  <Box fontSize={['sm', 'md', 'lg', 'xl']}>Font Size</Box>\n  {/* responsive margin */}\n  <Box mt={[2, 4, 6, 8]} width=\"full\" height=\"24px\" bg=\"tomato\" />\n  {/* responsive padding */}\n  <Box bg=\"papayawhip\" p={[2, 4, 6, 8]}>\n    Padding\n  </Box>\n</>\n```\n\n## Under the hood\n\nThis shortcut is an alternative to writing media queries out by hand. Given the\nfollowing:\n\n```jsx live=false\n<Box width={[1, 1 / 2, 1 / 4]} />\n```\n\nIt'll generate a CSS that looks like this\n\n```css\n.Box {\n  width: 100%;\n}\n\n@media screen and (min-width: 30em) {\n  .Box {\n    width: 50%;\n  }\n}\n\n@media screen and (min-width: 48em) {\n  .Box {\n    width: 25%;\n  }\n}\n```\n\nThe equivalent of this style if you passed it as an object.\n\n## Customizing Breakpoints\n\nIn some scenarios, you might need to define custom breakpoints for your\napplication. We recommended using common aliases like `sm`, `md`, `lg`, and\n`xl`.\n\nTo define custom breakpoints, just pass them as an object into the theme.\n\n> Note: Ensure the css unit of your breakpoints are the same. Use all `px` or\n> all `em`, don't mix them.\n\n```jsx live=false\n// 1. Import the utilities\nimport { extendTheme } from '@incmix-ui/react'\n\n// 2. Update the breakpoints as key-value pairs\nconst breakpoints = {\n  sm: '320px',\n  md: '768px',\n  lg: '960px',\n  xl: '1200px',\n  '2xl': '1536px',\n}\n\n// 3. Extend the theme\nconst theme = extendTheme({ breakpoints })\n\n// 4. Now you can use the custom breakpoints\nfunction Example() {\n  return <Box width={{ base: '100%', sm: '50%', md: '25%' }} />\n}\n```\n\n> Note: If you're using **pixels** as breakpoint values make sure to **always**\n> provide a value for the `2xl` breakpoint, which by its default pixels value is\n> **\"1536px\"**.\n\n## Demo\n\nHere's a simple example of a marketing page component that uses a stacked layout\non small screens, and a side-by-side layout on larger screens **(resize your\nbrowser to see it in action)**:\n\n```jsx\n<Box p={4} display={{ md: 'flex' }}>\n  <Box flexShrink={0}>\n    <Image borderRadius=\"lg\" width={{ md: 40 }} src=\"https://bit.ly/2jYM25F\" alt=\"Woman paying for a purchase\" />\n  </Box>\n  <Box mt={{ base: 4, md: 0 }} ml={{ md: 6 }}>\n    <Text fontWeight=\"bold\" textTransform=\"uppercase\" fontSize=\"sm\" letterSpacing=\"wide\" color=\"teal.600\">\n      Marketing\n    </Text>\n    <Link mt={1} display=\"block\" fontSize=\"lg\" lineHeight=\"normal\" fontWeight=\"semibold\" href=\"#\">\n      Finding customers for your new business\n    </Link>\n    <Text mt={2} color=\"gray.500\">\n      Getting a new business off the ground is a lot of hard work. Here are five ideas you can use to find your first\n      customers.\n    </Text>\n  </Box>\n</Box>\n```\n",
      "code": "var Component=(()=>{var h=Object.create;var r=Object.defineProperty;var m=Object.getOwnPropertyDescriptor;var p=Object.getOwnPropertyNames;var u=Object.getPrototypeOf,x=Object.prototype.hasOwnProperty;var g=(i,e)=>()=>(e||i((e={exports:{}}).exports,e),e.exports),y=(i,e)=>{for(var o in e)r(i,o,{get:e[o],enumerable:!0})},a=(i,e,o,t)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let s of p(e))!x.call(i,s)&&s!==o&&r(i,s,{get:()=>e[s],enumerable:!(t=m(e,s))||t.enumerable});return i};var f=(i,e,o)=>(o=i!=null?h(u(i)):{},a(e||!i||!i.__esModule?r(o,\"default\",{value:i,enumerable:!0}):o,i)),b=i=>a(r({},\"__esModule\",{value:!0}),i);var d=g((B,l)=>{l.exports=_jsx_runtime});var T={};y(T,{default:()=>v,frontmatter:()=>k});var n=f(d()),k={title:\"Responsive Styles\",description:\"Incmix UI supports responsive styles out of the box\",category:\"features\"};function c(i){let e=Object.assign({p:\"p\",code:\"code\",blockquote:\"blockquote\",pre:\"pre\",h2:\"h2\",ul:\"ul\",li:\"li\",strong:\"strong\"},i.components);return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsxs)(e.p,{children:[`Incmix UI supports responsive styles out of the box. Instead of manually adding\n`,(0,n.jsx)(e.code,{children:\"@media\"}),` queries and adding nested styles throughout your code, Incmix UI allows\nyou to provide object and array values to add mobile-first responsive styles.`]}),`\n`,(0,n.jsxs)(e.blockquote,{children:[`\n`,(0,n.jsxs)(e.p,{children:[\"We use the \",(0,n.jsx)(e.code,{children:\"@media(min-width)\"}),` media query to ensure your interfaces are\nmobile-first.`]}),`\n`]}),`\n`,(0,n.jsx)(e.p,{children:`Responsive syntax relies on the breakpoints defined in the theme object. Incmix\nUI provides default breakpoints, here's what it looks like:`}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-js\",children:`const breakpoints = {\n  sm: '30em',\n  md: '48em',\n  lg: '62em',\n  xl: '80em',\n  '2xl': '96em',\n}\n`})}),`\n`,(0,n.jsx)(e.p,{children:\"To make styles responsive, you can use either the array or object syntax.\"}),`\n`,(0,n.jsx)(e.h2,{id:\"the-array-syntax\",children:\"The Array syntax\"}),`\n`,(0,n.jsx)(e.p,{children:`All style props accept arrays as values for mobile-first responsive styles. This\nis the recommended method.`}),`\n`,(0,n.jsxs)(e.p,{children:[\"Let's say you have a \",(0,n.jsx)(e.code,{children:\"Box\"}),\" with the following properties:\"]}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-jsx\",live:\"false\",children:`<Box bg=\"red.200\" w=\"400px\">\n  This is a box\n</Box>\n`})}),`\n`,(0,n.jsxs)(e.p,{children:[\"To make the \",(0,n.jsx)(e.code,{children:\"width\"}),\" or \",(0,n.jsx)(e.code,{children:\"w\"}),` responsive using the array syntax, here's what you\nneed to do:`]}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-jsx\",live:\"false\",children:`<Box bg=\"red.200\" w={[300, 400, 500]}>\n  This is a box\n</Box>\n`})}),`\n`,(0,n.jsxs)(e.p,{children:[`To interpret array responsive values, Incmix UI converts the values defined in\n`,(0,n.jsx)(e.code,{children:\"theme.breakpoints\"}),` and sorts them in ascending order. Afterward, we map the\nvalues defined in the array to the breakpoints`]}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-js\",children:`// These are the default breakpoints\nconst breakpoints = {\n  sm: '30em',\n  md: '48em',\n  lg: '62em',\n  xl: '80em',\n  '2xl': '96em',\n}\n\n// Internally, we transform to this\nconst breakpoints = ['0em', '30em', '48em', '62em', '80em', '96em']\n`})}),`\n`,(0,n.jsx)(e.p,{children:\"Here's how to interpret this syntax:\"}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.code,{children:\"300px\"}),\": From \",(0,n.jsx)(e.code,{children:\"0em\"}),\" upwards\"]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.code,{children:\"400px\"}),\": From \",(0,n.jsx)(e.code,{children:\"30em\"}),\" upwards\"]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.code,{children:\"500px\"}),\": From \",(0,n.jsx)(e.code,{children:\"48em\"}),\" upwards\"]}),`\n`]}),`\n`,(0,n.jsxs)(e.blockquote,{children:[`\n`,(0,n.jsxs)(e.p,{children:[\"To skip certain breakpoints, you can pass \",(0,n.jsx)(e.code,{children:\"null\"}),` to any position in the array\nto avoid generating unnecessary CSS.`]}),`\n`]}),`\n`,(0,n.jsx)(e.h2,{id:\"the-object-syntax\",children:\"The Object syntax\"}),`\n`,(0,n.jsx)(e.p,{children:`You can also define responsive values with breakpoint aliases in an object. Any\nundefined alias key will define the base, non-responsive value.`}),`\n`,(0,n.jsxs)(e.p,{children:[\"Let's say you have a \",(0,n.jsx)(e.code,{children:\"Text\"}),\" that looks like this:\"]}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-jsx\",live:\"false\",children:`<Text fontSize=\"40px\">This is a text</Text>\n`})}),`\n`,(0,n.jsxs)(e.p,{children:[\"To make the \",(0,n.jsx)(e.code,{children:\"fontSize\"}),` responsive using the object syntax, here's what you need\nto do:`]}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-jsx\",live:\"false\",children:`<Text fontSize={{ base: '24px', md: '40px', lg: '56px' }}>This is responsive text</Text>\n`})}),`\n`,(0,n.jsxs)(e.blockquote,{children:[`\n`,(0,n.jsxs)(e.p,{children:[(0,n.jsx)(e.strong,{children:\"Remember, Incmix UI uses the min-width media query for responsive design\"}),`.\nThe breakpoints are: `,(0,n.jsx)(e.code,{children:\"sm = 30em\"}),\", \",(0,n.jsx)(e.code,{children:\"md = 48em\"}),\", \",(0,n.jsx)(e.code,{children:\"lg = 62em\"}),\", \",(0,n.jsx)(e.code,{children:\"xl = 80em\"})]}),`\n`]}),`\n`,(0,n.jsx)(e.p,{children:\"Here's how to interpret this syntax:\"}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.code,{children:\"base\"}),\": From \",(0,n.jsx)(e.code,{children:\"0em\"}),\" upwards\"]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.code,{children:\"md\"}),\": From \",(0,n.jsx)(e.code,{children:\"48em\"}),\" upwards\"]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.code,{children:\"lg\"}),\": From \",(0,n.jsx)(e.code,{children:\"62em\"}),\" upwards\"]}),`\n`]}),`\n`,(0,n.jsx)(e.h2,{id:\"more-examples\",children:\"More Examples\"}),`\n`,(0,n.jsx)(e.p,{children:`This works for every style prop in the theme specification, which means you can\nchange the style of most properties at a given breakpoint.`}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-jsx\",live:\"false\",children:`<>\n  <Box\n    height={{\n      base: '100%', // 0-48em\n      md: '50%', // 48em-80em,\n      xl: '25%', // 80em+\n    }}\n    bg=\"teal.400\"\n    width={[\n      '100%', // 0-30em\n      '50%', // 30em-48em\n      '25%', // 48em-62em\n      '15%', // 62em+\n    ]}\n  />\n  {/* responsive font size */}\n  <Box fontSize={['sm', 'md', 'lg', 'xl']}>Font Size</Box>\n  {/* responsive margin */}\n  <Box mt={[2, 4, 6, 8]} width=\"full\" height=\"24px\" bg=\"tomato\" />\n  {/* responsive padding */}\n  <Box bg=\"papayawhip\" p={[2, 4, 6, 8]}>\n    Padding\n  </Box>\n</>\n`})}),`\n`,(0,n.jsx)(e.h2,{id:\"under-the-hood\",children:\"Under the hood\"}),`\n`,(0,n.jsx)(e.p,{children:`This shortcut is an alternative to writing media queries out by hand. Given the\nfollowing:`}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-jsx\",live:\"false\",children:`<Box width={[1, 1 / 2, 1 / 4]} />\n`})}),`\n`,(0,n.jsx)(e.p,{children:\"It'll generate a CSS that looks like this\"}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-css\",children:`.Box {\n  width: 100%;\n}\n\n@media screen and (min-width: 30em) {\n  .Box {\n    width: 50%;\n  }\n}\n\n@media screen and (min-width: 48em) {\n  .Box {\n    width: 25%;\n  }\n}\n`})}),`\n`,(0,n.jsx)(e.p,{children:\"The equivalent of this style if you passed it as an object.\"}),`\n`,(0,n.jsx)(e.h2,{id:\"customizing-breakpoints\",children:\"Customizing Breakpoints\"}),`\n`,(0,n.jsxs)(e.p,{children:[`In some scenarios, you might need to define custom breakpoints for your\napplication. We recommended using common aliases like `,(0,n.jsx)(e.code,{children:\"sm\"}),\", \",(0,n.jsx)(e.code,{children:\"md\"}),\", \",(0,n.jsx)(e.code,{children:\"lg\"}),`, and\n`,(0,n.jsx)(e.code,{children:\"xl\"}),\".\"]}),`\n`,(0,n.jsx)(e.p,{children:\"To define custom breakpoints, just pass them as an object into the theme.\"}),`\n`,(0,n.jsxs)(e.blockquote,{children:[`\n`,(0,n.jsxs)(e.p,{children:[\"Note: Ensure the css unit of your breakpoints are the same. Use all \",(0,n.jsx)(e.code,{children:\"px\"}),` or\nall `,(0,n.jsx)(e.code,{children:\"em\"}),\", don't mix them.\"]}),`\n`]}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-jsx\",live:\"false\",children:`// 1. Import the utilities\nimport { extendTheme } from '@incmix-ui/react'\n\n// 2. Update the breakpoints as key-value pairs\nconst breakpoints = {\n  sm: '320px',\n  md: '768px',\n  lg: '960px',\n  xl: '1200px',\n  '2xl': '1536px',\n}\n\n// 3. Extend the theme\nconst theme = extendTheme({ breakpoints })\n\n// 4. Now you can use the custom breakpoints\nfunction Example() {\n  return <Box width={{ base: '100%', sm: '50%', md: '25%' }} />\n}\n`})}),`\n`,(0,n.jsxs)(e.blockquote,{children:[`\n`,(0,n.jsxs)(e.p,{children:[\"Note: If you're using \",(0,n.jsx)(e.strong,{children:\"pixels\"}),\" as breakpoint values make sure to \",(0,n.jsx)(e.strong,{children:\"always\"}),`\nprovide a value for the `,(0,n.jsx)(e.code,{children:\"2xl\"}),` breakpoint, which by its default pixels value is\n`,(0,n.jsx)(e.strong,{children:'\"1536px\"'}),\".\"]}),`\n`]}),`\n`,(0,n.jsx)(e.h2,{id:\"demo\",children:\"Demo\"}),`\n`,(0,n.jsxs)(e.p,{children:[`Here's a simple example of a marketing page component that uses a stacked layout\non small screens, and a side-by-side layout on larger screens `,(0,n.jsx)(e.strong,{children:`(resize your\nbrowser to see it in action)`}),\":\"]}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-jsx\",children:`<Box p={4} display={{ md: 'flex' }}>\n  <Box flexShrink={0}>\n    <Image borderRadius=\"lg\" width={{ md: 40 }} src=\"https://bit.ly/2jYM25F\" alt=\"Woman paying for a purchase\" />\n  </Box>\n  <Box mt={{ base: 4, md: 0 }} ml={{ md: 6 }}>\n    <Text fontWeight=\"bold\" textTransform=\"uppercase\" fontSize=\"sm\" letterSpacing=\"wide\" color=\"teal.600\">\n      Marketing\n    </Text>\n    <Link mt={1} display=\"block\" fontSize=\"lg\" lineHeight=\"normal\" fontWeight=\"semibold\" href=\"#\">\n      Finding customers for your new business\n    </Link>\n    <Text mt={2} color=\"gray.500\">\n      Getting a new business off the ground is a lot of hard work. Here are five ideas you can use to find your first\n      customers.\n    </Text>\n  </Box>\n</Box>\n`})})]})}function w(i={}){let{wrapper:e}=i.components||{};return e?(0,n.jsx)(e,Object.assign({},i,{children:(0,n.jsx)(c,i)})):c(i)}var v=w;return b(T);})();\n;return Component;"
    },
    "_id": "docs/styled-system/responsive-styles.mdx",
    "_raw": {
      "sourceFilePath": "docs/styled-system/responsive-styles.mdx",
      "sourceFileName": "responsive-styles.mdx",
      "sourceFileDir": "docs/styled-system",
      "contentType": "mdx",
      "flattenedPath": "docs/styled-system/responsive-styles"
    },
    "type": "Doc",
    "slug": "/docs/styled-system/responsive-styles",
    "frontMatter": {
      "title": "Responsive Styles",
      "description": "Incmix UI supports responsive styles out of the box",
      "slug": "/docs/styled-system/responsive-styles",
      "editUrl": "https://github.com/incmix-ui/incmix-ui-docs/tree/main/content/docs/styled-system/responsive-styles.mdx",
      "headings": [
        {
          "text": "The Array syntax",
          "id": "the-array-syntax",
          "level": "h2"
        },
        {
          "text": "The Object syntax",
          "id": "the-object-syntax",
          "level": "h2"
        },
        {
          "text": "More Examples",
          "id": "more-examples",
          "level": "h2"
        },
        {
          "text": "Under the hood",
          "id": "under-the-hood",
          "level": "h2"
        },
        {
          "text": "Customizing Breakpoints",
          "id": "customizing-breakpoints",
          "level": "h2"
        },
        {
          "text": "Demo",
          "id": "demo",
          "level": "h2"
        }
      ]
    }
  },
  {
    "title": "RTL Support",
    "description": "Incmix UI provides built-in support right-to-left (RTL) languages like arabic and hebrew, out of the box.",
    "scope": "usage",
    "version": "1.1+",
    "category": "features",
    "body": {
      "raw": "\nFor right-to-left (RTL) languages such as Arabic and Hebrew to be semantically\nappropriate, in addition to translating the texts, you need to also mirror the\nlayout.\n\nIncmix UI makes it possible to support RTL languages and LTR languages in the\nsame app. There are 2 methods of adding RTL support:\n\n- Using the RTL Stylis Plugin\n- Using RTL-aware style props\n\n## Using RTL Stylis Plugin\n\nSince Incmix UI is built on top of `@emotion/react`, you can leverage stylis\nplugins like `stylis-plugin-rtl` to automatically transform the generated styles\nto their RTL equivalent.\n\nHere's how to set it up.\n\n1. Install the stylis plugin and emotion's cache\n\n```bash\nnpm i stylis stylis-plugin-rtl @emotion/cache\n\n# or\n\nyarn add stylis stylis-plugin-rtl @emotion/cache\n```\n\n2. Create the RTL provider using `CacheProvider` from emotion\n\n```jsx live=false\n// src/components/rtl-provider.js\n\nimport { CacheProvider } from '@emotion/react'\nimport createCache from '@emotion/cache'\nimport rtl from 'stylis-plugin-rtl'\n\n// NB: A unique `key` is important for it to work!\nconst options = {\n  rtl: { key: 'css-ar', stylisPlugins: [rtl] },\n  ltr: { key: 'css-en' },\n}\n\nexport function RtlProvider({ children }) {\n  const { locale } = useRouter()\n  const dir = locale == 'ar' ? 'rtl' : 'ltr'\n  const cache = createCache(options[dir])\n  return <CacheProvider value={cache} children={children} />\n}\n```\n\n3. Add RTL provider to the application's root\n\n```jsx live=false ln={4,10-12}\n// pages/_app.js\n\nimport { IncmixProvider } from '@incmix-ui/react'\nimport { RtlProvider } from '@/components/rtl-provider'\n\nfunction App(props) {\n  const { Component, pageProps } = props\n  return (\n    <IncmixProvider>\n      <RtlProvider>\n        <Component {...pageProps} />\n      </RtlProvider>\n    </IncmixProvider>\n  )\n}\n\nexport default App\n```\n\n4. Add the `dir` and `lang` attributes to the `html` tag.\n\nYou'll need to make a few changes to your markup. In the `<html>` tag, you'll\nneed to add a `dir` attribute with a value of `rtl` or `ltr`. Here's what your\n`<html>` tag should look like:\n\n```jsx live=false\n/**\n * `lang` can be \"ar\", \"en\", \"he\", etc.\n * `dir` can be \"rtl\" or \"ltr\"\n */\n<html lang=\"ar\" dir=\"rtl\">\n  {/* Content */}\n</html>\n```\n\nIn Next.js, you can achieve this by adding a `pages/_document.js` file and using\nthis API:\n\n```jsx live=false ln={11-12,15}\n// pages/_document.js\n\nimport NextDocument, { Html, Head, Main, NextScript } from \"next/document\"\n\nclass Document extends NextDocument {\n  static async getInitialProps(ctx) {\n    return await NextDocument.getInitialProps(ctx)\n  }\n\n  render() {\n    const { locale } = this.props.__NEXT_DATA__\n    const dir = locale === \"ar\" ? \"rtl\" : \"ltr\"\n    return (\n      {/* 👇🏻 Here's the place to change the `dir` and `lang` */}\n      <Html dir={dir} lang={locale}>\n        <Head />\n        <body >\n          <Main />\n          <NextScript />\n        </body>\n      </Html>\n    )\n  }\n}\n\nexport default Document\n```\n\n5. Add a way to switch between LTR and RTL\n\nFor example, in `Next.js`, you can change the `locale` on the route by\nleveraging the built-in `useRouter` hook.\n\n```jsx live=false\n// src/components/lang-switcher.js\n\nfunction LangSwitcher() {\n  const { locale, push, reload, pathname } = useRouter()\n  const nextLocale = locale === 'en' ? 'ar' : 'en'\n\n  const onClick = async () => {\n    await push(pathname, { locale: nextLocale })\n    // force a reload for it to work correctly.\n    reload()\n  }\n\n  return <button onClick={onClick}>Change to {nextLocale}</button>\n}\n\nexport default LangSwitcher\n```\n\n### Caveats of this approach\n\n- You might need to force a reload of the page to get it working correctly.\n- You might need to change the placement of components like `Popover`, `Drawer`,\n  `Tooltip` to match RTL.\n- The need to install extra packages like `stylis`, `stylis-plugin-rtl` might\n  increase your final bundle.\n\n## Using RTL-aware style props\n\nThis is the recommended way to support RTL in Incmix UI. With this approach we\nuse the appropriate CSS logical properties, and manage the placements of\ncomponents like `Popover`, `Drawer`, `Tooltip` to match RTL.\n\nHere's how to set it up:\n\n1. Add a `direction` key to the theme\n\nYou can use the `extendTheme` function or any other preferred approach to add\n`direction` key to the theme. Then, add the custom theme to `IncmixProvider`.\n\n> Due to the fact the some CSS logical properties aren't supported in all\n> browsers, we flip the styles based on the `direction` as a temporary polyfill.\n\n```jsx live=false\n// src/components/incmix-rtl-provider.js\n\nfunction IncmixRTLProvider({ children }) {\n  const { locale } = useRouter()\n  const direction = locale === 'ar' ? 'rtl' : 'ltr'\n\n  // 👇🏻 Here's the place we add direction to the theme\n  const theme = extendTheme({ direction })\n\n  return <IncmixProvider theme={theme}>{children}</IncmixProvider>\n}\n```\n\n2. Add the `dir` and `lang` attributes to the `html` tag.\n\nIn Next.js, you can achieve this by adding a `pages/_document.js` file and using\nthis API:\n\n```jsx live=false ln={11-12,15}\n// pages/_document.js\n\nimport NextDocument, { Html, Head, Main, NextScript } from \"next/document\"\n\nclass Document extends NextDocument {\n  static async getInitialProps(ctx) {\n    return await NextDocument.getInitialProps(ctx)\n  }\n\n  render() {\n    const { locale } = this.props.__NEXT_DATA__\n    const dir = locale === \"ar\" ? \"rtl\" : \"ltr\"\n    return (\n      {/* 👇🏻 Here's the place to change the `dir` and `lang` */}\n      <Html dir={dir} lang={locale}>\n        <Head />\n        <body >\n          <Main />\n          <NextScript />\n        </body>\n      </Html>\n    )\n  }\n}\n\nexport default Document\n```\n\n3. Replace style props with their RTL-aware equivalent\n\nTo get our internal RTL system working, you need to replace all physical\n`*-left` or `*-right` styles (passed as props or in the `sx` prop) to their\nbi-directional versions (`*-start` or `*-end`).\n\nFor example:\n\n- Replace `paddingLeft` or `pl` prop with `paddingStart` or `ps`\n- Replace `marginRight` or `mr` prop with `marginEnd` or `me`\n- Replace `borderLeftRadius` with `borderStartRadius`\n\nHere's a list of the RTL-aware style props you can use alongside other\n[CSS logical properties](https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Logical_Properties):\n\n| Style prop                                      | Replace with                                    | Description                               |\n| ----------------------------------------------- | ----------------------------------------------- | ----------------------------------------- |\n| `paddingLeft`, `pl`                             | `paddingStart`, `ps`                            | padding in start direction                |\n| `paddingRight`, `pr`                            | `paddingEnd`, `pe`                              | padding in end direction                  |\n| `marginLeft`, `ml`                              | `marginStart`, `ms`                             | margin in start direction                 |\n| `marginRight`, `mr`                             | `marginEnd`, `me`                               | margin in end direction                   |\n| `roundedLeft`, `borderLeftRadius`               | `roundedStart`, `borderStartRadius`             | rounded borders in start direction        |\n| `roundedRight`, `borderRightRadius`             | `roundedEnd`, `borderEndRadius`                 | rounded borders in end direction          |\n| `roundedTopLeft`, `borderTopLeftRadius`         | `roundedTopStart`, `borderTopStartRadius`       | rounded borders in top start direction    |\n| `roundedTopRight`, `borderTopRightRadius`       | `roundedTopEnd`, `borderTopEndRadius`           | rounded borders in top end direction      |\n| `roundedBottomLeft`, `borderBottomLeftRadius`   | `roundedBottomStart`, `borderBottomStartRadius` | rounded borders in bottom start direction |\n| `roundedBottomRight`, `borderBottomRightRadius` | `roundedBottomEnd`, `borderBottomEndRadius`     | rounded borders in bottom end direction   |\n| `borderLeft`                                    | `borderStart`, `borderInlineStart`              | border width in start direction           |\n| `borderRight`                                   | `borderEnd`, `borderInlineEnd`                  | border width in end direction             |\n| `left`                                          | `insetStart`,                                   | horizontal position in start direction    |\n| `right`                                         | `insetEnd`,                                     | horizontal position in end direction      |\n\n4. Add a way to switch between LTR and RTL\n\nFor example, in `Next.js`, you can change the `locale` on the route by\nleveraging the built-in `useRouter` hook.\n\n```jsx live=false\n// src/components/lang-switcher.js\n\nfunction LangSwitcher() {\n  const { locale, push, reload, pathname } = useRouter()\n  const nextLocale = locale === 'en' ? 'ar' : 'en'\n\n  const onClick = async () => {\n    await push(pathname, { locale: nextLocale })\n  }\n\n  return <button onClick={onClick}>Change to {nextLocale}</button>\n}\n\nexport default LangSwitcher\n```\n\nAsides updating the style props you use in your application, we think this is\nthe best approach. In the end it's up to your team to decide which approach to\ngo with.\n\n## Additional resources\n\n- Blog Post -\n  [Setup an i18n routing with Nextjs and Incmix UI](https://dev.to/ugbechike/setup-an-internationalization-i18n-routing-web-app-with-nextjs-and-incmix-ui-39f1)\n- MDN\n  [CSS Logical Properties](https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Logical_Properties)\n\n> If you'd like to share your RTL setup with the community, feel free to add a\n> PR that updates this section.\n",
      "code": "var Component=(()=>{var s=Object.create;var i=Object.defineProperty;var p=Object.getOwnPropertyDescriptor;var u=Object.getOwnPropertyNames;var m=Object.getPrototypeOf,g=Object.prototype.hasOwnProperty;var b=(r,e)=>()=>(e||r((e={exports:{}}).exports,e),e.exports),f=(r,e)=>{for(var t in e)i(r,t,{get:e[t],enumerable:!0})},c=(r,e,t,o)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let d of u(e))!g.call(r,d)&&d!==t&&i(r,d,{get:()=>e[d],enumerable:!(o=p(e,d))||o.enumerable});return r};var y=(r,e,t)=>(t=r!=null?s(m(r)):{},c(e||!r||!r.__esModule?i(t,\"default\",{value:r,enumerable:!0}):t,r)),x=r=>c(i({},\"__esModule\",{value:!0}),r);var a=b((S,l)=>{l.exports=_jsx_runtime});var v={};f(v,{default:()=>L,frontmatter:()=>R});var n=y(a()),R={title:\"RTL Support\",version:\"1.1+\",description:\"Incmix UI provides built-in support right-to-left (RTL) languages like arabic and hebrew, out of the box.\",category:\"features\"};function h(r){let e=Object.assign({p:\"p\",ul:\"ul\",li:\"li\",h2:\"h2\",code:\"code\",ol:\"ol\",pre:\"pre\",h3:\"h3\",blockquote:\"blockquote\",a:\"a\",table:\"table\",thead:\"thead\",tr:\"tr\",th:\"th\",tbody:\"tbody\",td:\"td\"},r.components);return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(e.p,{children:`For right-to-left (RTL) languages such as Arabic and Hebrew to be semantically\nappropriate, in addition to translating the texts, you need to also mirror the\nlayout.`}),`\n`,(0,n.jsx)(e.p,{children:`Incmix UI makes it possible to support RTL languages and LTR languages in the\nsame app. There are 2 methods of adding RTL support:`}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsx)(e.li,{children:\"Using the RTL Stylis Plugin\"}),`\n`,(0,n.jsx)(e.li,{children:\"Using RTL-aware style props\"}),`\n`]}),`\n`,(0,n.jsx)(e.h2,{id:\"using-rtl-stylis-plugin\",children:\"Using RTL Stylis Plugin\"}),`\n`,(0,n.jsxs)(e.p,{children:[\"Since Incmix UI is built on top of \",(0,n.jsx)(e.code,{children:\"@emotion/react\"}),`, you can leverage stylis\nplugins like `,(0,n.jsx)(e.code,{children:\"stylis-plugin-rtl\"}),` to automatically transform the generated styles\nto their RTL equivalent.`]}),`\n`,(0,n.jsx)(e.p,{children:\"Here's how to set it up.\"}),`\n`,(0,n.jsxs)(e.ol,{children:[`\n`,(0,n.jsx)(e.li,{children:\"Install the stylis plugin and emotion's cache\"}),`\n`]}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-bash\",children:`npm i stylis stylis-plugin-rtl @emotion/cache\n\n# or\n\nyarn add stylis stylis-plugin-rtl @emotion/cache\n`})}),`\n`,(0,n.jsxs)(e.ol,{start:\"2\",children:[`\n`,(0,n.jsxs)(e.li,{children:[\"Create the RTL provider using \",(0,n.jsx)(e.code,{children:\"CacheProvider\"}),\" from emotion\"]}),`\n`]}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-jsx\",live:\"false\",children:`// src/components/rtl-provider.js\n\nimport { CacheProvider } from '@emotion/react'\nimport createCache from '@emotion/cache'\nimport rtl from 'stylis-plugin-rtl'\n\n// NB: A unique \\`key\\` is important for it to work!\nconst options = {\n  rtl: { key: 'css-ar', stylisPlugins: [rtl] },\n  ltr: { key: 'css-en' },\n}\n\nexport function RtlProvider({ children }) {\n  const { locale } = useRouter()\n  const dir = locale == 'ar' ? 'rtl' : 'ltr'\n  const cache = createCache(options[dir])\n  return <CacheProvider value={cache} children={children} />\n}\n`})}),`\n`,(0,n.jsxs)(e.ol,{start:\"3\",children:[`\n`,(0,n.jsx)(e.li,{children:\"Add RTL provider to the application's root\"}),`\n`]}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-jsx\",live:\"false\",ln:\"{4,10-12}\",children:`// pages/_app.js\n\nimport { IncmixProvider } from '@incmix-ui/react'\nimport { RtlProvider } from '@/components/rtl-provider'\n\nfunction App(props) {\n  const { Component, pageProps } = props\n  return (\n    <IncmixProvider>\n      <RtlProvider>\n        <Component {...pageProps} />\n      </RtlProvider>\n    </IncmixProvider>\n  )\n}\n\nexport default App\n`})}),`\n`,(0,n.jsxs)(e.ol,{start:\"4\",children:[`\n`,(0,n.jsxs)(e.li,{children:[\"Add the \",(0,n.jsx)(e.code,{children:\"dir\"}),\" and \",(0,n.jsx)(e.code,{children:\"lang\"}),\" attributes to the \",(0,n.jsx)(e.code,{children:\"html\"}),\" tag.\"]}),`\n`]}),`\n`,(0,n.jsxs)(e.p,{children:[\"You'll need to make a few changes to your markup. In the \",(0,n.jsx)(e.code,{children:\"<html>\"}),` tag, you'll\nneed to add a `,(0,n.jsx)(e.code,{children:\"dir\"}),\" attribute with a value of \",(0,n.jsx)(e.code,{children:\"rtl\"}),\" or \",(0,n.jsx)(e.code,{children:\"ltr\"}),`. Here's what your\n`,(0,n.jsx)(e.code,{children:\"<html>\"}),\" tag should look like:\"]}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-jsx\",live:\"false\",children:`/**\n * \\`lang\\` can be \"ar\", \"en\", \"he\", etc.\n * \\`dir\\` can be \"rtl\" or \"ltr\"\n */\n<html lang=\"ar\" dir=\"rtl\">\n  {/* Content */}\n</html>\n`})}),`\n`,(0,n.jsxs)(e.p,{children:[\"In Next.js, you can achieve this by adding a \",(0,n.jsx)(e.code,{children:\"pages/_document.js\"}),` file and using\nthis API:`]}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-jsx\",live:\"false\",ln:\"{11-12,15}\",children:`// pages/_document.js\n\nimport NextDocument, { Html, Head, Main, NextScript } from \"next/document\"\n\nclass Document extends NextDocument {\n  static async getInitialProps(ctx) {\n    return await NextDocument.getInitialProps(ctx)\n  }\n\n  render() {\n    const { locale } = this.props.__NEXT_DATA__\n    const dir = locale === \"ar\" ? \"rtl\" : \"ltr\"\n    return (\n      {/* \\u{1F447}\\u{1F3FB} Here's the place to change the \\`dir\\` and \\`lang\\` */}\n      <Html dir={dir} lang={locale}>\n        <Head />\n        <body >\n          <Main />\n          <NextScript />\n        </body>\n      </Html>\n    )\n  }\n}\n\nexport default Document\n`})}),`\n`,(0,n.jsxs)(e.ol,{start:\"5\",children:[`\n`,(0,n.jsx)(e.li,{children:\"Add a way to switch between LTR and RTL\"}),`\n`]}),`\n`,(0,n.jsxs)(e.p,{children:[\"For example, in \",(0,n.jsx)(e.code,{children:\"Next.js\"}),\", you can change the \",(0,n.jsx)(e.code,{children:\"locale\"}),` on the route by\nleveraging the built-in `,(0,n.jsx)(e.code,{children:\"useRouter\"}),\" hook.\"]}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-jsx\",live:\"false\",children:`// src/components/lang-switcher.js\n\nfunction LangSwitcher() {\n  const { locale, push, reload, pathname } = useRouter()\n  const nextLocale = locale === 'en' ? 'ar' : 'en'\n\n  const onClick = async () => {\n    await push(pathname, { locale: nextLocale })\n    // force a reload for it to work correctly.\n    reload()\n  }\n\n  return <button onClick={onClick}>Change to {nextLocale}</button>\n}\n\nexport default LangSwitcher\n`})}),`\n`,(0,n.jsx)(e.h3,{id:\"caveats-of-this-approach\",children:\"Caveats of this approach\"}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsx)(e.li,{children:\"You might need to force a reload of the page to get it working correctly.\"}),`\n`,(0,n.jsxs)(e.li,{children:[\"You might need to change the placement of components like \",(0,n.jsx)(e.code,{children:\"Popover\"}),\", \",(0,n.jsx)(e.code,{children:\"Drawer\"}),`,\n`,(0,n.jsx)(e.code,{children:\"Tooltip\"}),\" to match RTL.\"]}),`\n`,(0,n.jsxs)(e.li,{children:[\"The need to install extra packages like \",(0,n.jsx)(e.code,{children:\"stylis\"}),\", \",(0,n.jsx)(e.code,{children:\"stylis-plugin-rtl\"}),` might\nincrease your final bundle.`]}),`\n`]}),`\n`,(0,n.jsx)(e.h2,{id:\"using-rtl-aware-style-props\",children:\"Using RTL-aware style props\"}),`\n`,(0,n.jsxs)(e.p,{children:[`This is the recommended way to support RTL in Incmix UI. With this approach we\nuse the appropriate CSS logical properties, and manage the placements of\ncomponents like `,(0,n.jsx)(e.code,{children:\"Popover\"}),\", \",(0,n.jsx)(e.code,{children:\"Drawer\"}),\", \",(0,n.jsx)(e.code,{children:\"Tooltip\"}),\" to match RTL.\"]}),`\n`,(0,n.jsx)(e.p,{children:\"Here's how to set it up:\"}),`\n`,(0,n.jsxs)(e.ol,{children:[`\n`,(0,n.jsxs)(e.li,{children:[\"Add a \",(0,n.jsx)(e.code,{children:\"direction\"}),\" key to the theme\"]}),`\n`]}),`\n`,(0,n.jsxs)(e.p,{children:[\"You can use the \",(0,n.jsx)(e.code,{children:\"extendTheme\"}),` function or any other preferred approach to add\n`,(0,n.jsx)(e.code,{children:\"direction\"}),\" key to the theme. Then, add the custom theme to \",(0,n.jsx)(e.code,{children:\"IncmixProvider\"}),\".\"]}),`\n`,(0,n.jsxs)(e.blockquote,{children:[`\n`,(0,n.jsxs)(e.p,{children:[`Due to the fact the some CSS logical properties aren't supported in all\nbrowsers, we flip the styles based on the `,(0,n.jsx)(e.code,{children:\"direction\"}),\" as a temporary polyfill.\"]}),`\n`]}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-jsx\",live:\"false\",children:`// src/components/incmix-rtl-provider.js\n\nfunction IncmixRTLProvider({ children }) {\n  const { locale } = useRouter()\n  const direction = locale === 'ar' ? 'rtl' : 'ltr'\n\n  // \\u{1F447}\\u{1F3FB} Here's the place we add direction to the theme\n  const theme = extendTheme({ direction })\n\n  return <IncmixProvider theme={theme}>{children}</IncmixProvider>\n}\n`})}),`\n`,(0,n.jsxs)(e.ol,{start:\"2\",children:[`\n`,(0,n.jsxs)(e.li,{children:[\"Add the \",(0,n.jsx)(e.code,{children:\"dir\"}),\" and \",(0,n.jsx)(e.code,{children:\"lang\"}),\" attributes to the \",(0,n.jsx)(e.code,{children:\"html\"}),\" tag.\"]}),`\n`]}),`\n`,(0,n.jsxs)(e.p,{children:[\"In Next.js, you can achieve this by adding a \",(0,n.jsx)(e.code,{children:\"pages/_document.js\"}),` file and using\nthis API:`]}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-jsx\",live:\"false\",ln:\"{11-12,15}\",children:`// pages/_document.js\n\nimport NextDocument, { Html, Head, Main, NextScript } from \"next/document\"\n\nclass Document extends NextDocument {\n  static async getInitialProps(ctx) {\n    return await NextDocument.getInitialProps(ctx)\n  }\n\n  render() {\n    const { locale } = this.props.__NEXT_DATA__\n    const dir = locale === \"ar\" ? \"rtl\" : \"ltr\"\n    return (\n      {/* \\u{1F447}\\u{1F3FB} Here's the place to change the \\`dir\\` and \\`lang\\` */}\n      <Html dir={dir} lang={locale}>\n        <Head />\n        <body >\n          <Main />\n          <NextScript />\n        </body>\n      </Html>\n    )\n  }\n}\n\nexport default Document\n`})}),`\n`,(0,n.jsxs)(e.ol,{start:\"3\",children:[`\n`,(0,n.jsx)(e.li,{children:\"Replace style props with their RTL-aware equivalent\"}),`\n`]}),`\n`,(0,n.jsxs)(e.p,{children:[`To get our internal RTL system working, you need to replace all physical\n`,(0,n.jsx)(e.code,{children:\"*-left\"}),\" or \",(0,n.jsx)(e.code,{children:\"*-right\"}),\" styles (passed as props or in the \",(0,n.jsx)(e.code,{children:\"sx\"}),` prop) to their\nbi-directional versions (`,(0,n.jsx)(e.code,{children:\"*-start\"}),\" or \",(0,n.jsx)(e.code,{children:\"*-end\"}),\").\"]}),`\n`,(0,n.jsx)(e.p,{children:\"For example:\"}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsxs)(e.li,{children:[\"Replace \",(0,n.jsx)(e.code,{children:\"paddingLeft\"}),\" or \",(0,n.jsx)(e.code,{children:\"pl\"}),\" prop with \",(0,n.jsx)(e.code,{children:\"paddingStart\"}),\" or \",(0,n.jsx)(e.code,{children:\"ps\"})]}),`\n`,(0,n.jsxs)(e.li,{children:[\"Replace \",(0,n.jsx)(e.code,{children:\"marginRight\"}),\" or \",(0,n.jsx)(e.code,{children:\"mr\"}),\" prop with \",(0,n.jsx)(e.code,{children:\"marginEnd\"}),\" or \",(0,n.jsx)(e.code,{children:\"me\"})]}),`\n`,(0,n.jsxs)(e.li,{children:[\"Replace \",(0,n.jsx)(e.code,{children:\"borderLeftRadius\"}),\" with \",(0,n.jsx)(e.code,{children:\"borderStartRadius\"})]}),`\n`]}),`\n`,(0,n.jsxs)(e.p,{children:[`Here's a list of the RTL-aware style props you can use alongside other\n`,(0,n.jsx)(e.a,{href:\"https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Logical_Properties\",children:\"CSS logical properties\"}),\":\"]}),`\n`,(0,n.jsxs)(e.table,{children:[(0,n.jsx)(e.thead,{children:(0,n.jsxs)(e.tr,{children:[(0,n.jsx)(e.th,{children:\"Style prop\"}),(0,n.jsx)(e.th,{children:\"Replace with\"}),(0,n.jsx)(e.th,{children:\"Description\"})]})}),(0,n.jsxs)(e.tbody,{children:[(0,n.jsxs)(e.tr,{children:[(0,n.jsxs)(e.td,{children:[(0,n.jsx)(e.code,{children:\"paddingLeft\"}),\", \",(0,n.jsx)(e.code,{children:\"pl\"})]}),(0,n.jsxs)(e.td,{children:[(0,n.jsx)(e.code,{children:\"paddingStart\"}),\", \",(0,n.jsx)(e.code,{children:\"ps\"})]}),(0,n.jsx)(e.td,{children:\"padding in start direction\"})]}),(0,n.jsxs)(e.tr,{children:[(0,n.jsxs)(e.td,{children:[(0,n.jsx)(e.code,{children:\"paddingRight\"}),\", \",(0,n.jsx)(e.code,{children:\"pr\"})]}),(0,n.jsxs)(e.td,{children:[(0,n.jsx)(e.code,{children:\"paddingEnd\"}),\", \",(0,n.jsx)(e.code,{children:\"pe\"})]}),(0,n.jsx)(e.td,{children:\"padding in end direction\"})]}),(0,n.jsxs)(e.tr,{children:[(0,n.jsxs)(e.td,{children:[(0,n.jsx)(e.code,{children:\"marginLeft\"}),\", \",(0,n.jsx)(e.code,{children:\"ml\"})]}),(0,n.jsxs)(e.td,{children:[(0,n.jsx)(e.code,{children:\"marginStart\"}),\", \",(0,n.jsx)(e.code,{children:\"ms\"})]}),(0,n.jsx)(e.td,{children:\"margin in start direction\"})]}),(0,n.jsxs)(e.tr,{children:[(0,n.jsxs)(e.td,{children:[(0,n.jsx)(e.code,{children:\"marginRight\"}),\", \",(0,n.jsx)(e.code,{children:\"mr\"})]}),(0,n.jsxs)(e.td,{children:[(0,n.jsx)(e.code,{children:\"marginEnd\"}),\", \",(0,n.jsx)(e.code,{children:\"me\"})]}),(0,n.jsx)(e.td,{children:\"margin in end direction\"})]}),(0,n.jsxs)(e.tr,{children:[(0,n.jsxs)(e.td,{children:[(0,n.jsx)(e.code,{children:\"roundedLeft\"}),\", \",(0,n.jsx)(e.code,{children:\"borderLeftRadius\"})]}),(0,n.jsxs)(e.td,{children:[(0,n.jsx)(e.code,{children:\"roundedStart\"}),\", \",(0,n.jsx)(e.code,{children:\"borderStartRadius\"})]}),(0,n.jsx)(e.td,{children:\"rounded borders in start direction\"})]}),(0,n.jsxs)(e.tr,{children:[(0,n.jsxs)(e.td,{children:[(0,n.jsx)(e.code,{children:\"roundedRight\"}),\", \",(0,n.jsx)(e.code,{children:\"borderRightRadius\"})]}),(0,n.jsxs)(e.td,{children:[(0,n.jsx)(e.code,{children:\"roundedEnd\"}),\", \",(0,n.jsx)(e.code,{children:\"borderEndRadius\"})]}),(0,n.jsx)(e.td,{children:\"rounded borders in end direction\"})]}),(0,n.jsxs)(e.tr,{children:[(0,n.jsxs)(e.td,{children:[(0,n.jsx)(e.code,{children:\"roundedTopLeft\"}),\", \",(0,n.jsx)(e.code,{children:\"borderTopLeftRadius\"})]}),(0,n.jsxs)(e.td,{children:[(0,n.jsx)(e.code,{children:\"roundedTopStart\"}),\", \",(0,n.jsx)(e.code,{children:\"borderTopStartRadius\"})]}),(0,n.jsx)(e.td,{children:\"rounded borders in top start direction\"})]}),(0,n.jsxs)(e.tr,{children:[(0,n.jsxs)(e.td,{children:[(0,n.jsx)(e.code,{children:\"roundedTopRight\"}),\", \",(0,n.jsx)(e.code,{children:\"borderTopRightRadius\"})]}),(0,n.jsxs)(e.td,{children:[(0,n.jsx)(e.code,{children:\"roundedTopEnd\"}),\", \",(0,n.jsx)(e.code,{children:\"borderTopEndRadius\"})]}),(0,n.jsx)(e.td,{children:\"rounded borders in top end direction\"})]}),(0,n.jsxs)(e.tr,{children:[(0,n.jsxs)(e.td,{children:[(0,n.jsx)(e.code,{children:\"roundedBottomLeft\"}),\", \",(0,n.jsx)(e.code,{children:\"borderBottomLeftRadius\"})]}),(0,n.jsxs)(e.td,{children:[(0,n.jsx)(e.code,{children:\"roundedBottomStart\"}),\", \",(0,n.jsx)(e.code,{children:\"borderBottomStartRadius\"})]}),(0,n.jsx)(e.td,{children:\"rounded borders in bottom start direction\"})]}),(0,n.jsxs)(e.tr,{children:[(0,n.jsxs)(e.td,{children:[(0,n.jsx)(e.code,{children:\"roundedBottomRight\"}),\", \",(0,n.jsx)(e.code,{children:\"borderBottomRightRadius\"})]}),(0,n.jsxs)(e.td,{children:[(0,n.jsx)(e.code,{children:\"roundedBottomEnd\"}),\", \",(0,n.jsx)(e.code,{children:\"borderBottomEndRadius\"})]}),(0,n.jsx)(e.td,{children:\"rounded borders in bottom end direction\"})]}),(0,n.jsxs)(e.tr,{children:[(0,n.jsx)(e.td,{children:(0,n.jsx)(e.code,{children:\"borderLeft\"})}),(0,n.jsxs)(e.td,{children:[(0,n.jsx)(e.code,{children:\"borderStart\"}),\", \",(0,n.jsx)(e.code,{children:\"borderInlineStart\"})]}),(0,n.jsx)(e.td,{children:\"border width in start direction\"})]}),(0,n.jsxs)(e.tr,{children:[(0,n.jsx)(e.td,{children:(0,n.jsx)(e.code,{children:\"borderRight\"})}),(0,n.jsxs)(e.td,{children:[(0,n.jsx)(e.code,{children:\"borderEnd\"}),\", \",(0,n.jsx)(e.code,{children:\"borderInlineEnd\"})]}),(0,n.jsx)(e.td,{children:\"border width in end direction\"})]}),(0,n.jsxs)(e.tr,{children:[(0,n.jsx)(e.td,{children:(0,n.jsx)(e.code,{children:\"left\"})}),(0,n.jsxs)(e.td,{children:[(0,n.jsx)(e.code,{children:\"insetStart\"}),\",\"]}),(0,n.jsx)(e.td,{children:\"horizontal position in start direction\"})]}),(0,n.jsxs)(e.tr,{children:[(0,n.jsx)(e.td,{children:(0,n.jsx)(e.code,{children:\"right\"})}),(0,n.jsxs)(e.td,{children:[(0,n.jsx)(e.code,{children:\"insetEnd\"}),\",\"]}),(0,n.jsx)(e.td,{children:\"horizontal position in end direction\"})]})]})]}),`\n`,(0,n.jsxs)(e.ol,{start:\"4\",children:[`\n`,(0,n.jsx)(e.li,{children:\"Add a way to switch between LTR and RTL\"}),`\n`]}),`\n`,(0,n.jsxs)(e.p,{children:[\"For example, in \",(0,n.jsx)(e.code,{children:\"Next.js\"}),\", you can change the \",(0,n.jsx)(e.code,{children:\"locale\"}),` on the route by\nleveraging the built-in `,(0,n.jsx)(e.code,{children:\"useRouter\"}),\" hook.\"]}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-jsx\",live:\"false\",children:`// src/components/lang-switcher.js\n\nfunction LangSwitcher() {\n  const { locale, push, reload, pathname } = useRouter()\n  const nextLocale = locale === 'en' ? 'ar' : 'en'\n\n  const onClick = async () => {\n    await push(pathname, { locale: nextLocale })\n  }\n\n  return <button onClick={onClick}>Change to {nextLocale}</button>\n}\n\nexport default LangSwitcher\n`})}),`\n`,(0,n.jsx)(e.p,{children:`Asides updating the style props you use in your application, we think this is\nthe best approach. In the end it's up to your team to decide which approach to\ngo with.`}),`\n`,(0,n.jsx)(e.h2,{id:\"additional-resources\",children:\"Additional resources\"}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsxs)(e.li,{children:[`Blog Post -\n`,(0,n.jsx)(e.a,{href:\"https://dev.to/ugbechike/setup-an-internationalization-i18n-routing-web-app-with-nextjs-and-incmix-ui-39f1\",children:\"Setup an i18n routing with Nextjs and Incmix UI\"})]}),`\n`,(0,n.jsxs)(e.li,{children:[`MDN\n`,(0,n.jsx)(e.a,{href:\"https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Logical_Properties\",children:\"CSS Logical Properties\"})]}),`\n`]}),`\n`,(0,n.jsxs)(e.blockquote,{children:[`\n`,(0,n.jsx)(e.p,{children:`If you'd like to share your RTL setup with the community, feel free to add a\nPR that updates this section.`}),`\n`]})]})}function w(r={}){let{wrapper:e}=r.components||{};return e?(0,n.jsx)(e,Object.assign({},r,{children:(0,n.jsx)(h,r)})):h(r)}var L=w;return x(v);})();\n;return Component;"
    },
    "_id": "docs/styled-system/rtl-support.mdx",
    "_raw": {
      "sourceFilePath": "docs/styled-system/rtl-support.mdx",
      "sourceFileName": "rtl-support.mdx",
      "sourceFileDir": "docs/styled-system",
      "contentType": "mdx",
      "flattenedPath": "docs/styled-system/rtl-support"
    },
    "type": "Doc",
    "slug": "/docs/styled-system/rtl-support",
    "frontMatter": {
      "title": "RTL Support",
      "description": "Incmix UI provides built-in support right-to-left (RTL) languages like arabic and hebrew, out of the box.",
      "version": "1.1+",
      "slug": "/docs/styled-system/rtl-support",
      "editUrl": "https://github.com/incmix-ui/incmix-ui-docs/tree/main/content/docs/styled-system/rtl-support.mdx",
      "headings": [
        {
          "text": "Using RTL Stylis Plugin",
          "id": "using-rtl-stylis-plugin",
          "level": "h2"
        },
        {
          "text": "Caveats of this approach",
          "id": "caveats-of-this-approach",
          "level": "h3"
        },
        {
          "text": "Using RTL-aware style props",
          "id": "using-rtl-aware-style-props",
          "level": "h2"
        },
        {
          "text": "Additional resources",
          "id": "additional-resources",
          "level": "h2"
        }
      ]
    }
  },
  {
    "title": "Semantic Tokens",
    "description": "Incmix UI provides built-in support for conditional semantic design tokens",
    "scope": "usage",
    "category": "features",
    "body": {
      "raw": "\nIncmix UI supports **conditional semantic tokens** for every scale (colors, font\nsizes, etc). This allows to change the value of a token depending on the\nenvironment, like dark mode, direction and other CSS selectors.\n\nWe are using CSS variables which can change with a CSS condition. E.g. the color\ntoken `text` can have a different value in dark and light mode.\n\n## Token References\n\nA semantic token value can be a `string | SemanticValue`. The `string` value is\nused as reference to another token in the same scale e.g.\n\n```js\n{\n  error: 'red.500'\n}\n```\n\n## Conditional Tokens\n\nThe object notation `SemanticValue` allows to define the default value and\nconditional keys. The condition can be one of\n[incmix pseudo selectors](/docs/styled-system/style-props#pseudo) or a\ncustom CSS selector. Try `_dark`, `_light`, `_rtl`, `_ltr` and\n`_mediaReduceMotion`.\n\nIf you are tempted to use a CSS selector like `_focus`, `_hover` etc. define\nthose CSS variables at the component level.\n\nThe CSS variables are attached to the host element (CSS selector `:host, :root`)\nand cannot react to the components `<LightMode />` and `<DarkMode />`,\n`data-theme` attributes nor body class `.incmix-ui-dark`. It listens to e.g.\n`html[data-theme=\"dark\"]`.\n\n> Since the CSS variables are attached to the host element by default we can\n> only specify certain CSS selectors. E.g. `_hover` would always trigger, when\n> the `html` element is hovered - that's mostly not intended.\n\n```js\n{\n  text: {\n    default: 'gray.900',\n    _dark: 'gray.50'\n  }\n}\n```\n\nSemantic Tokens can reference theme tokens like `gray.900` and allow plain CSS\nvalues like e.g. `#F7FAFC`.\n\n```jsx live=false\nimport { IncmixProvider, extendTheme } from '@incmix-ui/react'\nconst customTheme = extendTheme({\n  semanticTokens: {\n    colors: {\n      error: 'red.500',\n      text: {\n        default: 'gray.900',\n        _dark: 'gray.50',\n      },\n    },\n  },\n})\n\nconst App = () => (\n  <IncmixProvider theme={customTheme}>\n    <Text color=\"text\">will be gray.900 in light mode and gray.50 in dark mode</Text>\n  </IncmixProvider>\n)\n```\n\n## Theme Example\n\n```jsx live=false\nimport { extendTheme } from '@incmix-ui/react'\n\nconst theme = extendTheme({\n  semanticTokens: {\n    colors: {\n      error: 'red.500',\n      success: 'green.500',\n      primary: {\n        default: 'red.500',\n        _dark: 'red.400',\n      },\n      secondary: {\n        default: 'red.800',\n        _dark: 'red.700',\n      },\n    },\n  },\n})\n```\n",
      "code": "var Component=(()=>{var h=Object.create;var c=Object.defineProperty;var m=Object.getOwnPropertyDescriptor;var u=Object.getOwnPropertyNames;var g=Object.getPrototypeOf,p=Object.prototype.hasOwnProperty;var k=(t,e)=>()=>(e||t((e={exports:{}}).exports,e),e.exports),f=(t,e)=>{for(var o in e)c(t,o,{get:e[o],enumerable:!0})},i=(t,e,o,d)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let r of u(e))!p.call(t,r)&&r!==o&&c(t,r,{get:()=>e[r],enumerable:!(d=m(e,r))||d.enumerable});return t};var x=(t,e,o)=>(o=t!=null?h(g(t)):{},i(e||!t||!t.__esModule?c(o,\"default\",{value:t,enumerable:!0}):o,t)),S=t=>i(c({},\"__esModule\",{value:!0}),t);var l=k((C,a)=>{a.exports=_jsx_runtime});var _={};f(_,{default:()=>T,frontmatter:()=>y});var n=x(l()),y={title:\"Semantic Tokens\",description:\"Incmix UI provides built-in support for conditional semantic design tokens\",category:\"features\"};function s(t){let e=Object.assign({p:\"p\",strong:\"strong\",code:\"code\",h2:\"h2\",pre:\"pre\",a:\"a\",blockquote:\"blockquote\"},t.components);return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsxs)(e.p,{children:[\"Incmix UI supports \",(0,n.jsx)(e.strong,{children:\"conditional semantic tokens\"}),` for every scale (colors, font\nsizes, etc). This allows to change the value of a token depending on the\nenvironment, like dark mode, direction and other CSS selectors.`]}),`\n`,(0,n.jsxs)(e.p,{children:[`We are using CSS variables which can change with a CSS condition. E.g. the color\ntoken `,(0,n.jsx)(e.code,{children:\"text\"}),\" can have a different value in dark and light mode.\"]}),`\n`,(0,n.jsx)(e.h2,{id:\"token-references\",children:\"Token References\"}),`\n`,(0,n.jsxs)(e.p,{children:[\"A semantic token value can be a \",(0,n.jsx)(e.code,{children:\"string | SemanticValue\"}),\". The \",(0,n.jsx)(e.code,{children:\"string\"}),` value is\nused as reference to another token in the same scale e.g.`]}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-js\",children:`{\n  error: 'red.500'\n}\n`})}),`\n`,(0,n.jsx)(e.h2,{id:\"conditional-tokens\",children:\"Conditional Tokens\"}),`\n`,(0,n.jsxs)(e.p,{children:[\"The object notation \",(0,n.jsx)(e.code,{children:\"SemanticValue\"}),` allows to define the default value and\nconditional keys. The condition can be one of\n`,(0,n.jsx)(e.a,{href:\"/docs/styled-system/style-props#pseudo\",children:\"incmix pseudo selectors\"}),` or a\ncustom CSS selector. Try `,(0,n.jsx)(e.code,{children:\"_dark\"}),\", \",(0,n.jsx)(e.code,{children:\"_light\"}),\", \",(0,n.jsx)(e.code,{children:\"_rtl\"}),\", \",(0,n.jsx)(e.code,{children:\"_ltr\"}),` and\n`,(0,n.jsx)(e.code,{children:\"_mediaReduceMotion\"}),\".\"]}),`\n`,(0,n.jsxs)(e.p,{children:[\"If you are tempted to use a CSS selector like \",(0,n.jsx)(e.code,{children:\"_focus\"}),\", \",(0,n.jsx)(e.code,{children:\"_hover\"}),` etc. define\nthose CSS variables at the component level.`]}),`\n`,(0,n.jsxs)(e.p,{children:[\"The CSS variables are attached to the host element (CSS selector \",(0,n.jsx)(e.code,{children:\":host, :root\"}),`)\nand cannot react to the components `,(0,n.jsx)(e.code,{children:\"<LightMode />\"}),\" and \",(0,n.jsx)(e.code,{children:\"<DarkMode />\"}),`,\n`,(0,n.jsx)(e.code,{children:\"data-theme\"}),\" attributes nor body class \",(0,n.jsx)(e.code,{children:\".incmix-ui-dark\"}),`. It listens to e.g.\n`,(0,n.jsx)(e.code,{children:'html[data-theme=\"dark\"]'}),\".\"]}),`\n`,(0,n.jsxs)(e.blockquote,{children:[`\n`,(0,n.jsxs)(e.p,{children:[`Since the CSS variables are attached to the host element by default we can\nonly specify certain CSS selectors. E.g. `,(0,n.jsx)(e.code,{children:\"_hover\"}),` would always trigger, when\nthe `,(0,n.jsx)(e.code,{children:\"html\"}),\" element is hovered - that's mostly not intended.\"]}),`\n`]}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-js\",children:`{\n  text: {\n    default: 'gray.900',\n    _dark: 'gray.50'\n  }\n}\n`})}),`\n`,(0,n.jsxs)(e.p,{children:[\"Semantic Tokens can reference theme tokens like \",(0,n.jsx)(e.code,{children:\"gray.900\"}),` and allow plain CSS\nvalues like e.g. `,(0,n.jsx)(e.code,{children:\"#F7FAFC\"}),\".\"]}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-jsx\",live:\"false\",children:`import { IncmixProvider, extendTheme } from '@incmix-ui/react'\nconst customTheme = extendTheme({\n  semanticTokens: {\n    colors: {\n      error: 'red.500',\n      text: {\n        default: 'gray.900',\n        _dark: 'gray.50',\n      },\n    },\n  },\n})\n\nconst App = () => (\n  <IncmixProvider theme={customTheme}>\n    <Text color=\"text\">will be gray.900 in light mode and gray.50 in dark mode</Text>\n  </IncmixProvider>\n)\n`})}),`\n`,(0,n.jsx)(e.h2,{id:\"theme-example\",children:\"Theme Example\"}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-jsx\",live:\"false\",children:`import { extendTheme } from '@incmix-ui/react'\n\nconst theme = extendTheme({\n  semanticTokens: {\n    colors: {\n      error: 'red.500',\n      success: 'green.500',\n      primary: {\n        default: 'red.500',\n        _dark: 'red.400',\n      },\n      secondary: {\n        default: 'red.800',\n        _dark: 'red.700',\n      },\n    },\n  },\n})\n`})})]})}function v(t={}){let{wrapper:e}=t.components||{};return e?(0,n.jsx)(e,Object.assign({},t,{children:(0,n.jsx)(s,t)})):s(t)}var T=v;return S(_);})();\n;return Component;"
    },
    "_id": "docs/styled-system/semantic-tokens.mdx",
    "_raw": {
      "sourceFilePath": "docs/styled-system/semantic-tokens.mdx",
      "sourceFileName": "semantic-tokens.mdx",
      "sourceFileDir": "docs/styled-system",
      "contentType": "mdx",
      "flattenedPath": "docs/styled-system/semantic-tokens"
    },
    "type": "Doc",
    "slug": "/docs/styled-system/semantic-tokens",
    "frontMatter": {
      "title": "Semantic Tokens",
      "description": "Incmix UI provides built-in support for conditional semantic design tokens",
      "slug": "/docs/styled-system/semantic-tokens",
      "editUrl": "https://github.com/incmix-ui/incmix-ui-docs/tree/main/content/docs/styled-system/semantic-tokens.mdx",
      "headings": [
        {
          "text": "Token References",
          "id": "token-references",
          "level": "h2"
        },
        {
          "text": "Conditional Tokens",
          "id": "conditional-tokens",
          "level": "h2"
        },
        {
          "text": "Theme Example",
          "id": "theme-example",
          "level": "h2"
        }
      ]
    }
  },
  {
    "title": "Style Props",
    "description": "Learn how to use style props in Incmix UI. Style props are a way to alter the style of a component by simply passing props to it",
    "scope": "usage",
    "category": "features",
    "body": {
      "raw": "\nStyle props are a way to alter the style of a component by simply passing props\nto it. It helps to save time by providing helpful shorthand ways to style\ncomponents.\n\n## Reference\n\nThe following table shows a list of every style prop and the properties within\neach group.\n\n### Margin and padding\n\n```jsx live=false\nimport { Box } from \"@incmix-ui/react\"\n\n// m={2} refers to the value of `theme.space[2]`\n<Box m={2}>Tomato</Box>\n\n// You can also use custom values\n<Box maxW=\"960px\" mx=\"auto\" />\n\n// sets margin `8px` on all viewports and `12px` from the first breakpoint and up\n<Box m={[2, 3]} />\n```\n\n| Prop                  | CSS Property                                  | Theme Key |\n| --------------------- | --------------------------------------------- | --------- |\n| `m`, `margin`         | `margin`                                      | `space`   |\n| `mt`, `marginTop`     | `margin-top`                                  | `space`   |\n| `mr`, `marginRight`   | `margin-right`                                | `space`   |\n| `me`, `marginEnd`     | `margin-inline-end`                           | `space`   |\n| `mb`, `marginBottom`  | `margin-bottom`                               | `space`   |\n| `ml`, `marginLeft`    | `margin-left`                                 | `space`   |\n| `ms`, `marginStart`   | `margin-inline-start`                         | `space`   |\n| `mx`, `marginX`       | `margin-inline-start` + `margin-inline-end`   | `space`   |\n| `my`, `marginY`       | `margin-top` + `margin-bottom`                | `space`   |\n| `p`, `padding`        | `padding`                                     | `space`   |\n| `pt`, `paddingTop`    | `padding-top`                                 | `space`   |\n| `pr`, `paddingRight`  | `padding-right`                               | `space`   |\n| `pe`, `paddingEnd`    | `padding-inline-end`                          | `space`   |\n| `pb`, `paddingBottom` | `padding-bottom`                              | `space`   |\n| `pl`, `paddingLeft`   | `padding-left`                                | `space`   |\n| `ps`, `paddingStart`  | `padding-inline-start`                        | `space`   |\n| `px`, `paddingX`      | `padding-inline-start` + `padding-inline-end` | `space`   |\n| `py`, `paddingY`      | `padding-top` + `padding-bottom`              | `space`   |\n\n> For `mx` and `px` props, we use `margin-inline-start` and `margin-inline-end`\n> to ensure the generated styles are RTL-friendly\n\n### Color and background color\n\n```jsx live=false\nimport { Box } from \"@incmix-ui/react\"\n\n// picks up a nested color value using dot notation\n// => `theme.colors.gray[50]`\n<Box color='gray.50' />\n\n// raw CSS color value\n<Box color='#f00' />\n\n// background colors\n<Box bg='tomato' />\n\n// verbose prop\n<Box backgroundColor='tomato' />\n```\n\n| Prop               | CSS Property       | Theme Key |\n| ------------------ | ------------------ | --------- |\n| `color`            | `color`            | `colors`  |\n| `bg`, `background` | `background`       | `colors`  |\n| `bgColor`          | `background-color` | `colors`  |\n| `opacity`          | `opacity`          | none      |\n\n### Gradient\n\n```jsx live=false\nimport { Box, Text } from \"@incmix-ui/react\"\n\n// adding linear gradient and color transitions\n<Box w=\"100%\" h=\"200px\" bgGradient=\"linear(to-t, green.200, pink.500)\" />\n\n// adding radial gradient and color transitions\n<Box w=\"100%\" h=\"200px\" bgGradient=\"radial(gray.300, yellow.400, pink.200)\" />\n\n// adding the text gradient\n<Text\n  bgGradient=\"linear(to-l, #7928CA, #FF0080)\"\n  bgClip=\"text\"\n  fontSize=\"6xl\"\n  fontWeight=\"extrabold\"\n>\n  Welcome to Incmix UI\n</Text>\n\n```\n\n| Prop                       | CSS Property       | Theme Key |\n| -------------------------- | ------------------ | --------- |\n| `bgGradient`               | `background-image` | none      |\n| `bgClip`, `backgroundClip` | `background-clip`  | none      |\n\n### Typography\n\n```jsx live=false\nimport { Text } from \"@incmix-ui/react\"\n\n// font-size of `theme.fontSizes.md`\n<Text fontSize=\"md\" />\n\n// font-size `32px`\n<Text fontSize={32} />\n\n// font-size `'2em'`\n<Text fontSize='2em' />\n\n// text-align `left` on all viewports and `center` from the first breakpoint and up\n<Text textAlign={[ 'left', 'center' ]} />\n```\n\n| Prop             | CSS Property      | Theme Key        |\n| ---------------- | ----------------- | ---------------- |\n| `fontFamily`     | `font-family`     | `fonts`          |\n| `fontSize`       | `font-size`       | `fontSizes`      |\n| `fontWeight`     | `font-weight`     | `fontWeights`    |\n| `lineHeight`     | `line-height`     | `lineHeights`    |\n| `letterSpacing`  | `letter-spacing`  | `letterSpacings` |\n| `textAlign`      | `text-align`      | none             |\n| `fontStyle`      | `font-style`      | none             |\n| `textTransform`  | `text-transform`  | none             |\n| `textDecoration` | `text-decoration` | none             |\n\n### Layout, width and height\n\n```jsx live=false\nimport { Box } from \"@incmix-ui/react\"\n\n// verbose\n<Box width=\"100%\" height={32} />\n\n// shorthand\n<Box w=\"100%\" h=\"32px\" />\n\n// use theme sizing\n<Box boxSize=\"sm\" />\n\n// width `256px`\n<Box w={256} />\n\n// width `'40px'`\n<Box w='40px' />\n\n```\n\n| Prop                | CSS Property      | Theme Key |\n| ------------------- | ----------------- | --------- |\n| `w`, `width`        | `width`           | `sizes`   |\n| `h`, `height`       | `height`          | `sizes`   |\n| `minW`, `minWidth`  | `min-width`       | `sizes`   |\n| `maxW`, `maxWidth`  | `max-width`       | `sizes`   |\n| `minH`, `minHeight` | `min-height`      | `sizes`   |\n| `maxH`, `maxHeight` | `max-height`      | `sizes`   |\n| `display`           | `display`         | none      |\n| `boxSize`           | `width`, `height` | `sizes`   |\n| `verticalAlign`     | `vertical-align`  | none      |\n| `overflow`          | `overflow`        | none      |\n| `overflowX`         | `overflow-x`      | none      |\n| `overflowY`         | `overflow-y`      | none      |\n\n### Flexbox\n\n```jsx live=false\nimport { Box, Flex } from \"@incmix-ui/react\"\n\n// verbose\n<Box display=\"flex\" alignItems=\"center\" justifyContent=\"space-between\">\n  Box with Flex props\n</Box>\n\n// shorthand using the `Flex` component\n<Flex align=\"center\" justify=\"center\">\n  Flex Container\n</Flex>\n```\n\n> Note: Props in `*` will only work if you use the `Flex` component.\n\n| Prop                                      | CSS Property      | Theme Key |\n| ----------------------------------------- | ----------------- | --------- |\n| `gap`                                     | `gap`             | `space`   |\n| `rowGap`                                  | `row-gap`         | `space`   |\n| `columnGap`                               | `column-gap`      | `space`   |\n| `alignItems`, \\*`align`                   | `align-items`     | none      |\n| `alignContent`                            | `align-content`   | none      |\n| `justifyItems`                            | `justify-items`   | none      |\n| `justifyContent`, \\*`justify`             | `justify-content` | none      |\n| `flexWrap`, \\*`wrap`                      | `flex-wrap`       | none      |\n| `flexDirection`, `flexDir`, \\*`direction` | `flex-direction`  | none      |\n| `flex`                                    | `flex`            | none      |\n| `flexGrow`                                | `flex-grow`       | none      |\n| `flexShrink`                              | `flex-shrink`     | none      |\n| `flexBasis`                               | `flex-basis`      | none      |\n| `justifySelf`                             | `justify-self`    | none      |\n| `alignSelf`                               | `align-self`      | none      |\n| `order`                                   | `order`           | none      |\n\n### Grid Layout\n\n```jsx live=false\nimport { Box, Grid } from \"@incmix-ui/react\"\n\n// verbose\n<Box display=\"grid\" gridGap={2} gridAutoFlow=\"row dense\">\n  Grid\n</Box>\n\n// shorthand using the `Grid` component\n<Grid gap={2} autoFlow=\"row dense\">\n  Grid\n</Grid>\n```\n\n> Note: Props in `*` will only work if you use the `Grid` component.\n\n| Prop                                       | CSS Property            | Theme Key |\n| ------------------------------------------ | ----------------------- | --------- |\n| `gridGap`, \\*`gap`                         | `grid-gap`              | `space`   |\n| `gridRowGap`, \\*`rowGap`                   | `grid-row-gap`          | `space`   |\n| `gridColumnGap`, \\*`columnGap`             | `grid-column-gap`       | `space`   |\n| `gridColumn`, \\*`column`                   | `grid-column`           | none      |\n| `gridRow`, \\*`row`                         | `grid-row`              | none      |\n| `gridArea`, \\*`area`                       | `grid-area`             | none      |\n| `gridAutoFlow`, \\*`autoFlow`               | `grid-auto-flow`        | none      |\n| `gridAutoRows`, \\*`autoRows`               | `grid-auto-rows`        | none      |\n| `gridAutoColumns`, \\*`autoColumns`         | `grid-auto-columns`     | none      |\n| `gridTemplateRows`, \\*`templateRows`       | `grid-template-rows`    | none      |\n| `gridTemplateColumns`, \\*`templateColumns` | `grid-template-columns` | none      |\n| `gridTemplateAreas`, \\*`templateAreas`     | `grid-template-areas`   | none      |\n\n### Background\n\n```jsx live=false\nimport { Box } from \"@incmix-ui/react\"\n\n// verbose\n<Box\n  backgroundImage=\"url('/images/kyuubi.png')\"\n  backgroundPosition=\"center\"\n  backgroundRepeat=\"no-repeat\"\n/>\n\n// shorthand\n<Box\n  bgImage=\"url('/images/gaara.png')\"\n  bgPosition=\"center\"\n  bgRepeat=\"no-repeat\"\n/>\n```\n\n| Prop                                  | CSS Property            | Theme Key |\n| ------------------------------------- | ----------------------- | --------- |\n| `bg`, `background`                    | `background`            | none      |\n| `bgImage`, `backgroundImage`          | `background-image`      | none      |\n| `bgSize`, `backgroundSize`            | `background-size`       | none      |\n| `bgPosition`,`backgroundPosition`     | `background-position`   | none      |\n| `bgRepeat`,`backgroundRepeat`         | `background-repeat`     | none      |\n| `bgAttachment`,`backgroundAttachment` | `background-attachment` | none      |\n\n### Borders\n\n```jsx live=false\n<Box border=\"1px\" borderColor=\"gray.200\">\n  Card\n</Box>\n```\n\n| Prop                | CSS Property                   | Theme Field    |\n| ------------------- | ------------------------------ | -------------- |\n| `border`            | `border`                       | `borders`      |\n| `borderWidth`       | `border-width`                 | `borderWidths` |\n| `borderStyle`       | `border-style`                 | `borderStyles` |\n| `borderColor`       | `border-color`                 | `colors`       |\n| `borderTop`         | `border-top`                   | `borders`      |\n| `borderTopWidth`    | `border-top-width`             | `borderWidths` |\n| `borderTopStyle`    | `border-top-style`             | `borderStyles` |\n| `borderTopColor`    | `border-top-color`             | `colors`       |\n| `borderRight`       | `border-right`                 | `borders`      |\n| `borderEnd`         | `border-inline-end`            | `borders`      |\n| `borderRightWidth`  | `border-right-width`           | `borderWidths` |\n| `borderEndWidth`    | `border-inline-end-width`      | `borderWidths` |\n| `borderRightStyle`  | `border-right-style`           | `borderStyles` |\n| `borderEndStyle`    | `border-inline-end-style`      | `borderStyles` |\n| `borderRightColor`  | `border-right-color`           | `colors`       |\n| `borderEndColor`    | `border-inline-end-color`      | `colors`       |\n| `borderBottom`      | `border-bottom`                | `borders`      |\n| `borderBottomWidth` | `border-bottom-width`          | `borderWidths` |\n| `borderBottomStyle` | `border-bottom-style`          | `borderStyles` |\n| `borderBottomColor` | `border-bottom-color`          | `colors`       |\n| `borderLeft`        | `border-left`                  | `borders`      |\n| `borderStart`       | `border-inline-start`          | `borders`      |\n| `borderLeftWidth`   | `border-left-width`            | `borderWidths` |\n| `borderStartWidth`  | `border-inline-start-width`    | `borderWidths` |\n| `borderLeftStyle`   | `border-left-style`            | `borderStyles` |\n| `borderStartStyle`  | `border-inline-start-style`    | `borderStyles` |\n| `borderLeftColor`   | `border-left-color`            | `colors`       |\n| `borderStartColor`  | `border-inline-start-color`    | `colors`       |\n| `borderX`           | `border-left` , `border-right` | `borders`      |\n| `borderY`           | `border-top` , `border-bottom` | `borders`      |\n\n### Border Radius\n\n```jsx live=false\nimport { Button } from \"@incmix-ui/react\"\n\n// This button will have no right borderRadius\n<Button borderRightRadius=\"0\">Button 1</Button>\n\n// This button will have no left borderRadius*/\n<Button borderLeftRadius=\"0\">Button 2</Button>\n\n// top left and top right radius will be `theme.radii.md` => 4px\n<Button borderTopRadius=\"md\">Button 2</Button>\n```\n\n| Prop                      | CSS Property                                                                 | Theme Field |\n| ------------------------- | ---------------------------------------------------------------------------- | ----------- |\n| `borderRadius`            | `border-radius`                                                              | `radii`     |\n| `borderTopLeftRadius`     | `border-top-left-radius`                                                     | `radii`     |\n| `borderTopStartRadius`    | `border-top-left-radius` in LTR,<br/> `border-top-right-radius` in RTL       | `radii`     |\n| `borderTopRightRadius`    | `border-top-right-radius`                                                    | `radii`     |\n| `borderTopEndRadius`      | `border-top-right-radius` in LTR,<br/> `border-top-left-radius` in RTL       | `radii`     |\n| `borderBottomRightRadius` | `border-bottom-right-radius`                                                 | `radii`     |\n| `borderBottomEndRadius`   | `border-bottom-right-radius` in LTR,<br/> `border-bottom-left-radius` in RTL | `radii`     |\n| `borderBottomLeftRadius`  | `border-bottom-left-radius`                                                  | `radii`     |\n| `borderBottomStartRadius` | `border-bottom-left-radius` in LTR,<br/> `border-bottom-left-radius` in RTL  | `radii`     |\n| `borderTopRadius`         | `border-top-left-radius` + `border-top-right-radius`                         | `radii`     |\n| `borderRightRadius`       | `border-top-right-radius` + `border-bottom-right-radius`                     | `radii`     |\n| `borderEndRadius`         | `border-top-right-radius` + `border-bottom-right-radius`                     | `radii`     |\n| `borderBottomRadius`      | `border-bottom-left-radius` + `border-bottom-right-radius`                   | `radii`     |\n| `borderLeftRadius`        | `border-top-left-radius` + `border-bottom-left-radius`                       | `radii`     |\n| `borderStartRadius`       | `border-top-left-radius` + `border-bottom-left-radius`                       | `radii`     |\n\n### Position\n\n```jsx live=false\nimport { Box } from \"@incmix-ui/react\"\n\n// verbose\n<Box position=\"absolute\">Cover</Box>\n\n// shorthand\n<Box pos=\"absolute\">Cover</Box>\n<Box pos=\"absolute\" top=\"0\" left=\"0\">\n  Absolute with top and left\n</Box>\n<Box pos=\"fixed\" w=\"100%\" zIndex={2}>\n  Fixed with zIndex\n</Box>\n```\n\n| Prop             | CSS Property | Theme Field |\n| ---------------- | ------------ | ----------- |\n| `pos`,`position` | `position`   | none        |\n| `zIndex`         | `z-index`    | `zIndices`  |\n| `top`            | `top`        | `space`     |\n| `right`          | `right`      | `space`     |\n| `bottom`         | `bottom`     | `space`     |\n| `left`           | `left`       | `space`     |\n\n### Shadow\n\n```jsx\n<SimpleGrid bg=\"gray.50\" columns={{ sm: 2, md: 4 }} spacing=\"8\" p=\"10\" textAlign=\"center\" rounded=\"lg\" color=\"gray.400\">\n  <Box boxShadow=\"xs\" p=\"6\" rounded=\"md\" bg=\"white\">\n    xs\n  </Box>\n  <Box boxShadow=\"sm\" p=\"6\" rounded=\"md\" bg=\"white\">\n    sm\n  </Box>\n  <Box boxShadow=\"base\" p=\"6\" rounded=\"md\" bg=\"white\">\n    Base\n  </Box>\n  <Box boxShadow=\"md\" p=\"6\" rounded=\"md\" bg=\"white\">\n    md\n  </Box>\n  <Box boxShadow=\"lg\" p=\"6\" rounded=\"md\" bg=\"white\">\n    lg\n  </Box>\n  <Box boxShadow=\"xl\" p=\"6\" rounded=\"md\" bg=\"white\">\n    xl\n  </Box>\n  <Box boxShadow=\"2xl\" p=\"6\" rounded=\"md\" bg=\"white\">\n    2xl\n  </Box>\n  <Box boxShadow=\"dark-lg\" p=\"6\" rounded=\"md\" bg=\"white\">\n    Dark lg\n  </Box>\n  <Box boxShadow=\"outline\" p=\"6\" rounded=\"md\" bg=\"white\">\n    Outline\n  </Box>\n  <Box boxShadow=\"inner\" p=\"6\" rounded=\"md\" bg=\"white\">\n    Inner\n  </Box>\n</SimpleGrid>\n```\n\n```jsx\n<Text textShadow=\"1px 1px #ff0000\" m=\"6\">\n  Text with shadows\n</Text>\n```\n\n| Prop                  | CSS Property  | Theme Field |\n| --------------------- | ------------- | ----------- |\n| `textShadow`          | `text-shadow` | `shadows`   |\n| `shadow`, `boxShadow` | `box-shadow`  | `shadows`   |\n\n### Filter\n\n```jsx\nfunction Filters() {\n  const basicBoxStyles = {\n    display: 'flex',\n    alignItems: 'center',\n    justifyContent: 'center',\n    textAlign: 'center',\n    boxSize: '250px',\n    color: 'white',\n    textShadow: '0 0 20px black',\n    fontWeight: 'bold',\n    fontSize: '20px',\n    px: 4,\n    background: 'url(https://picsum.photos/id/1080/200/300) center/cover no-repeat',\n  }\n  return (\n    <Flex flexWrap=\"wrap\" gap=\"24px\" justifyContent=\"space-evenly\">\n      {/* adding filter property to the element */}\n      <Box sx={basicBoxStyles} filter=\"grayscale(80%)\">\n        Box with Filter\n      </Box>\n      {/* adding blur property to the element */}\n      <Box sx={basicBoxStyles} filter=\"auto\" blur=\"2px\">\n        Box with Blur\n      </Box>\n      {/* adding brightness property to the element */}\n      <Box sx={basicBoxStyles} filter=\"auto\" brightness=\"40%\">\n        Box with Brightness\n      </Box>\n    </Flex>\n  )\n}\n```\n\n> Note: To apply `blur`, `brightness`, `contrast`, `hueRotate`, `invert`,\n> `saturate` props on the element, set `filter` prop value to \"auto\".\n\n```jsx\nfunction BackdropFilters() {\n  const outerBoxStyles = {\n    boxSize: '250px',\n    p: '10',\n    background: 'url(https://picsum.photos/id/1068/200/300) center/cover no-repeat',\n  }\n\n  const innerBoxStyles = {\n    display: 'flex',\n    alignItems: 'center',\n    justifyContent: 'center',\n    textAlign: 'center',\n    boxSize: 'full',\n    color: 'white',\n    textShadow: '0 0 20px black',\n    fontWeight: 'bold',\n    fontSize: '20px',\n  }\n  return (\n    <Flex flexWrap=\"wrap\" gap=\"24px\" justifyContent=\"space-evenly\">\n      {/* adding backdrop-filter property to the element */}\n      <Box sx={outerBoxStyles}>\n        <Box sx={innerBoxStyles} backdropFilter=\"invert(100%)\">\n          Box with Backdrop Filter\n        </Box>\n      </Box>\n      {/* adding backdrop-blur property to the element */}\n      <Box sx={outerBoxStyles}>\n        <Box sx={innerBoxStyles} backdropFilter=\"auto\" backdropBlur=\"8px\">\n          Box with Backdrop Blur\n        </Box>\n      </Box>\n      {/* adding backdrop-contrast property to the element */}\n      <Box sx={outerBoxStyles}>\n        <Box sx={innerBoxStyles} backdropFilter=\"auto\" backdropContrast=\"30%\">\n          Box with Backdrop Contrast\n        </Box>\n      </Box>\n    </Flex>\n  )\n}\n```\n\n> 🚨 `backdrop-filter` is not supported in Firefox. It can be enabled by the\n> user, but it is suggested to design a component that looks good with and\n> without this property.\n\n> Note: To apply `backdropBlur`, `backdropBrightness`, `backdropContrast`,\n> `backdropHueRotate`, `backdropInvert`, `backdropSaturate` props on the\n> element, set `backdropFilter` prop value to \"auto\".\n\n| Prop                 | CSS Property      | Theme Field |\n| -------------------- | ----------------- | ----------- |\n| `filter`             | `filter`          | none        |\n| `blur`               | `filter`          | `blur`      |\n| `brightness`         | `filter`          | none        |\n| `contrast`           | `filter`          | none        |\n| `hueRotate`          | `filter`          | none        |\n| `invert`             | `filter`          | none        |\n| `saturate`           | `filter`          | none        |\n| `dropShadow`         | `filter`          | `shadows`   |\n| `backdropFilter`     | `backdrop-filter` | none        |\n| `backdropBlur`       | `backdrop-filter` | `blur`      |\n| `backdropBrightness` | `backdrop-filter` | none        |\n| `backdropContrast`   | `backdrop-filter` | none        |\n| `backdropHueRotate`  | `backdrop-filter` | none        |\n| `backdropInvert`     | `backdrop-filter` | none        |\n| `backdropSaturate`   | `backdrop-filter` | none        |\n\n### Pseudo\n\n```jsx live=false\nimport { Button } from \"@incmix-ui/react\"\n\n// :hover style\n<Button\n  colorScheme=\"teal\"\n  _hover={{\n    background: \"white\",\n    color: \"teal.500\",\n  }}\n>\n  Hover me\n</Button>\n\n// apply :hover over parent element\n<Box\n  role=\"group\"\n>\n  <Box\n    _hover={{ fontWeight: 'semibold' }}\n    _groupHover={{ color: 'tomato' }}\n  >\n  </Box>\n</Box>\n\n// add ::before pseudo element\n// Note: the content value needs an extra set of quotes!\n<Box\n  _before={{ content: '\"🙂\"', display: 'inline-block', mr: '5px' }}\n>\n  A pseudo element\n</Box>\n\n```\n\n| Prop                    | CSS Property                                                                                                                                                                               | Theme Field |\n| ----------------------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ | ----------- |\n| `_hover`                | `&:hover`<br />`&[data-hover]`                                                                                                                                                             | none        |\n| `_active`               | `&:active`<br />`&[data-active]`                                                                                                                                                           | none        |\n| `_focus`                | `&:focus`<br />`&[data-focus]`                                                                                                                                                             | none        |\n| `_highlighted`          | `&[data-highlighted]`                                                                                                                                                                      | none        |\n| `_focusWithin`          | `&:focus-within`                                                                                                                                                                           | none        |\n| `_focusVisible`         | `&:focus-visible`                                                                                                                                                                          | none        |\n| `_disabled`             | `&[disabled]`<br />`&[aria-disabled=true]`<br />`&[data-disabled]`                                                                                                                         | none        |\n| `_readOnly`             | `&[aria-readonly=true]`<br />`&[readonly]`<br />`&[data-readonly]`                                                                                                                         | none        |\n| `_before`               | `&::before`                                                                                                                                                                                | none        |\n| `_after`                | `&::after`                                                                                                                                                                                 | none        |\n| `_empty`                | `&:empty`                                                                                                                                                                                  | none        |\n| `_expanded`             | `&[aria-expanded=true]`<br />`&[data-expanded]`                                                                                                                                            | none        |\n| `_checked`              | `&[aria-checked=true]`<br />`&[data-checked]`                                                                                                                                              | none        |\n| `_grabbed`              | `&[aria-grabbed=true]`<br />`&[data-grabbed]`                                                                                                                                              | none        |\n| `_pressed`              | `&[aria-pressed=true]`<br />`&[data-pressed]`                                                                                                                                              | none        |\n| `_invalid`              | `&[aria-invalid=true]`<br />`&[data-invalid]`                                                                                                                                              | none        |\n| `_valid`                | `&[data-valid]`<br />`&[data-state=valid]`                                                                                                                                                 | none        |\n| `_loading`              | `&[data-loading]`<br />`&[aria-busy=true]`                                                                                                                                                 | none        |\n| `_selected`             | `&[aria-selected=true]`<br />`&[data-selected]`                                                                                                                                            | none        |\n| `_hidden`               | `&[hidden]`<br />`&[data-hidden]`                                                                                                                                                          | none        |\n| `_autofill`             | `&:-webkit-autofill`                                                                                                                                                                       | none        |\n| `_even`                 | `&:nth-of-type(even)`                                                                                                                                                                      | none        |\n| `_odd`                  | `&:nth-of-type(odd)`                                                                                                                                                                       | none        |\n| `_first`                | `&:first-of-type`                                                                                                                                                                          | none        |\n| `_last`                 | `&:last-of-type`                                                                                                                                                                           | none        |\n| `_notFirst`             | `&:not(:first-of-type)`                                                                                                                                                                    | none        |\n| `_notLast`              | `&:not(:last-of-type)`                                                                                                                                                                     | none        |\n| `_visited`              | `&:visited`                                                                                                                                                                                | none        |\n| `_activeLink`           | `&[aria-current=page]`                                                                                                                                                                     | none        |\n| `_activeStep`           | `&[aria-current=step]`                                                                                                                                                                     | none        |\n| `_indeterminate`        | `&:indeterminate`<br />`&[aria-checked=mixed]`<br />`&[data-indeterminate]`                                                                                                                | none        |\n| `_groupHover`           | `[role=group]:hover &`<br />`[role=group][data-hover] &`<br />`[data-group]:hover &`<br />`[data-group][data-hover] &`<br />`.group:hover &`<br />`.group[data-hover] &`                   | none        |\n| `_peerHover`            | `[data-peer]:hover ~ &`<br />`[data-peer][data-hover] ~ &`<br />`.peer:hover ~ &`<br />`.peer[data-hover] ~ &`                                                                             | none        |\n| `_groupFocus`           | `[role=group]:focus &`<br />`[role=group][data-focus] &`<br />`[data-group]:focus &`<br />`[data-group][data-focus] &`<br />`.group:focus &`<br />`.group[data-focus] &`                   | none        |\n| `_peerFocus`            | `[data-peer]:focus ~ &`<br />`[data-peer][data-focus] ~ &`<br />`.peer:focus ~ &`<br />`.peer[data-focus] ~ &`                                                                             | none        |\n| `_groupFocusVisible`    | `[role=group]:focus-visible &`<br />`[data-group]:focus-visible &`<br />`.group:focus-visible &`                                                                                           | none        |\n| `_peerFocusVisible`     | `[data-peer]:focus-visible ~ &`<br />`.peer:focus-visible ~ &`                                                                                                                             | none        |\n| `_groupActive`          | `[role=group]:active &`<br />`[role=group][data-active] &`<br />`[data-group]:active &`<br />`[data-group][data-active] &`<br />`.group:active &`<br />`.group[data-active] &`             | none        |\n| `_peerActive`           | `[data-peer]:active ~ &`<br />`[data-peer][data-active] ~ &`<br />`.peer:active ~ &`<br />`.peer[data-active] ~ &`                                                                         | none        |\n| `_groupDisabled`        | `[role=group]:disabled &`<br />`[role=group][data-disabled] &`<br />`[data-group]:disabled &`<br />`[data-group][data-disabled] &`<br />`.group:disabled &`<br />`.group[data-disabled] &` | none        |\n| `_peerDisabled`         | `[data-peer]:disabled ~ &`<br />`[data-peer][data-disabled] ~ &`<br />`.peer:disabled ~ &`<br />`.peer[data-disabled] ~ &`                                                                 | none        |\n| `_groupInvalid`         | `[role=group]:invalid &`<br />`[role=group][data-invalid] &`<br />`[data-group]:invalid &`<br />`[data-group][data-invalid] &`<br />`.group:invalid &`<br />`.group[data-invalid] &`       | none        |\n| `_peerInvalid`          | `[data-peer]:invalid ~ &`<br />`[data-peer][data-invalid] ~ &`<br />`.peer:invalid ~ &`<br />`.peer[data-invalid] ~ &`                                                                     | none        |\n| `_groupChecked`         | `[role=group]:checked &`<br />`[role=group][data-checked] &`<br />`[data-group]:checked &`<br />`[data-group][data-checked] &`<br />`.group:checked &`<br />`.group[data-checked] &`       | none        |\n| `_peerChecked`          | `[data-peer]:checked ~ &`<br />`[data-peer][data-checked] ~ &`<br />`.peer:checked ~ &`<br />`.peer[data-checked] ~ &`                                                                     | none        |\n| `_groupFocusWithin`     | `[role=group]:focus-within &`<br />`[data-group]:focus-within &`<br />`.group:focus-within &`                                                                                              | none        |\n| `_peerFocusWithin`      | `[data-peer]:focus-within ~ &`<br />`.peer:focus-within ~ &`                                                                                                                               | none        |\n| `_peerPlaceholderShown` | `[data-peer]:placeholder-shown ~ &`<br />`.peer:placeholder-shown ~ &`                                                                                                                     | none        |\n| `_placeholder`          | `&::placeholder`                                                                                                                                                                           | none        |\n| `_placeholderShown`     | `&:placeholder-shown`                                                                                                                                                                      | none        |\n| `_fullScreen`           | `&:fullscreen`                                                                                                                                                                             | none        |\n| `_selection`            | `&::selection`                                                                                                                                                                             | none        |\n| `_rtl`                  | `[dir=rtl] &`<br />`&[dir=rtl]`                                                                                                                                                            | none        |\n| `_ltr`                  | `[dir=ltr] &`<br />`&[dir=ltr]`                                                                                                                                                            | none        |\n| `_mediaDark`            | `@media (prefers-color-scheme: dark)`                                                                                                                                                      | none        |\n| `_mediaReduceMotion`    | `@media (prefers-reduced-motion: reduce)`                                                                                                                                                  | none        |\n| `_dark`                 | `.incmix-ui-dark &`<br />`[data-theme=dark] &`<br />`&[data-theme=dark]`                                                                                                                   | none        |\n| `_light`                | `.incmix-ui-light &`<br />`[data-theme=light] &`<br />`&[data-theme=light]`                                                                                                                | none        |\n\n### Other Props\n\nAsides all the common style props listed above, all component will accept the\nfollowing props:\n\n| Prop              | CSS Property       | Theme Field |\n| ----------------- | ------------------ | ----------- |\n| `animation`       | `animation`        | none        |\n| `appearance`      | `appearance`       | none        |\n| `content`         | `content`          | none        |\n| `transform`       | `transform`        | none        |\n| `transformOrigin` | `transform-origin` | none        |\n| `visibility`      | `visibility`       | none        |\n| `whiteSpace`      | `white-space`      | none        |\n| `userSelect`      | `user-select`      | none        |\n| `pointerEvents`   | `pointer-events`   | none        |\n| `wordBreak`       | `word-break`       | none        |\n| `overflowWrap`    | `overflow-wrap`    | none        |\n| `textOverflow`    | `text-overflow`    | none        |\n| `boxSizing`       | `box-sizing`       | none        |\n| `cursor`          | `cursor`           | none        |\n| `resize`          | `resize`           | none        |\n| `transition`      | `transition`       | none        |\n| `objectFit`       | `object-fit`       | none        |\n| `objectPosition`  | `object-position`  | none        |\n| `float`           | `float`            | none        |\n| `fill`            | `fill`             | `colors`    |\n| `stroke`          | `stroke`           | `colors`    |\n| `outline`         | `outline`          | none        |\n\n## The `as` prop\n\nThe `as` prop is a feature in all of our components that allows you to pass an\nHTML tag or component to be rendered.\n\nFor example, say you are using a `Button` component, and you need to make it a\nlink instead. You can compose `a` and `Button` like this:\n\n```jsx\n<Button as=\"a\" target=\"_blank\" variant=\"outline\" href=\"https://incmix-ui.com\">\n  Hello\n</Button>\n```\n\nThis allows you to use all of the `Button` props and all of the `a` props\nwithout having to wrap the Button in an `a` component.\n",
      "code": "var Component=(()=>{var s=Object.create;var i=Object.defineProperty;var p=Object.getOwnPropertyDescriptor;var b=Object.getOwnPropertyNames;var u=Object.getPrototypeOf,g=Object.prototype.hasOwnProperty;var m=(r,d)=>()=>(d||r((d={exports:{}}).exports,d),d.exports),x=(r,d)=>{for(var n in d)i(r,n,{get:d[n],enumerable:!0})},h=(r,d,n,l)=>{if(d&&typeof d==\"object\"||typeof d==\"function\")for(let c of b(d))!g.call(r,c)&&c!==n&&i(r,c,{get:()=>d[c],enumerable:!(l=p(d,c))||l.enumerable});return r};var f=(r,d,n)=>(n=r!=null?s(u(r)):{},h(d||!r||!r.__esModule?i(n,\"default\",{value:r,enumerable:!0}):n,r)),y=r=>h(i({},\"__esModule\",{value:!0}),r);var o=m((_,t)=>{t.exports=_jsx_runtime});var S={};x(S,{default:()=>v,frontmatter:()=>w});var e=f(o()),w={title:\"Style Props\",description:\"Learn how to use style props in Incmix UI. Style props are a way to alter the style of a component by simply passing props to it\",category:\"features\"};function a(r){let d=Object.assign({p:\"p\",h2:\"h2\",h3:\"h3\",pre:\"pre\",code:\"code\",table:\"table\",thead:\"thead\",tr:\"tr\",th:\"th\",tbody:\"tbody\",td:\"td\",blockquote:\"blockquote\"},r.components);return(0,e.jsxs)(e.Fragment,{children:[(0,e.jsx)(d.p,{children:`Style props are a way to alter the style of a component by simply passing props\nto it. It helps to save time by providing helpful shorthand ways to style\ncomponents.`}),`\n`,(0,e.jsx)(d.h2,{id:\"reference\",children:\"Reference\"}),`\n`,(0,e.jsx)(d.p,{children:`The following table shows a list of every style prop and the properties within\neach group.`}),`\n`,(0,e.jsx)(d.h3,{id:\"margin-and-padding\",children:\"Margin and padding\"}),`\n`,(0,e.jsx)(d.pre,{children:(0,e.jsx)(d.code,{className:\"language-jsx\",live:\"false\",children:`import { Box } from \"@incmix-ui/react\"\n\n// m={2} refers to the value of \\`theme.space[2]\\`\n<Box m={2}>Tomato</Box>\n\n// You can also use custom values\n<Box maxW=\"960px\" mx=\"auto\" />\n\n// sets margin \\`8px\\` on all viewports and \\`12px\\` from the first breakpoint and up\n<Box m={[2, 3]} />\n`})}),`\n`,(0,e.jsxs)(d.table,{children:[(0,e.jsx)(d.thead,{children:(0,e.jsxs)(d.tr,{children:[(0,e.jsx)(d.th,{children:\"Prop\"}),(0,e.jsx)(d.th,{children:\"CSS Property\"}),(0,e.jsx)(d.th,{children:\"Theme Key\"})]})}),(0,e.jsxs)(d.tbody,{children:[(0,e.jsxs)(d.tr,{children:[(0,e.jsxs)(d.td,{children:[(0,e.jsx)(d.code,{children:\"m\"}),\", \",(0,e.jsx)(d.code,{children:\"margin\"})]}),(0,e.jsx)(d.td,{children:(0,e.jsx)(d.code,{children:\"margin\"})}),(0,e.jsx)(d.td,{children:(0,e.jsx)(d.code,{children:\"space\"})})]}),(0,e.jsxs)(d.tr,{children:[(0,e.jsxs)(d.td,{children:[(0,e.jsx)(d.code,{children:\"mt\"}),\", \",(0,e.jsx)(d.code,{children:\"marginTop\"})]}),(0,e.jsx)(d.td,{children:(0,e.jsx)(d.code,{children:\"margin-top\"})}),(0,e.jsx)(d.td,{children:(0,e.jsx)(d.code,{children:\"space\"})})]}),(0,e.jsxs)(d.tr,{children:[(0,e.jsxs)(d.td,{children:[(0,e.jsx)(d.code,{children:\"mr\"}),\", \",(0,e.jsx)(d.code,{children:\"marginRight\"})]}),(0,e.jsx)(d.td,{children:(0,e.jsx)(d.code,{children:\"margin-right\"})}),(0,e.jsx)(d.td,{children:(0,e.jsx)(d.code,{children:\"space\"})})]}),(0,e.jsxs)(d.tr,{children:[(0,e.jsxs)(d.td,{children:[(0,e.jsx)(d.code,{children:\"me\"}),\", \",(0,e.jsx)(d.code,{children:\"marginEnd\"})]}),(0,e.jsx)(d.td,{children:(0,e.jsx)(d.code,{children:\"margin-inline-end\"})}),(0,e.jsx)(d.td,{children:(0,e.jsx)(d.code,{children:\"space\"})})]}),(0,e.jsxs)(d.tr,{children:[(0,e.jsxs)(d.td,{children:[(0,e.jsx)(d.code,{children:\"mb\"}),\", \",(0,e.jsx)(d.code,{children:\"marginBottom\"})]}),(0,e.jsx)(d.td,{children:(0,e.jsx)(d.code,{children:\"margin-bottom\"})}),(0,e.jsx)(d.td,{children:(0,e.jsx)(d.code,{children:\"space\"})})]}),(0,e.jsxs)(d.tr,{children:[(0,e.jsxs)(d.td,{children:[(0,e.jsx)(d.code,{children:\"ml\"}),\", \",(0,e.jsx)(d.code,{children:\"marginLeft\"})]}),(0,e.jsx)(d.td,{children:(0,e.jsx)(d.code,{children:\"margin-left\"})}),(0,e.jsx)(d.td,{children:(0,e.jsx)(d.code,{children:\"space\"})})]}),(0,e.jsxs)(d.tr,{children:[(0,e.jsxs)(d.td,{children:[(0,e.jsx)(d.code,{children:\"ms\"}),\", \",(0,e.jsx)(d.code,{children:\"marginStart\"})]}),(0,e.jsx)(d.td,{children:(0,e.jsx)(d.code,{children:\"margin-inline-start\"})}),(0,e.jsx)(d.td,{children:(0,e.jsx)(d.code,{children:\"space\"})})]}),(0,e.jsxs)(d.tr,{children:[(0,e.jsxs)(d.td,{children:[(0,e.jsx)(d.code,{children:\"mx\"}),\", \",(0,e.jsx)(d.code,{children:\"marginX\"})]}),(0,e.jsxs)(d.td,{children:[(0,e.jsx)(d.code,{children:\"margin-inline-start\"}),\" + \",(0,e.jsx)(d.code,{children:\"margin-inline-end\"})]}),(0,e.jsx)(d.td,{children:(0,e.jsx)(d.code,{children:\"space\"})})]}),(0,e.jsxs)(d.tr,{children:[(0,e.jsxs)(d.td,{children:[(0,e.jsx)(d.code,{children:\"my\"}),\", \",(0,e.jsx)(d.code,{children:\"marginY\"})]}),(0,e.jsxs)(d.td,{children:[(0,e.jsx)(d.code,{children:\"margin-top\"}),\" + \",(0,e.jsx)(d.code,{children:\"margin-bottom\"})]}),(0,e.jsx)(d.td,{children:(0,e.jsx)(d.code,{children:\"space\"})})]}),(0,e.jsxs)(d.tr,{children:[(0,e.jsxs)(d.td,{children:[(0,e.jsx)(d.code,{children:\"p\"}),\", \",(0,e.jsx)(d.code,{children:\"padding\"})]}),(0,e.jsx)(d.td,{children:(0,e.jsx)(d.code,{children:\"padding\"})}),(0,e.jsx)(d.td,{children:(0,e.jsx)(d.code,{children:\"space\"})})]}),(0,e.jsxs)(d.tr,{children:[(0,e.jsxs)(d.td,{children:[(0,e.jsx)(d.code,{children:\"pt\"}),\", \",(0,e.jsx)(d.code,{children:\"paddingTop\"})]}),(0,e.jsx)(d.td,{children:(0,e.jsx)(d.code,{children:\"padding-top\"})}),(0,e.jsx)(d.td,{children:(0,e.jsx)(d.code,{children:\"space\"})})]}),(0,e.jsxs)(d.tr,{children:[(0,e.jsxs)(d.td,{children:[(0,e.jsx)(d.code,{children:\"pr\"}),\", \",(0,e.jsx)(d.code,{children:\"paddingRight\"})]}),(0,e.jsx)(d.td,{children:(0,e.jsx)(d.code,{children:\"padding-right\"})}),(0,e.jsx)(d.td,{children:(0,e.jsx)(d.code,{children:\"space\"})})]}),(0,e.jsxs)(d.tr,{children:[(0,e.jsxs)(d.td,{children:[(0,e.jsx)(d.code,{children:\"pe\"}),\", \",(0,e.jsx)(d.code,{children:\"paddingEnd\"})]}),(0,e.jsx)(d.td,{children:(0,e.jsx)(d.code,{children:\"padding-inline-end\"})}),(0,e.jsx)(d.td,{children:(0,e.jsx)(d.code,{children:\"space\"})})]}),(0,e.jsxs)(d.tr,{children:[(0,e.jsxs)(d.td,{children:[(0,e.jsx)(d.code,{children:\"pb\"}),\", \",(0,e.jsx)(d.code,{children:\"paddingBottom\"})]}),(0,e.jsx)(d.td,{children:(0,e.jsx)(d.code,{children:\"padding-bottom\"})}),(0,e.jsx)(d.td,{children:(0,e.jsx)(d.code,{children:\"space\"})})]}),(0,e.jsxs)(d.tr,{children:[(0,e.jsxs)(d.td,{children:[(0,e.jsx)(d.code,{children:\"pl\"}),\", \",(0,e.jsx)(d.code,{children:\"paddingLeft\"})]}),(0,e.jsx)(d.td,{children:(0,e.jsx)(d.code,{children:\"padding-left\"})}),(0,e.jsx)(d.td,{children:(0,e.jsx)(d.code,{children:\"space\"})})]}),(0,e.jsxs)(d.tr,{children:[(0,e.jsxs)(d.td,{children:[(0,e.jsx)(d.code,{children:\"ps\"}),\", \",(0,e.jsx)(d.code,{children:\"paddingStart\"})]}),(0,e.jsx)(d.td,{children:(0,e.jsx)(d.code,{children:\"padding-inline-start\"})}),(0,e.jsx)(d.td,{children:(0,e.jsx)(d.code,{children:\"space\"})})]}),(0,e.jsxs)(d.tr,{children:[(0,e.jsxs)(d.td,{children:[(0,e.jsx)(d.code,{children:\"px\"}),\", \",(0,e.jsx)(d.code,{children:\"paddingX\"})]}),(0,e.jsxs)(d.td,{children:[(0,e.jsx)(d.code,{children:\"padding-inline-start\"}),\" + \",(0,e.jsx)(d.code,{children:\"padding-inline-end\"})]}),(0,e.jsx)(d.td,{children:(0,e.jsx)(d.code,{children:\"space\"})})]}),(0,e.jsxs)(d.tr,{children:[(0,e.jsxs)(d.td,{children:[(0,e.jsx)(d.code,{children:\"py\"}),\", \",(0,e.jsx)(d.code,{children:\"paddingY\"})]}),(0,e.jsxs)(d.td,{children:[(0,e.jsx)(d.code,{children:\"padding-top\"}),\" + \",(0,e.jsx)(d.code,{children:\"padding-bottom\"})]}),(0,e.jsx)(d.td,{children:(0,e.jsx)(d.code,{children:\"space\"})})]})]})]}),`\n`,(0,e.jsxs)(d.blockquote,{children:[`\n`,(0,e.jsxs)(d.p,{children:[\"For \",(0,e.jsx)(d.code,{children:\"mx\"}),\" and \",(0,e.jsx)(d.code,{children:\"px\"}),\" props, we use \",(0,e.jsx)(d.code,{children:\"margin-inline-start\"}),\" and \",(0,e.jsx)(d.code,{children:\"margin-inline-end\"}),`\nto ensure the generated styles are RTL-friendly`]}),`\n`]}),`\n`,(0,e.jsx)(d.h3,{id:\"color-and-background-color\",children:\"Color and background color\"}),`\n`,(0,e.jsx)(d.pre,{children:(0,e.jsx)(d.code,{className:\"language-jsx\",live:\"false\",children:`import { Box } from \"@incmix-ui/react\"\n\n// picks up a nested color value using dot notation\n// => \\`theme.colors.gray[50]\\`\n<Box color='gray.50' />\n\n// raw CSS color value\n<Box color='#f00' />\n\n// background colors\n<Box bg='tomato' />\n\n// verbose prop\n<Box backgroundColor='tomato' />\n`})}),`\n`,(0,e.jsxs)(d.table,{children:[(0,e.jsx)(d.thead,{children:(0,e.jsxs)(d.tr,{children:[(0,e.jsx)(d.th,{children:\"Prop\"}),(0,e.jsx)(d.th,{children:\"CSS Property\"}),(0,e.jsx)(d.th,{children:\"Theme Key\"})]})}),(0,e.jsxs)(d.tbody,{children:[(0,e.jsxs)(d.tr,{children:[(0,e.jsx)(d.td,{children:(0,e.jsx)(d.code,{children:\"color\"})}),(0,e.jsx)(d.td,{children:(0,e.jsx)(d.code,{children:\"color\"})}),(0,e.jsx)(d.td,{children:(0,e.jsx)(d.code,{children:\"colors\"})})]}),(0,e.jsxs)(d.tr,{children:[(0,e.jsxs)(d.td,{children:[(0,e.jsx)(d.code,{children:\"bg\"}),\", \",(0,e.jsx)(d.code,{children:\"background\"})]}),(0,e.jsx)(d.td,{children:(0,e.jsx)(d.code,{children:\"background\"})}),(0,e.jsx)(d.td,{children:(0,e.jsx)(d.code,{children:\"colors\"})})]}),(0,e.jsxs)(d.tr,{children:[(0,e.jsx)(d.td,{children:(0,e.jsx)(d.code,{children:\"bgColor\"})}),(0,e.jsx)(d.td,{children:(0,e.jsx)(d.code,{children:\"background-color\"})}),(0,e.jsx)(d.td,{children:(0,e.jsx)(d.code,{children:\"colors\"})})]}),(0,e.jsxs)(d.tr,{children:[(0,e.jsx)(d.td,{children:(0,e.jsx)(d.code,{children:\"opacity\"})}),(0,e.jsx)(d.td,{children:(0,e.jsx)(d.code,{children:\"opacity\"})}),(0,e.jsx)(d.td,{children:\"none\"})]})]})]}),`\n`,(0,e.jsx)(d.h3,{id:\"gradient\",children:\"Gradient\"}),`\n`,(0,e.jsx)(d.pre,{children:(0,e.jsx)(d.code,{className:\"language-jsx\",live:\"false\",children:`import { Box, Text } from \"@incmix-ui/react\"\n\n// adding linear gradient and color transitions\n<Box w=\"100%\" h=\"200px\" bgGradient=\"linear(to-t, green.200, pink.500)\" />\n\n// adding radial gradient and color transitions\n<Box w=\"100%\" h=\"200px\" bgGradient=\"radial(gray.300, yellow.400, pink.200)\" />\n\n// adding the text gradient\n<Text\n  bgGradient=\"linear(to-l, #7928CA, #FF0080)\"\n  bgClip=\"text\"\n  fontSize=\"6xl\"\n  fontWeight=\"extrabold\"\n>\n  Welcome to Incmix UI\n</Text>\n\n`})}),`\n`,(0,e.jsxs)(d.table,{children:[(0,e.jsx)(d.thead,{children:(0,e.jsxs)(d.tr,{children:[(0,e.jsx)(d.th,{children:\"Prop\"}),(0,e.jsx)(d.th,{children:\"CSS Property\"}),(0,e.jsx)(d.th,{children:\"Theme Key\"})]})}),(0,e.jsxs)(d.tbody,{children:[(0,e.jsxs)(d.tr,{children:[(0,e.jsx)(d.td,{children:(0,e.jsx)(d.code,{children:\"bgGradient\"})}),(0,e.jsx)(d.td,{children:(0,e.jsx)(d.code,{children:\"background-image\"})}),(0,e.jsx)(d.td,{children:\"none\"})]}),(0,e.jsxs)(d.tr,{children:[(0,e.jsxs)(d.td,{children:[(0,e.jsx)(d.code,{children:\"bgClip\"}),\", \",(0,e.jsx)(d.code,{children:\"backgroundClip\"})]}),(0,e.jsx)(d.td,{children:(0,e.jsx)(d.code,{children:\"background-clip\"})}),(0,e.jsx)(d.td,{children:\"none\"})]})]})]}),`\n`,(0,e.jsx)(d.h3,{id:\"typography\",children:\"Typography\"}),`\n`,(0,e.jsx)(d.pre,{children:(0,e.jsx)(d.code,{className:\"language-jsx\",live:\"false\",children:`import { Text } from \"@incmix-ui/react\"\n\n// font-size of \\`theme.fontSizes.md\\`\n<Text fontSize=\"md\" />\n\n// font-size \\`32px\\`\n<Text fontSize={32} />\n\n// font-size \\`'2em'\\`\n<Text fontSize='2em' />\n\n// text-align \\`left\\` on all viewports and \\`center\\` from the first breakpoint and up\n<Text textAlign={[ 'left', 'center' ]} />\n`})}),`\n`,(0,e.jsxs)(d.table,{children:[(0,e.jsx)(d.thead,{children:(0,e.jsxs)(d.tr,{children:[(0,e.jsx)(d.th,{children:\"Prop\"}),(0,e.jsx)(d.th,{children:\"CSS Property\"}),(0,e.jsx)(d.th,{children:\"Theme Key\"})]})}),(0,e.jsxs)(d.tbody,{children:[(0,e.jsxs)(d.tr,{children:[(0,e.jsx)(d.td,{children:(0,e.jsx)(d.code,{children:\"fontFamily\"})}),(0,e.jsx)(d.td,{children:(0,e.jsx)(d.code,{children:\"font-family\"})}),(0,e.jsx)(d.td,{children:(0,e.jsx)(d.code,{children:\"fonts\"})})]}),(0,e.jsxs)(d.tr,{children:[(0,e.jsx)(d.td,{children:(0,e.jsx)(d.code,{children:\"fontSize\"})}),(0,e.jsx)(d.td,{children:(0,e.jsx)(d.code,{children:\"font-size\"})}),(0,e.jsx)(d.td,{children:(0,e.jsx)(d.code,{children:\"fontSizes\"})})]}),(0,e.jsxs)(d.tr,{children:[(0,e.jsx)(d.td,{children:(0,e.jsx)(d.code,{children:\"fontWeight\"})}),(0,e.jsx)(d.td,{children:(0,e.jsx)(d.code,{children:\"font-weight\"})}),(0,e.jsx)(d.td,{children:(0,e.jsx)(d.code,{children:\"fontWeights\"})})]}),(0,e.jsxs)(d.tr,{children:[(0,e.jsx)(d.td,{children:(0,e.jsx)(d.code,{children:\"lineHeight\"})}),(0,e.jsx)(d.td,{children:(0,e.jsx)(d.code,{children:\"line-height\"})}),(0,e.jsx)(d.td,{children:(0,e.jsx)(d.code,{children:\"lineHeights\"})})]}),(0,e.jsxs)(d.tr,{children:[(0,e.jsx)(d.td,{children:(0,e.jsx)(d.code,{children:\"letterSpacing\"})}),(0,e.jsx)(d.td,{children:(0,e.jsx)(d.code,{children:\"letter-spacing\"})}),(0,e.jsx)(d.td,{children:(0,e.jsx)(d.code,{children:\"letterSpacings\"})})]}),(0,e.jsxs)(d.tr,{children:[(0,e.jsx)(d.td,{children:(0,e.jsx)(d.code,{children:\"textAlign\"})}),(0,e.jsx)(d.td,{children:(0,e.jsx)(d.code,{children:\"text-align\"})}),(0,e.jsx)(d.td,{children:\"none\"})]}),(0,e.jsxs)(d.tr,{children:[(0,e.jsx)(d.td,{children:(0,e.jsx)(d.code,{children:\"fontStyle\"})}),(0,e.jsx)(d.td,{children:(0,e.jsx)(d.code,{children:\"font-style\"})}),(0,e.jsx)(d.td,{children:\"none\"})]}),(0,e.jsxs)(d.tr,{children:[(0,e.jsx)(d.td,{children:(0,e.jsx)(d.code,{children:\"textTransform\"})}),(0,e.jsx)(d.td,{children:(0,e.jsx)(d.code,{children:\"text-transform\"})}),(0,e.jsx)(d.td,{children:\"none\"})]}),(0,e.jsxs)(d.tr,{children:[(0,e.jsx)(d.td,{children:(0,e.jsx)(d.code,{children:\"textDecoration\"})}),(0,e.jsx)(d.td,{children:(0,e.jsx)(d.code,{children:\"text-decoration\"})}),(0,e.jsx)(d.td,{children:\"none\"})]})]})]}),`\n`,(0,e.jsx)(d.h3,{id:\"layout-width-and-height\",children:\"Layout, width and height\"}),`\n`,(0,e.jsx)(d.pre,{children:(0,e.jsx)(d.code,{className:\"language-jsx\",live:\"false\",children:`import { Box } from \"@incmix-ui/react\"\n\n// verbose\n<Box width=\"100%\" height={32} />\n\n// shorthand\n<Box w=\"100%\" h=\"32px\" />\n\n// use theme sizing\n<Box boxSize=\"sm\" />\n\n// width \\`256px\\`\n<Box w={256} />\n\n// width \\`'40px'\\`\n<Box w='40px' />\n\n`})}),`\n`,(0,e.jsxs)(d.table,{children:[(0,e.jsx)(d.thead,{children:(0,e.jsxs)(d.tr,{children:[(0,e.jsx)(d.th,{children:\"Prop\"}),(0,e.jsx)(d.th,{children:\"CSS Property\"}),(0,e.jsx)(d.th,{children:\"Theme Key\"})]})}),(0,e.jsxs)(d.tbody,{children:[(0,e.jsxs)(d.tr,{children:[(0,e.jsxs)(d.td,{children:[(0,e.jsx)(d.code,{children:\"w\"}),\", \",(0,e.jsx)(d.code,{children:\"width\"})]}),(0,e.jsx)(d.td,{children:(0,e.jsx)(d.code,{children:\"width\"})}),(0,e.jsx)(d.td,{children:(0,e.jsx)(d.code,{children:\"sizes\"})})]}),(0,e.jsxs)(d.tr,{children:[(0,e.jsxs)(d.td,{children:[(0,e.jsx)(d.code,{children:\"h\"}),\", \",(0,e.jsx)(d.code,{children:\"height\"})]}),(0,e.jsx)(d.td,{children:(0,e.jsx)(d.code,{children:\"height\"})}),(0,e.jsx)(d.td,{children:(0,e.jsx)(d.code,{children:\"sizes\"})})]}),(0,e.jsxs)(d.tr,{children:[(0,e.jsxs)(d.td,{children:[(0,e.jsx)(d.code,{children:\"minW\"}),\", \",(0,e.jsx)(d.code,{children:\"minWidth\"})]}),(0,e.jsx)(d.td,{children:(0,e.jsx)(d.code,{children:\"min-width\"})}),(0,e.jsx)(d.td,{children:(0,e.jsx)(d.code,{children:\"sizes\"})})]}),(0,e.jsxs)(d.tr,{children:[(0,e.jsxs)(d.td,{children:[(0,e.jsx)(d.code,{children:\"maxW\"}),\", \",(0,e.jsx)(d.code,{children:\"maxWidth\"})]}),(0,e.jsx)(d.td,{children:(0,e.jsx)(d.code,{children:\"max-width\"})}),(0,e.jsx)(d.td,{children:(0,e.jsx)(d.code,{children:\"sizes\"})})]}),(0,e.jsxs)(d.tr,{children:[(0,e.jsxs)(d.td,{children:[(0,e.jsx)(d.code,{children:\"minH\"}),\", \",(0,e.jsx)(d.code,{children:\"minHeight\"})]}),(0,e.jsx)(d.td,{children:(0,e.jsx)(d.code,{children:\"min-height\"})}),(0,e.jsx)(d.td,{children:(0,e.jsx)(d.code,{children:\"sizes\"})})]}),(0,e.jsxs)(d.tr,{children:[(0,e.jsxs)(d.td,{children:[(0,e.jsx)(d.code,{children:\"maxH\"}),\", \",(0,e.jsx)(d.code,{children:\"maxHeight\"})]}),(0,e.jsx)(d.td,{children:(0,e.jsx)(d.code,{children:\"max-height\"})}),(0,e.jsx)(d.td,{children:(0,e.jsx)(d.code,{children:\"sizes\"})})]}),(0,e.jsxs)(d.tr,{children:[(0,e.jsx)(d.td,{children:(0,e.jsx)(d.code,{children:\"display\"})}),(0,e.jsx)(d.td,{children:(0,e.jsx)(d.code,{children:\"display\"})}),(0,e.jsx)(d.td,{children:\"none\"})]}),(0,e.jsxs)(d.tr,{children:[(0,e.jsx)(d.td,{children:(0,e.jsx)(d.code,{children:\"boxSize\"})}),(0,e.jsxs)(d.td,{children:[(0,e.jsx)(d.code,{children:\"width\"}),\", \",(0,e.jsx)(d.code,{children:\"height\"})]}),(0,e.jsx)(d.td,{children:(0,e.jsx)(d.code,{children:\"sizes\"})})]}),(0,e.jsxs)(d.tr,{children:[(0,e.jsx)(d.td,{children:(0,e.jsx)(d.code,{children:\"verticalAlign\"})}),(0,e.jsx)(d.td,{children:(0,e.jsx)(d.code,{children:\"vertical-align\"})}),(0,e.jsx)(d.td,{children:\"none\"})]}),(0,e.jsxs)(d.tr,{children:[(0,e.jsx)(d.td,{children:(0,e.jsx)(d.code,{children:\"overflow\"})}),(0,e.jsx)(d.td,{children:(0,e.jsx)(d.code,{children:\"overflow\"})}),(0,e.jsx)(d.td,{children:\"none\"})]}),(0,e.jsxs)(d.tr,{children:[(0,e.jsx)(d.td,{children:(0,e.jsx)(d.code,{children:\"overflowX\"})}),(0,e.jsx)(d.td,{children:(0,e.jsx)(d.code,{children:\"overflow-x\"})}),(0,e.jsx)(d.td,{children:\"none\"})]}),(0,e.jsxs)(d.tr,{children:[(0,e.jsx)(d.td,{children:(0,e.jsx)(d.code,{children:\"overflowY\"})}),(0,e.jsx)(d.td,{children:(0,e.jsx)(d.code,{children:\"overflow-y\"})}),(0,e.jsx)(d.td,{children:\"none\"})]})]})]}),`\n`,(0,e.jsx)(d.h3,{id:\"flexbox\",children:\"Flexbox\"}),`\n`,(0,e.jsx)(d.pre,{children:(0,e.jsx)(d.code,{className:\"language-jsx\",live:\"false\",children:`import { Box, Flex } from \"@incmix-ui/react\"\n\n// verbose\n<Box display=\"flex\" alignItems=\"center\" justifyContent=\"space-between\">\n  Box with Flex props\n</Box>\n\n// shorthand using the \\`Flex\\` component\n<Flex align=\"center\" justify=\"center\">\n  Flex Container\n</Flex>\n`})}),`\n`,(0,e.jsxs)(d.blockquote,{children:[`\n`,(0,e.jsxs)(d.p,{children:[\"Note: Props in \",(0,e.jsx)(d.code,{children:\"*\"}),\" will only work if you use the \",(0,e.jsx)(d.code,{children:\"Flex\"}),\" component.\"]}),`\n`]}),`\n`,(0,e.jsxs)(d.table,{children:[(0,e.jsx)(d.thead,{children:(0,e.jsxs)(d.tr,{children:[(0,e.jsx)(d.th,{children:\"Prop\"}),(0,e.jsx)(d.th,{children:\"CSS Property\"}),(0,e.jsx)(d.th,{children:\"Theme Key\"})]})}),(0,e.jsxs)(d.tbody,{children:[(0,e.jsxs)(d.tr,{children:[(0,e.jsx)(d.td,{children:(0,e.jsx)(d.code,{children:\"gap\"})}),(0,e.jsx)(d.td,{children:(0,e.jsx)(d.code,{children:\"gap\"})}),(0,e.jsx)(d.td,{children:(0,e.jsx)(d.code,{children:\"space\"})})]}),(0,e.jsxs)(d.tr,{children:[(0,e.jsx)(d.td,{children:(0,e.jsx)(d.code,{children:\"rowGap\"})}),(0,e.jsx)(d.td,{children:(0,e.jsx)(d.code,{children:\"row-gap\"})}),(0,e.jsx)(d.td,{children:(0,e.jsx)(d.code,{children:\"space\"})})]}),(0,e.jsxs)(d.tr,{children:[(0,e.jsx)(d.td,{children:(0,e.jsx)(d.code,{children:\"columnGap\"})}),(0,e.jsx)(d.td,{children:(0,e.jsx)(d.code,{children:\"column-gap\"})}),(0,e.jsx)(d.td,{children:(0,e.jsx)(d.code,{children:\"space\"})})]}),(0,e.jsxs)(d.tr,{children:[(0,e.jsxs)(d.td,{children:[(0,e.jsx)(d.code,{children:\"alignItems\"}),\", *\",(0,e.jsx)(d.code,{children:\"align\"})]}),(0,e.jsx)(d.td,{children:(0,e.jsx)(d.code,{children:\"align-items\"})}),(0,e.jsx)(d.td,{children:\"none\"})]}),(0,e.jsxs)(d.tr,{children:[(0,e.jsx)(d.td,{children:(0,e.jsx)(d.code,{children:\"alignContent\"})}),(0,e.jsx)(d.td,{children:(0,e.jsx)(d.code,{children:\"align-content\"})}),(0,e.jsx)(d.td,{children:\"none\"})]}),(0,e.jsxs)(d.tr,{children:[(0,e.jsx)(d.td,{children:(0,e.jsx)(d.code,{children:\"justifyItems\"})}),(0,e.jsx)(d.td,{children:(0,e.jsx)(d.code,{children:\"justify-items\"})}),(0,e.jsx)(d.td,{children:\"none\"})]}),(0,e.jsxs)(d.tr,{children:[(0,e.jsxs)(d.td,{children:[(0,e.jsx)(d.code,{children:\"justifyContent\"}),\", *\",(0,e.jsx)(d.code,{children:\"justify\"})]}),(0,e.jsx)(d.td,{children:(0,e.jsx)(d.code,{children:\"justify-content\"})}),(0,e.jsx)(d.td,{children:\"none\"})]}),(0,e.jsxs)(d.tr,{children:[(0,e.jsxs)(d.td,{children:[(0,e.jsx)(d.code,{children:\"flexWrap\"}),\", *\",(0,e.jsx)(d.code,{children:\"wrap\"})]}),(0,e.jsx)(d.td,{children:(0,e.jsx)(d.code,{children:\"flex-wrap\"})}),(0,e.jsx)(d.td,{children:\"none\"})]}),(0,e.jsxs)(d.tr,{children:[(0,e.jsxs)(d.td,{children:[(0,e.jsx)(d.code,{children:\"flexDirection\"}),\", \",(0,e.jsx)(d.code,{children:\"flexDir\"}),\", *\",(0,e.jsx)(d.code,{children:\"direction\"})]}),(0,e.jsx)(d.td,{children:(0,e.jsx)(d.code,{children:\"flex-direction\"})}),(0,e.jsx)(d.td,{children:\"none\"})]}),(0,e.jsxs)(d.tr,{children:[(0,e.jsx)(d.td,{children:(0,e.jsx)(d.code,{children:\"flex\"})}),(0,e.jsx)(d.td,{children:(0,e.jsx)(d.code,{children:\"flex\"})}),(0,e.jsx)(d.td,{children:\"none\"})]}),(0,e.jsxs)(d.tr,{children:[(0,e.jsx)(d.td,{children:(0,e.jsx)(d.code,{children:\"flexGrow\"})}),(0,e.jsx)(d.td,{children:(0,e.jsx)(d.code,{children:\"flex-grow\"})}),(0,e.jsx)(d.td,{children:\"none\"})]}),(0,e.jsxs)(d.tr,{children:[(0,e.jsx)(d.td,{children:(0,e.jsx)(d.code,{children:\"flexShrink\"})}),(0,e.jsx)(d.td,{children:(0,e.jsx)(d.code,{children:\"flex-shrink\"})}),(0,e.jsx)(d.td,{children:\"none\"})]}),(0,e.jsxs)(d.tr,{children:[(0,e.jsx)(d.td,{children:(0,e.jsx)(d.code,{children:\"flexBasis\"})}),(0,e.jsx)(d.td,{children:(0,e.jsx)(d.code,{children:\"flex-basis\"})}),(0,e.jsx)(d.td,{children:\"none\"})]}),(0,e.jsxs)(d.tr,{children:[(0,e.jsx)(d.td,{children:(0,e.jsx)(d.code,{children:\"justifySelf\"})}),(0,e.jsx)(d.td,{children:(0,e.jsx)(d.code,{children:\"justify-self\"})}),(0,e.jsx)(d.td,{children:\"none\"})]}),(0,e.jsxs)(d.tr,{children:[(0,e.jsx)(d.td,{children:(0,e.jsx)(d.code,{children:\"alignSelf\"})}),(0,e.jsx)(d.td,{children:(0,e.jsx)(d.code,{children:\"align-self\"})}),(0,e.jsx)(d.td,{children:\"none\"})]}),(0,e.jsxs)(d.tr,{children:[(0,e.jsx)(d.td,{children:(0,e.jsx)(d.code,{children:\"order\"})}),(0,e.jsx)(d.td,{children:(0,e.jsx)(d.code,{children:\"order\"})}),(0,e.jsx)(d.td,{children:\"none\"})]})]})]}),`\n`,(0,e.jsx)(d.h3,{id:\"grid-layout\",children:\"Grid Layout\"}),`\n`,(0,e.jsx)(d.pre,{children:(0,e.jsx)(d.code,{className:\"language-jsx\",live:\"false\",children:`import { Box, Grid } from \"@incmix-ui/react\"\n\n// verbose\n<Box display=\"grid\" gridGap={2} gridAutoFlow=\"row dense\">\n  Grid\n</Box>\n\n// shorthand using the \\`Grid\\` component\n<Grid gap={2} autoFlow=\"row dense\">\n  Grid\n</Grid>\n`})}),`\n`,(0,e.jsxs)(d.blockquote,{children:[`\n`,(0,e.jsxs)(d.p,{children:[\"Note: Props in \",(0,e.jsx)(d.code,{children:\"*\"}),\" will only work if you use the \",(0,e.jsx)(d.code,{children:\"Grid\"}),\" component.\"]}),`\n`]}),`\n`,(0,e.jsxs)(d.table,{children:[(0,e.jsx)(d.thead,{children:(0,e.jsxs)(d.tr,{children:[(0,e.jsx)(d.th,{children:\"Prop\"}),(0,e.jsx)(d.th,{children:\"CSS Property\"}),(0,e.jsx)(d.th,{children:\"Theme Key\"})]})}),(0,e.jsxs)(d.tbody,{children:[(0,e.jsxs)(d.tr,{children:[(0,e.jsxs)(d.td,{children:[(0,e.jsx)(d.code,{children:\"gridGap\"}),\", *\",(0,e.jsx)(d.code,{children:\"gap\"})]}),(0,e.jsx)(d.td,{children:(0,e.jsx)(d.code,{children:\"grid-gap\"})}),(0,e.jsx)(d.td,{children:(0,e.jsx)(d.code,{children:\"space\"})})]}),(0,e.jsxs)(d.tr,{children:[(0,e.jsxs)(d.td,{children:[(0,e.jsx)(d.code,{children:\"gridRowGap\"}),\", *\",(0,e.jsx)(d.code,{children:\"rowGap\"})]}),(0,e.jsx)(d.td,{children:(0,e.jsx)(d.code,{children:\"grid-row-gap\"})}),(0,e.jsx)(d.td,{children:(0,e.jsx)(d.code,{children:\"space\"})})]}),(0,e.jsxs)(d.tr,{children:[(0,e.jsxs)(d.td,{children:[(0,e.jsx)(d.code,{children:\"gridColumnGap\"}),\", *\",(0,e.jsx)(d.code,{children:\"columnGap\"})]}),(0,e.jsx)(d.td,{children:(0,e.jsx)(d.code,{children:\"grid-column-gap\"})}),(0,e.jsx)(d.td,{children:(0,e.jsx)(d.code,{children:\"space\"})})]}),(0,e.jsxs)(d.tr,{children:[(0,e.jsxs)(d.td,{children:[(0,e.jsx)(d.code,{children:\"gridColumn\"}),\", *\",(0,e.jsx)(d.code,{children:\"column\"})]}),(0,e.jsx)(d.td,{children:(0,e.jsx)(d.code,{children:\"grid-column\"})}),(0,e.jsx)(d.td,{children:\"none\"})]}),(0,e.jsxs)(d.tr,{children:[(0,e.jsxs)(d.td,{children:[(0,e.jsx)(d.code,{children:\"gridRow\"}),\", *\",(0,e.jsx)(d.code,{children:\"row\"})]}),(0,e.jsx)(d.td,{children:(0,e.jsx)(d.code,{children:\"grid-row\"})}),(0,e.jsx)(d.td,{children:\"none\"})]}),(0,e.jsxs)(d.tr,{children:[(0,e.jsxs)(d.td,{children:[(0,e.jsx)(d.code,{children:\"gridArea\"}),\", *\",(0,e.jsx)(d.code,{children:\"area\"})]}),(0,e.jsx)(d.td,{children:(0,e.jsx)(d.code,{children:\"grid-area\"})}),(0,e.jsx)(d.td,{children:\"none\"})]}),(0,e.jsxs)(d.tr,{children:[(0,e.jsxs)(d.td,{children:[(0,e.jsx)(d.code,{children:\"gridAutoFlow\"}),\", *\",(0,e.jsx)(d.code,{children:\"autoFlow\"})]}),(0,e.jsx)(d.td,{children:(0,e.jsx)(d.code,{children:\"grid-auto-flow\"})}),(0,e.jsx)(d.td,{children:\"none\"})]}),(0,e.jsxs)(d.tr,{children:[(0,e.jsxs)(d.td,{children:[(0,e.jsx)(d.code,{children:\"gridAutoRows\"}),\", *\",(0,e.jsx)(d.code,{children:\"autoRows\"})]}),(0,e.jsx)(d.td,{children:(0,e.jsx)(d.code,{children:\"grid-auto-rows\"})}),(0,e.jsx)(d.td,{children:\"none\"})]}),(0,e.jsxs)(d.tr,{children:[(0,e.jsxs)(d.td,{children:[(0,e.jsx)(d.code,{children:\"gridAutoColumns\"}),\", *\",(0,e.jsx)(d.code,{children:\"autoColumns\"})]}),(0,e.jsx)(d.td,{children:(0,e.jsx)(d.code,{children:\"grid-auto-columns\"})}),(0,e.jsx)(d.td,{children:\"none\"})]}),(0,e.jsxs)(d.tr,{children:[(0,e.jsxs)(d.td,{children:[(0,e.jsx)(d.code,{children:\"gridTemplateRows\"}),\", *\",(0,e.jsx)(d.code,{children:\"templateRows\"})]}),(0,e.jsx)(d.td,{children:(0,e.jsx)(d.code,{children:\"grid-template-rows\"})}),(0,e.jsx)(d.td,{children:\"none\"})]}),(0,e.jsxs)(d.tr,{children:[(0,e.jsxs)(d.td,{children:[(0,e.jsx)(d.code,{children:\"gridTemplateColumns\"}),\", *\",(0,e.jsx)(d.code,{children:\"templateColumns\"})]}),(0,e.jsx)(d.td,{children:(0,e.jsx)(d.code,{children:\"grid-template-columns\"})}),(0,e.jsx)(d.td,{children:\"none\"})]}),(0,e.jsxs)(d.tr,{children:[(0,e.jsxs)(d.td,{children:[(0,e.jsx)(d.code,{children:\"gridTemplateAreas\"}),\", *\",(0,e.jsx)(d.code,{children:\"templateAreas\"})]}),(0,e.jsx)(d.td,{children:(0,e.jsx)(d.code,{children:\"grid-template-areas\"})}),(0,e.jsx)(d.td,{children:\"none\"})]})]})]}),`\n`,(0,e.jsx)(d.h3,{id:\"background\",children:\"Background\"}),`\n`,(0,e.jsx)(d.pre,{children:(0,e.jsx)(d.code,{className:\"language-jsx\",live:\"false\",children:`import { Box } from \"@incmix-ui/react\"\n\n// verbose\n<Box\n  backgroundImage=\"url('/images/kyuubi.png')\"\n  backgroundPosition=\"center\"\n  backgroundRepeat=\"no-repeat\"\n/>\n\n// shorthand\n<Box\n  bgImage=\"url('/images/gaara.png')\"\n  bgPosition=\"center\"\n  bgRepeat=\"no-repeat\"\n/>\n`})}),`\n`,(0,e.jsxs)(d.table,{children:[(0,e.jsx)(d.thead,{children:(0,e.jsxs)(d.tr,{children:[(0,e.jsx)(d.th,{children:\"Prop\"}),(0,e.jsx)(d.th,{children:\"CSS Property\"}),(0,e.jsx)(d.th,{children:\"Theme Key\"})]})}),(0,e.jsxs)(d.tbody,{children:[(0,e.jsxs)(d.tr,{children:[(0,e.jsxs)(d.td,{children:[(0,e.jsx)(d.code,{children:\"bg\"}),\", \",(0,e.jsx)(d.code,{children:\"background\"})]}),(0,e.jsx)(d.td,{children:(0,e.jsx)(d.code,{children:\"background\"})}),(0,e.jsx)(d.td,{children:\"none\"})]}),(0,e.jsxs)(d.tr,{children:[(0,e.jsxs)(d.td,{children:[(0,e.jsx)(d.code,{children:\"bgImage\"}),\", \",(0,e.jsx)(d.code,{children:\"backgroundImage\"})]}),(0,e.jsx)(d.td,{children:(0,e.jsx)(d.code,{children:\"background-image\"})}),(0,e.jsx)(d.td,{children:\"none\"})]}),(0,e.jsxs)(d.tr,{children:[(0,e.jsxs)(d.td,{children:[(0,e.jsx)(d.code,{children:\"bgSize\"}),\", \",(0,e.jsx)(d.code,{children:\"backgroundSize\"})]}),(0,e.jsx)(d.td,{children:(0,e.jsx)(d.code,{children:\"background-size\"})}),(0,e.jsx)(d.td,{children:\"none\"})]}),(0,e.jsxs)(d.tr,{children:[(0,e.jsxs)(d.td,{children:[(0,e.jsx)(d.code,{children:\"bgPosition\"}),\",\",(0,e.jsx)(d.code,{children:\"backgroundPosition\"})]}),(0,e.jsx)(d.td,{children:(0,e.jsx)(d.code,{children:\"background-position\"})}),(0,e.jsx)(d.td,{children:\"none\"})]}),(0,e.jsxs)(d.tr,{children:[(0,e.jsxs)(d.td,{children:[(0,e.jsx)(d.code,{children:\"bgRepeat\"}),\",\",(0,e.jsx)(d.code,{children:\"backgroundRepeat\"})]}),(0,e.jsx)(d.td,{children:(0,e.jsx)(d.code,{children:\"background-repeat\"})}),(0,e.jsx)(d.td,{children:\"none\"})]}),(0,e.jsxs)(d.tr,{children:[(0,e.jsxs)(d.td,{children:[(0,e.jsx)(d.code,{children:\"bgAttachment\"}),\",\",(0,e.jsx)(d.code,{children:\"backgroundAttachment\"})]}),(0,e.jsx)(d.td,{children:(0,e.jsx)(d.code,{children:\"background-attachment\"})}),(0,e.jsx)(d.td,{children:\"none\"})]})]})]}),`\n`,(0,e.jsx)(d.h3,{id:\"borders\",children:\"Borders\"}),`\n`,(0,e.jsx)(d.pre,{children:(0,e.jsx)(d.code,{className:\"language-jsx\",live:\"false\",children:`<Box border=\"1px\" borderColor=\"gray.200\">\n  Card\n</Box>\n`})}),`\n`,(0,e.jsxs)(d.table,{children:[(0,e.jsx)(d.thead,{children:(0,e.jsxs)(d.tr,{children:[(0,e.jsx)(d.th,{children:\"Prop\"}),(0,e.jsx)(d.th,{children:\"CSS Property\"}),(0,e.jsx)(d.th,{children:\"Theme Field\"})]})}),(0,e.jsxs)(d.tbody,{children:[(0,e.jsxs)(d.tr,{children:[(0,e.jsx)(d.td,{children:(0,e.jsx)(d.code,{children:\"border\"})}),(0,e.jsx)(d.td,{children:(0,e.jsx)(d.code,{children:\"border\"})}),(0,e.jsx)(d.td,{children:(0,e.jsx)(d.code,{children:\"borders\"})})]}),(0,e.jsxs)(d.tr,{children:[(0,e.jsx)(d.td,{children:(0,e.jsx)(d.code,{children:\"borderWidth\"})}),(0,e.jsx)(d.td,{children:(0,e.jsx)(d.code,{children:\"border-width\"})}),(0,e.jsx)(d.td,{children:(0,e.jsx)(d.code,{children:\"borderWidths\"})})]}),(0,e.jsxs)(d.tr,{children:[(0,e.jsx)(d.td,{children:(0,e.jsx)(d.code,{children:\"borderStyle\"})}),(0,e.jsx)(d.td,{children:(0,e.jsx)(d.code,{children:\"border-style\"})}),(0,e.jsx)(d.td,{children:(0,e.jsx)(d.code,{children:\"borderStyles\"})})]}),(0,e.jsxs)(d.tr,{children:[(0,e.jsx)(d.td,{children:(0,e.jsx)(d.code,{children:\"borderColor\"})}),(0,e.jsx)(d.td,{children:(0,e.jsx)(d.code,{children:\"border-color\"})}),(0,e.jsx)(d.td,{children:(0,e.jsx)(d.code,{children:\"colors\"})})]}),(0,e.jsxs)(d.tr,{children:[(0,e.jsx)(d.td,{children:(0,e.jsx)(d.code,{children:\"borderTop\"})}),(0,e.jsx)(d.td,{children:(0,e.jsx)(d.code,{children:\"border-top\"})}),(0,e.jsx)(d.td,{children:(0,e.jsx)(d.code,{children:\"borders\"})})]}),(0,e.jsxs)(d.tr,{children:[(0,e.jsx)(d.td,{children:(0,e.jsx)(d.code,{children:\"borderTopWidth\"})}),(0,e.jsx)(d.td,{children:(0,e.jsx)(d.code,{children:\"border-top-width\"})}),(0,e.jsx)(d.td,{children:(0,e.jsx)(d.code,{children:\"borderWidths\"})})]}),(0,e.jsxs)(d.tr,{children:[(0,e.jsx)(d.td,{children:(0,e.jsx)(d.code,{children:\"borderTopStyle\"})}),(0,e.jsx)(d.td,{children:(0,e.jsx)(d.code,{children:\"border-top-style\"})}),(0,e.jsx)(d.td,{children:(0,e.jsx)(d.code,{children:\"borderStyles\"})})]}),(0,e.jsxs)(d.tr,{children:[(0,e.jsx)(d.td,{children:(0,e.jsx)(d.code,{children:\"borderTopColor\"})}),(0,e.jsx)(d.td,{children:(0,e.jsx)(d.code,{children:\"border-top-color\"})}),(0,e.jsx)(d.td,{children:(0,e.jsx)(d.code,{children:\"colors\"})})]}),(0,e.jsxs)(d.tr,{children:[(0,e.jsx)(d.td,{children:(0,e.jsx)(d.code,{children:\"borderRight\"})}),(0,e.jsx)(d.td,{children:(0,e.jsx)(d.code,{children:\"border-right\"})}),(0,e.jsx)(d.td,{children:(0,e.jsx)(d.code,{children:\"borders\"})})]}),(0,e.jsxs)(d.tr,{children:[(0,e.jsx)(d.td,{children:(0,e.jsx)(d.code,{children:\"borderEnd\"})}),(0,e.jsx)(d.td,{children:(0,e.jsx)(d.code,{children:\"border-inline-end\"})}),(0,e.jsx)(d.td,{children:(0,e.jsx)(d.code,{children:\"borders\"})})]}),(0,e.jsxs)(d.tr,{children:[(0,e.jsx)(d.td,{children:(0,e.jsx)(d.code,{children:\"borderRightWidth\"})}),(0,e.jsx)(d.td,{children:(0,e.jsx)(d.code,{children:\"border-right-width\"})}),(0,e.jsx)(d.td,{children:(0,e.jsx)(d.code,{children:\"borderWidths\"})})]}),(0,e.jsxs)(d.tr,{children:[(0,e.jsx)(d.td,{children:(0,e.jsx)(d.code,{children:\"borderEndWidth\"})}),(0,e.jsx)(d.td,{children:(0,e.jsx)(d.code,{children:\"border-inline-end-width\"})}),(0,e.jsx)(d.td,{children:(0,e.jsx)(d.code,{children:\"borderWidths\"})})]}),(0,e.jsxs)(d.tr,{children:[(0,e.jsx)(d.td,{children:(0,e.jsx)(d.code,{children:\"borderRightStyle\"})}),(0,e.jsx)(d.td,{children:(0,e.jsx)(d.code,{children:\"border-right-style\"})}),(0,e.jsx)(d.td,{children:(0,e.jsx)(d.code,{children:\"borderStyles\"})})]}),(0,e.jsxs)(d.tr,{children:[(0,e.jsx)(d.td,{children:(0,e.jsx)(d.code,{children:\"borderEndStyle\"})}),(0,e.jsx)(d.td,{children:(0,e.jsx)(d.code,{children:\"border-inline-end-style\"})}),(0,e.jsx)(d.td,{children:(0,e.jsx)(d.code,{children:\"borderStyles\"})})]}),(0,e.jsxs)(d.tr,{children:[(0,e.jsx)(d.td,{children:(0,e.jsx)(d.code,{children:\"borderRightColor\"})}),(0,e.jsx)(d.td,{children:(0,e.jsx)(d.code,{children:\"border-right-color\"})}),(0,e.jsx)(d.td,{children:(0,e.jsx)(d.code,{children:\"colors\"})})]}),(0,e.jsxs)(d.tr,{children:[(0,e.jsx)(d.td,{children:(0,e.jsx)(d.code,{children:\"borderEndColor\"})}),(0,e.jsx)(d.td,{children:(0,e.jsx)(d.code,{children:\"border-inline-end-color\"})}),(0,e.jsx)(d.td,{children:(0,e.jsx)(d.code,{children:\"colors\"})})]}),(0,e.jsxs)(d.tr,{children:[(0,e.jsx)(d.td,{children:(0,e.jsx)(d.code,{children:\"borderBottom\"})}),(0,e.jsx)(d.td,{children:(0,e.jsx)(d.code,{children:\"border-bottom\"})}),(0,e.jsx)(d.td,{children:(0,e.jsx)(d.code,{children:\"borders\"})})]}),(0,e.jsxs)(d.tr,{children:[(0,e.jsx)(d.td,{children:(0,e.jsx)(d.code,{children:\"borderBottomWidth\"})}),(0,e.jsx)(d.td,{children:(0,e.jsx)(d.code,{children:\"border-bottom-width\"})}),(0,e.jsx)(d.td,{children:(0,e.jsx)(d.code,{children:\"borderWidths\"})})]}),(0,e.jsxs)(d.tr,{children:[(0,e.jsx)(d.td,{children:(0,e.jsx)(d.code,{children:\"borderBottomStyle\"})}),(0,e.jsx)(d.td,{children:(0,e.jsx)(d.code,{children:\"border-bottom-style\"})}),(0,e.jsx)(d.td,{children:(0,e.jsx)(d.code,{children:\"borderStyles\"})})]}),(0,e.jsxs)(d.tr,{children:[(0,e.jsx)(d.td,{children:(0,e.jsx)(d.code,{children:\"borderBottomColor\"})}),(0,e.jsx)(d.td,{children:(0,e.jsx)(d.code,{children:\"border-bottom-color\"})}),(0,e.jsx)(d.td,{children:(0,e.jsx)(d.code,{children:\"colors\"})})]}),(0,e.jsxs)(d.tr,{children:[(0,e.jsx)(d.td,{children:(0,e.jsx)(d.code,{children:\"borderLeft\"})}),(0,e.jsx)(d.td,{children:(0,e.jsx)(d.code,{children:\"border-left\"})}),(0,e.jsx)(d.td,{children:(0,e.jsx)(d.code,{children:\"borders\"})})]}),(0,e.jsxs)(d.tr,{children:[(0,e.jsx)(d.td,{children:(0,e.jsx)(d.code,{children:\"borderStart\"})}),(0,e.jsx)(d.td,{children:(0,e.jsx)(d.code,{children:\"border-inline-start\"})}),(0,e.jsx)(d.td,{children:(0,e.jsx)(d.code,{children:\"borders\"})})]}),(0,e.jsxs)(d.tr,{children:[(0,e.jsx)(d.td,{children:(0,e.jsx)(d.code,{children:\"borderLeftWidth\"})}),(0,e.jsx)(d.td,{children:(0,e.jsx)(d.code,{children:\"border-left-width\"})}),(0,e.jsx)(d.td,{children:(0,e.jsx)(d.code,{children:\"borderWidths\"})})]}),(0,e.jsxs)(d.tr,{children:[(0,e.jsx)(d.td,{children:(0,e.jsx)(d.code,{children:\"borderStartWidth\"})}),(0,e.jsx)(d.td,{children:(0,e.jsx)(d.code,{children:\"border-inline-start-width\"})}),(0,e.jsx)(d.td,{children:(0,e.jsx)(d.code,{children:\"borderWidths\"})})]}),(0,e.jsxs)(d.tr,{children:[(0,e.jsx)(d.td,{children:(0,e.jsx)(d.code,{children:\"borderLeftStyle\"})}),(0,e.jsx)(d.td,{children:(0,e.jsx)(d.code,{children:\"border-left-style\"})}),(0,e.jsx)(d.td,{children:(0,e.jsx)(d.code,{children:\"borderStyles\"})})]}),(0,e.jsxs)(d.tr,{children:[(0,e.jsx)(d.td,{children:(0,e.jsx)(d.code,{children:\"borderStartStyle\"})}),(0,e.jsx)(d.td,{children:(0,e.jsx)(d.code,{children:\"border-inline-start-style\"})}),(0,e.jsx)(d.td,{children:(0,e.jsx)(d.code,{children:\"borderStyles\"})})]}),(0,e.jsxs)(d.tr,{children:[(0,e.jsx)(d.td,{children:(0,e.jsx)(d.code,{children:\"borderLeftColor\"})}),(0,e.jsx)(d.td,{children:(0,e.jsx)(d.code,{children:\"border-left-color\"})}),(0,e.jsx)(d.td,{children:(0,e.jsx)(d.code,{children:\"colors\"})})]}),(0,e.jsxs)(d.tr,{children:[(0,e.jsx)(d.td,{children:(0,e.jsx)(d.code,{children:\"borderStartColor\"})}),(0,e.jsx)(d.td,{children:(0,e.jsx)(d.code,{children:\"border-inline-start-color\"})}),(0,e.jsx)(d.td,{children:(0,e.jsx)(d.code,{children:\"colors\"})})]}),(0,e.jsxs)(d.tr,{children:[(0,e.jsx)(d.td,{children:(0,e.jsx)(d.code,{children:\"borderX\"})}),(0,e.jsxs)(d.td,{children:[(0,e.jsx)(d.code,{children:\"border-left\"}),\" , \",(0,e.jsx)(d.code,{children:\"border-right\"})]}),(0,e.jsx)(d.td,{children:(0,e.jsx)(d.code,{children:\"borders\"})})]}),(0,e.jsxs)(d.tr,{children:[(0,e.jsx)(d.td,{children:(0,e.jsx)(d.code,{children:\"borderY\"})}),(0,e.jsxs)(d.td,{children:[(0,e.jsx)(d.code,{children:\"border-top\"}),\" , \",(0,e.jsx)(d.code,{children:\"border-bottom\"})]}),(0,e.jsx)(d.td,{children:(0,e.jsx)(d.code,{children:\"borders\"})})]})]})]}),`\n`,(0,e.jsx)(d.h3,{id:\"border-radius\",children:\"Border Radius\"}),`\n`,(0,e.jsx)(d.pre,{children:(0,e.jsx)(d.code,{className:\"language-jsx\",live:\"false\",children:`import { Button } from \"@incmix-ui/react\"\n\n// This button will have no right borderRadius\n<Button borderRightRadius=\"0\">Button 1</Button>\n\n// This button will have no left borderRadius*/\n<Button borderLeftRadius=\"0\">Button 2</Button>\n\n// top left and top right radius will be \\`theme.radii.md\\` => 4px\n<Button borderTopRadius=\"md\">Button 2</Button>\n`})}),`\n`,(0,e.jsxs)(d.table,{children:[(0,e.jsx)(d.thead,{children:(0,e.jsxs)(d.tr,{children:[(0,e.jsx)(d.th,{children:\"Prop\"}),(0,e.jsx)(d.th,{children:\"CSS Property\"}),(0,e.jsx)(d.th,{children:\"Theme Field\"})]})}),(0,e.jsxs)(d.tbody,{children:[(0,e.jsxs)(d.tr,{children:[(0,e.jsx)(d.td,{children:(0,e.jsx)(d.code,{children:\"borderRadius\"})}),(0,e.jsx)(d.td,{children:(0,e.jsx)(d.code,{children:\"border-radius\"})}),(0,e.jsx)(d.td,{children:(0,e.jsx)(d.code,{children:\"radii\"})})]}),(0,e.jsxs)(d.tr,{children:[(0,e.jsx)(d.td,{children:(0,e.jsx)(d.code,{children:\"borderTopLeftRadius\"})}),(0,e.jsx)(d.td,{children:(0,e.jsx)(d.code,{children:\"border-top-left-radius\"})}),(0,e.jsx)(d.td,{children:(0,e.jsx)(d.code,{children:\"radii\"})})]}),(0,e.jsxs)(d.tr,{children:[(0,e.jsx)(d.td,{children:(0,e.jsx)(d.code,{children:\"borderTopStartRadius\"})}),(0,e.jsxs)(d.td,{children:[(0,e.jsx)(d.code,{children:\"border-top-left-radius\"}),\" in LTR,\",(0,e.jsx)(\"br\",{}),\" \",(0,e.jsx)(d.code,{children:\"border-top-right-radius\"}),\" in RTL\"]}),(0,e.jsx)(d.td,{children:(0,e.jsx)(d.code,{children:\"radii\"})})]}),(0,e.jsxs)(d.tr,{children:[(0,e.jsx)(d.td,{children:(0,e.jsx)(d.code,{children:\"borderTopRightRadius\"})}),(0,e.jsx)(d.td,{children:(0,e.jsx)(d.code,{children:\"border-top-right-radius\"})}),(0,e.jsx)(d.td,{children:(0,e.jsx)(d.code,{children:\"radii\"})})]}),(0,e.jsxs)(d.tr,{children:[(0,e.jsx)(d.td,{children:(0,e.jsx)(d.code,{children:\"borderTopEndRadius\"})}),(0,e.jsxs)(d.td,{children:[(0,e.jsx)(d.code,{children:\"border-top-right-radius\"}),\" in LTR,\",(0,e.jsx)(\"br\",{}),\" \",(0,e.jsx)(d.code,{children:\"border-top-left-radius\"}),\" in RTL\"]}),(0,e.jsx)(d.td,{children:(0,e.jsx)(d.code,{children:\"radii\"})})]}),(0,e.jsxs)(d.tr,{children:[(0,e.jsx)(d.td,{children:(0,e.jsx)(d.code,{children:\"borderBottomRightRadius\"})}),(0,e.jsx)(d.td,{children:(0,e.jsx)(d.code,{children:\"border-bottom-right-radius\"})}),(0,e.jsx)(d.td,{children:(0,e.jsx)(d.code,{children:\"radii\"})})]}),(0,e.jsxs)(d.tr,{children:[(0,e.jsx)(d.td,{children:(0,e.jsx)(d.code,{children:\"borderBottomEndRadius\"})}),(0,e.jsxs)(d.td,{children:[(0,e.jsx)(d.code,{children:\"border-bottom-right-radius\"}),\" in LTR,\",(0,e.jsx)(\"br\",{}),\" \",(0,e.jsx)(d.code,{children:\"border-bottom-left-radius\"}),\" in RTL\"]}),(0,e.jsx)(d.td,{children:(0,e.jsx)(d.code,{children:\"radii\"})})]}),(0,e.jsxs)(d.tr,{children:[(0,e.jsx)(d.td,{children:(0,e.jsx)(d.code,{children:\"borderBottomLeftRadius\"})}),(0,e.jsx)(d.td,{children:(0,e.jsx)(d.code,{children:\"border-bottom-left-radius\"})}),(0,e.jsx)(d.td,{children:(0,e.jsx)(d.code,{children:\"radii\"})})]}),(0,e.jsxs)(d.tr,{children:[(0,e.jsx)(d.td,{children:(0,e.jsx)(d.code,{children:\"borderBottomStartRadius\"})}),(0,e.jsxs)(d.td,{children:[(0,e.jsx)(d.code,{children:\"border-bottom-left-radius\"}),\" in LTR,\",(0,e.jsx)(\"br\",{}),\" \",(0,e.jsx)(d.code,{children:\"border-bottom-left-radius\"}),\" in RTL\"]}),(0,e.jsx)(d.td,{children:(0,e.jsx)(d.code,{children:\"radii\"})})]}),(0,e.jsxs)(d.tr,{children:[(0,e.jsx)(d.td,{children:(0,e.jsx)(d.code,{children:\"borderTopRadius\"})}),(0,e.jsxs)(d.td,{children:[(0,e.jsx)(d.code,{children:\"border-top-left-radius\"}),\" + \",(0,e.jsx)(d.code,{children:\"border-top-right-radius\"})]}),(0,e.jsx)(d.td,{children:(0,e.jsx)(d.code,{children:\"radii\"})})]}),(0,e.jsxs)(d.tr,{children:[(0,e.jsx)(d.td,{children:(0,e.jsx)(d.code,{children:\"borderRightRadius\"})}),(0,e.jsxs)(d.td,{children:[(0,e.jsx)(d.code,{children:\"border-top-right-radius\"}),\" + \",(0,e.jsx)(d.code,{children:\"border-bottom-right-radius\"})]}),(0,e.jsx)(d.td,{children:(0,e.jsx)(d.code,{children:\"radii\"})})]}),(0,e.jsxs)(d.tr,{children:[(0,e.jsx)(d.td,{children:(0,e.jsx)(d.code,{children:\"borderEndRadius\"})}),(0,e.jsxs)(d.td,{children:[(0,e.jsx)(d.code,{children:\"border-top-right-radius\"}),\" + \",(0,e.jsx)(d.code,{children:\"border-bottom-right-radius\"})]}),(0,e.jsx)(d.td,{children:(0,e.jsx)(d.code,{children:\"radii\"})})]}),(0,e.jsxs)(d.tr,{children:[(0,e.jsx)(d.td,{children:(0,e.jsx)(d.code,{children:\"borderBottomRadius\"})}),(0,e.jsxs)(d.td,{children:[(0,e.jsx)(d.code,{children:\"border-bottom-left-radius\"}),\" + \",(0,e.jsx)(d.code,{children:\"border-bottom-right-radius\"})]}),(0,e.jsx)(d.td,{children:(0,e.jsx)(d.code,{children:\"radii\"})})]}),(0,e.jsxs)(d.tr,{children:[(0,e.jsx)(d.td,{children:(0,e.jsx)(d.code,{children:\"borderLeftRadius\"})}),(0,e.jsxs)(d.td,{children:[(0,e.jsx)(d.code,{children:\"border-top-left-radius\"}),\" + \",(0,e.jsx)(d.code,{children:\"border-bottom-left-radius\"})]}),(0,e.jsx)(d.td,{children:(0,e.jsx)(d.code,{children:\"radii\"})})]}),(0,e.jsxs)(d.tr,{children:[(0,e.jsx)(d.td,{children:(0,e.jsx)(d.code,{children:\"borderStartRadius\"})}),(0,e.jsxs)(d.td,{children:[(0,e.jsx)(d.code,{children:\"border-top-left-radius\"}),\" + \",(0,e.jsx)(d.code,{children:\"border-bottom-left-radius\"})]}),(0,e.jsx)(d.td,{children:(0,e.jsx)(d.code,{children:\"radii\"})})]})]})]}),`\n`,(0,e.jsx)(d.h3,{id:\"position\",children:\"Position\"}),`\n`,(0,e.jsx)(d.pre,{children:(0,e.jsx)(d.code,{className:\"language-jsx\",live:\"false\",children:`import { Box } from \"@incmix-ui/react\"\n\n// verbose\n<Box position=\"absolute\">Cover</Box>\n\n// shorthand\n<Box pos=\"absolute\">Cover</Box>\n<Box pos=\"absolute\" top=\"0\" left=\"0\">\n  Absolute with top and left\n</Box>\n<Box pos=\"fixed\" w=\"100%\" zIndex={2}>\n  Fixed with zIndex\n</Box>\n`})}),`\n`,(0,e.jsxs)(d.table,{children:[(0,e.jsx)(d.thead,{children:(0,e.jsxs)(d.tr,{children:[(0,e.jsx)(d.th,{children:\"Prop\"}),(0,e.jsx)(d.th,{children:\"CSS Property\"}),(0,e.jsx)(d.th,{children:\"Theme Field\"})]})}),(0,e.jsxs)(d.tbody,{children:[(0,e.jsxs)(d.tr,{children:[(0,e.jsxs)(d.td,{children:[(0,e.jsx)(d.code,{children:\"pos\"}),\",\",(0,e.jsx)(d.code,{children:\"position\"})]}),(0,e.jsx)(d.td,{children:(0,e.jsx)(d.code,{children:\"position\"})}),(0,e.jsx)(d.td,{children:\"none\"})]}),(0,e.jsxs)(d.tr,{children:[(0,e.jsx)(d.td,{children:(0,e.jsx)(d.code,{children:\"zIndex\"})}),(0,e.jsx)(d.td,{children:(0,e.jsx)(d.code,{children:\"z-index\"})}),(0,e.jsx)(d.td,{children:(0,e.jsx)(d.code,{children:\"zIndices\"})})]}),(0,e.jsxs)(d.tr,{children:[(0,e.jsx)(d.td,{children:(0,e.jsx)(d.code,{children:\"top\"})}),(0,e.jsx)(d.td,{children:(0,e.jsx)(d.code,{children:\"top\"})}),(0,e.jsx)(d.td,{children:(0,e.jsx)(d.code,{children:\"space\"})})]}),(0,e.jsxs)(d.tr,{children:[(0,e.jsx)(d.td,{children:(0,e.jsx)(d.code,{children:\"right\"})}),(0,e.jsx)(d.td,{children:(0,e.jsx)(d.code,{children:\"right\"})}),(0,e.jsx)(d.td,{children:(0,e.jsx)(d.code,{children:\"space\"})})]}),(0,e.jsxs)(d.tr,{children:[(0,e.jsx)(d.td,{children:(0,e.jsx)(d.code,{children:\"bottom\"})}),(0,e.jsx)(d.td,{children:(0,e.jsx)(d.code,{children:\"bottom\"})}),(0,e.jsx)(d.td,{children:(0,e.jsx)(d.code,{children:\"space\"})})]}),(0,e.jsxs)(d.tr,{children:[(0,e.jsx)(d.td,{children:(0,e.jsx)(d.code,{children:\"left\"})}),(0,e.jsx)(d.td,{children:(0,e.jsx)(d.code,{children:\"left\"})}),(0,e.jsx)(d.td,{children:(0,e.jsx)(d.code,{children:\"space\"})})]})]})]}),`\n`,(0,e.jsx)(d.h3,{id:\"shadow\",children:\"Shadow\"}),`\n`,(0,e.jsx)(d.pre,{children:(0,e.jsx)(d.code,{className:\"language-jsx\",children:`<SimpleGrid bg=\"gray.50\" columns={{ sm: 2, md: 4 }} spacing=\"8\" p=\"10\" textAlign=\"center\" rounded=\"lg\" color=\"gray.400\">\n  <Box boxShadow=\"xs\" p=\"6\" rounded=\"md\" bg=\"white\">\n    xs\n  </Box>\n  <Box boxShadow=\"sm\" p=\"6\" rounded=\"md\" bg=\"white\">\n    sm\n  </Box>\n  <Box boxShadow=\"base\" p=\"6\" rounded=\"md\" bg=\"white\">\n    Base\n  </Box>\n  <Box boxShadow=\"md\" p=\"6\" rounded=\"md\" bg=\"white\">\n    md\n  </Box>\n  <Box boxShadow=\"lg\" p=\"6\" rounded=\"md\" bg=\"white\">\n    lg\n  </Box>\n  <Box boxShadow=\"xl\" p=\"6\" rounded=\"md\" bg=\"white\">\n    xl\n  </Box>\n  <Box boxShadow=\"2xl\" p=\"6\" rounded=\"md\" bg=\"white\">\n    2xl\n  </Box>\n  <Box boxShadow=\"dark-lg\" p=\"6\" rounded=\"md\" bg=\"white\">\n    Dark lg\n  </Box>\n  <Box boxShadow=\"outline\" p=\"6\" rounded=\"md\" bg=\"white\">\n    Outline\n  </Box>\n  <Box boxShadow=\"inner\" p=\"6\" rounded=\"md\" bg=\"white\">\n    Inner\n  </Box>\n</SimpleGrid>\n`})}),`\n`,(0,e.jsx)(d.pre,{children:(0,e.jsx)(d.code,{className:\"language-jsx\",children:`<Text textShadow=\"1px 1px #ff0000\" m=\"6\">\n  Text with shadows\n</Text>\n`})}),`\n`,(0,e.jsxs)(d.table,{children:[(0,e.jsx)(d.thead,{children:(0,e.jsxs)(d.tr,{children:[(0,e.jsx)(d.th,{children:\"Prop\"}),(0,e.jsx)(d.th,{children:\"CSS Property\"}),(0,e.jsx)(d.th,{children:\"Theme Field\"})]})}),(0,e.jsxs)(d.tbody,{children:[(0,e.jsxs)(d.tr,{children:[(0,e.jsx)(d.td,{children:(0,e.jsx)(d.code,{children:\"textShadow\"})}),(0,e.jsx)(d.td,{children:(0,e.jsx)(d.code,{children:\"text-shadow\"})}),(0,e.jsx)(d.td,{children:(0,e.jsx)(d.code,{children:\"shadows\"})})]}),(0,e.jsxs)(d.tr,{children:[(0,e.jsxs)(d.td,{children:[(0,e.jsx)(d.code,{children:\"shadow\"}),\", \",(0,e.jsx)(d.code,{children:\"boxShadow\"})]}),(0,e.jsx)(d.td,{children:(0,e.jsx)(d.code,{children:\"box-shadow\"})}),(0,e.jsx)(d.td,{children:(0,e.jsx)(d.code,{children:\"shadows\"})})]})]})]}),`\n`,(0,e.jsx)(d.h3,{id:\"filter\",children:\"Filter\"}),`\n`,(0,e.jsx)(d.pre,{children:(0,e.jsx)(d.code,{className:\"language-jsx\",children:`function Filters() {\n  const basicBoxStyles = {\n    display: 'flex',\n    alignItems: 'center',\n    justifyContent: 'center',\n    textAlign: 'center',\n    boxSize: '250px',\n    color: 'white',\n    textShadow: '0 0 20px black',\n    fontWeight: 'bold',\n    fontSize: '20px',\n    px: 4,\n    background: 'url(https://picsum.photos/id/1080/200/300) center/cover no-repeat',\n  }\n  return (\n    <Flex flexWrap=\"wrap\" gap=\"24px\" justifyContent=\"space-evenly\">\n      {/* adding filter property to the element */}\n      <Box sx={basicBoxStyles} filter=\"grayscale(80%)\">\n        Box with Filter\n      </Box>\n      {/* adding blur property to the element */}\n      <Box sx={basicBoxStyles} filter=\"auto\" blur=\"2px\">\n        Box with Blur\n      </Box>\n      {/* adding brightness property to the element */}\n      <Box sx={basicBoxStyles} filter=\"auto\" brightness=\"40%\">\n        Box with Brightness\n      </Box>\n    </Flex>\n  )\n}\n`})}),`\n`,(0,e.jsxs)(d.blockquote,{children:[`\n`,(0,e.jsxs)(d.p,{children:[\"Note: To apply \",(0,e.jsx)(d.code,{children:\"blur\"}),\", \",(0,e.jsx)(d.code,{children:\"brightness\"}),\", \",(0,e.jsx)(d.code,{children:\"contrast\"}),\", \",(0,e.jsx)(d.code,{children:\"hueRotate\"}),\", \",(0,e.jsx)(d.code,{children:\"invert\"}),`,\n`,(0,e.jsx)(d.code,{children:\"saturate\"}),\" props on the element, set \",(0,e.jsx)(d.code,{children:\"filter\"}),' prop value to \"auto\".']}),`\n`]}),`\n`,(0,e.jsx)(d.pre,{children:(0,e.jsx)(d.code,{className:\"language-jsx\",children:`function BackdropFilters() {\n  const outerBoxStyles = {\n    boxSize: '250px',\n    p: '10',\n    background: 'url(https://picsum.photos/id/1068/200/300) center/cover no-repeat',\n  }\n\n  const innerBoxStyles = {\n    display: 'flex',\n    alignItems: 'center',\n    justifyContent: 'center',\n    textAlign: 'center',\n    boxSize: 'full',\n    color: 'white',\n    textShadow: '0 0 20px black',\n    fontWeight: 'bold',\n    fontSize: '20px',\n  }\n  return (\n    <Flex flexWrap=\"wrap\" gap=\"24px\" justifyContent=\"space-evenly\">\n      {/* adding backdrop-filter property to the element */}\n      <Box sx={outerBoxStyles}>\n        <Box sx={innerBoxStyles} backdropFilter=\"invert(100%)\">\n          Box with Backdrop Filter\n        </Box>\n      </Box>\n      {/* adding backdrop-blur property to the element */}\n      <Box sx={outerBoxStyles}>\n        <Box sx={innerBoxStyles} backdropFilter=\"auto\" backdropBlur=\"8px\">\n          Box with Backdrop Blur\n        </Box>\n      </Box>\n      {/* adding backdrop-contrast property to the element */}\n      <Box sx={outerBoxStyles}>\n        <Box sx={innerBoxStyles} backdropFilter=\"auto\" backdropContrast=\"30%\">\n          Box with Backdrop Contrast\n        </Box>\n      </Box>\n    </Flex>\n  )\n}\n`})}),`\n`,(0,e.jsxs)(d.blockquote,{children:[`\n`,(0,e.jsxs)(d.p,{children:[\"\\u{1F6A8} \",(0,e.jsx)(d.code,{children:\"backdrop-filter\"}),` is not supported in Firefox. It can be enabled by the\nuser, but it is suggested to design a component that looks good with and\nwithout this property.`]}),`\n`]}),`\n`,(0,e.jsxs)(d.blockquote,{children:[`\n`,(0,e.jsxs)(d.p,{children:[\"Note: To apply \",(0,e.jsx)(d.code,{children:\"backdropBlur\"}),\", \",(0,e.jsx)(d.code,{children:\"backdropBrightness\"}),\", \",(0,e.jsx)(d.code,{children:\"backdropContrast\"}),`,\n`,(0,e.jsx)(d.code,{children:\"backdropHueRotate\"}),\", \",(0,e.jsx)(d.code,{children:\"backdropInvert\"}),\", \",(0,e.jsx)(d.code,{children:\"backdropSaturate\"}),` props on the\nelement, set `,(0,e.jsx)(d.code,{children:\"backdropFilter\"}),' prop value to \"auto\".']}),`\n`]}),`\n`,(0,e.jsxs)(d.table,{children:[(0,e.jsx)(d.thead,{children:(0,e.jsxs)(d.tr,{children:[(0,e.jsx)(d.th,{children:\"Prop\"}),(0,e.jsx)(d.th,{children:\"CSS Property\"}),(0,e.jsx)(d.th,{children:\"Theme Field\"})]})}),(0,e.jsxs)(d.tbody,{children:[(0,e.jsxs)(d.tr,{children:[(0,e.jsx)(d.td,{children:(0,e.jsx)(d.code,{children:\"filter\"})}),(0,e.jsx)(d.td,{children:(0,e.jsx)(d.code,{children:\"filter\"})}),(0,e.jsx)(d.td,{children:\"none\"})]}),(0,e.jsxs)(d.tr,{children:[(0,e.jsx)(d.td,{children:(0,e.jsx)(d.code,{children:\"blur\"})}),(0,e.jsx)(d.td,{children:(0,e.jsx)(d.code,{children:\"filter\"})}),(0,e.jsx)(d.td,{children:(0,e.jsx)(d.code,{children:\"blur\"})})]}),(0,e.jsxs)(d.tr,{children:[(0,e.jsx)(d.td,{children:(0,e.jsx)(d.code,{children:\"brightness\"})}),(0,e.jsx)(d.td,{children:(0,e.jsx)(d.code,{children:\"filter\"})}),(0,e.jsx)(d.td,{children:\"none\"})]}),(0,e.jsxs)(d.tr,{children:[(0,e.jsx)(d.td,{children:(0,e.jsx)(d.code,{children:\"contrast\"})}),(0,e.jsx)(d.td,{children:(0,e.jsx)(d.code,{children:\"filter\"})}),(0,e.jsx)(d.td,{children:\"none\"})]}),(0,e.jsxs)(d.tr,{children:[(0,e.jsx)(d.td,{children:(0,e.jsx)(d.code,{children:\"hueRotate\"})}),(0,e.jsx)(d.td,{children:(0,e.jsx)(d.code,{children:\"filter\"})}),(0,e.jsx)(d.td,{children:\"none\"})]}),(0,e.jsxs)(d.tr,{children:[(0,e.jsx)(d.td,{children:(0,e.jsx)(d.code,{children:\"invert\"})}),(0,e.jsx)(d.td,{children:(0,e.jsx)(d.code,{children:\"filter\"})}),(0,e.jsx)(d.td,{children:\"none\"})]}),(0,e.jsxs)(d.tr,{children:[(0,e.jsx)(d.td,{children:(0,e.jsx)(d.code,{children:\"saturate\"})}),(0,e.jsx)(d.td,{children:(0,e.jsx)(d.code,{children:\"filter\"})}),(0,e.jsx)(d.td,{children:\"none\"})]}),(0,e.jsxs)(d.tr,{children:[(0,e.jsx)(d.td,{children:(0,e.jsx)(d.code,{children:\"dropShadow\"})}),(0,e.jsx)(d.td,{children:(0,e.jsx)(d.code,{children:\"filter\"})}),(0,e.jsx)(d.td,{children:(0,e.jsx)(d.code,{children:\"shadows\"})})]}),(0,e.jsxs)(d.tr,{children:[(0,e.jsx)(d.td,{children:(0,e.jsx)(d.code,{children:\"backdropFilter\"})}),(0,e.jsx)(d.td,{children:(0,e.jsx)(d.code,{children:\"backdrop-filter\"})}),(0,e.jsx)(d.td,{children:\"none\"})]}),(0,e.jsxs)(d.tr,{children:[(0,e.jsx)(d.td,{children:(0,e.jsx)(d.code,{children:\"backdropBlur\"})}),(0,e.jsx)(d.td,{children:(0,e.jsx)(d.code,{children:\"backdrop-filter\"})}),(0,e.jsx)(d.td,{children:(0,e.jsx)(d.code,{children:\"blur\"})})]}),(0,e.jsxs)(d.tr,{children:[(0,e.jsx)(d.td,{children:(0,e.jsx)(d.code,{children:\"backdropBrightness\"})}),(0,e.jsx)(d.td,{children:(0,e.jsx)(d.code,{children:\"backdrop-filter\"})}),(0,e.jsx)(d.td,{children:\"none\"})]}),(0,e.jsxs)(d.tr,{children:[(0,e.jsx)(d.td,{children:(0,e.jsx)(d.code,{children:\"backdropContrast\"})}),(0,e.jsx)(d.td,{children:(0,e.jsx)(d.code,{children:\"backdrop-filter\"})}),(0,e.jsx)(d.td,{children:\"none\"})]}),(0,e.jsxs)(d.tr,{children:[(0,e.jsx)(d.td,{children:(0,e.jsx)(d.code,{children:\"backdropHueRotate\"})}),(0,e.jsx)(d.td,{children:(0,e.jsx)(d.code,{children:\"backdrop-filter\"})}),(0,e.jsx)(d.td,{children:\"none\"})]}),(0,e.jsxs)(d.tr,{children:[(0,e.jsx)(d.td,{children:(0,e.jsx)(d.code,{children:\"backdropInvert\"})}),(0,e.jsx)(d.td,{children:(0,e.jsx)(d.code,{children:\"backdrop-filter\"})}),(0,e.jsx)(d.td,{children:\"none\"})]}),(0,e.jsxs)(d.tr,{children:[(0,e.jsx)(d.td,{children:(0,e.jsx)(d.code,{children:\"backdropSaturate\"})}),(0,e.jsx)(d.td,{children:(0,e.jsx)(d.code,{children:\"backdrop-filter\"})}),(0,e.jsx)(d.td,{children:\"none\"})]})]})]}),`\n`,(0,e.jsx)(d.h3,{id:\"pseudo\",children:\"Pseudo\"}),`\n`,(0,e.jsx)(d.pre,{children:(0,e.jsx)(d.code,{className:\"language-jsx\",live:\"false\",children:`import { Button } from \"@incmix-ui/react\"\n\n// :hover style\n<Button\n  colorScheme=\"teal\"\n  _hover={{\n    background: \"white\",\n    color: \"teal.500\",\n  }}\n>\n  Hover me\n</Button>\n\n// apply :hover over parent element\n<Box\n  role=\"group\"\n>\n  <Box\n    _hover={{ fontWeight: 'semibold' }}\n    _groupHover={{ color: 'tomato' }}\n  >\n  </Box>\n</Box>\n\n// add ::before pseudo element\n// Note: the content value needs an extra set of quotes!\n<Box\n  _before={{ content: '\"\\u{1F642}\"', display: 'inline-block', mr: '5px' }}\n>\n  A pseudo element\n</Box>\n\n`})}),`\n`,(0,e.jsxs)(d.table,{children:[(0,e.jsx)(d.thead,{children:(0,e.jsxs)(d.tr,{children:[(0,e.jsx)(d.th,{children:\"Prop\"}),(0,e.jsx)(d.th,{children:\"CSS Property\"}),(0,e.jsx)(d.th,{children:\"Theme Field\"})]})}),(0,e.jsxs)(d.tbody,{children:[(0,e.jsxs)(d.tr,{children:[(0,e.jsx)(d.td,{children:(0,e.jsx)(d.code,{children:\"_hover\"})}),(0,e.jsxs)(d.td,{children:[(0,e.jsx)(d.code,{children:\"&:hover\"}),(0,e.jsx)(\"br\",{}),(0,e.jsx)(d.code,{children:\"&[data-hover]\"})]}),(0,e.jsx)(d.td,{children:\"none\"})]}),(0,e.jsxs)(d.tr,{children:[(0,e.jsx)(d.td,{children:(0,e.jsx)(d.code,{children:\"_active\"})}),(0,e.jsxs)(d.td,{children:[(0,e.jsx)(d.code,{children:\"&:active\"}),(0,e.jsx)(\"br\",{}),(0,e.jsx)(d.code,{children:\"&[data-active]\"})]}),(0,e.jsx)(d.td,{children:\"none\"})]}),(0,e.jsxs)(d.tr,{children:[(0,e.jsx)(d.td,{children:(0,e.jsx)(d.code,{children:\"_focus\"})}),(0,e.jsxs)(d.td,{children:[(0,e.jsx)(d.code,{children:\"&:focus\"}),(0,e.jsx)(\"br\",{}),(0,e.jsx)(d.code,{children:\"&[data-focus]\"})]}),(0,e.jsx)(d.td,{children:\"none\"})]}),(0,e.jsxs)(d.tr,{children:[(0,e.jsx)(d.td,{children:(0,e.jsx)(d.code,{children:\"_highlighted\"})}),(0,e.jsx)(d.td,{children:(0,e.jsx)(d.code,{children:\"&[data-highlighted]\"})}),(0,e.jsx)(d.td,{children:\"none\"})]}),(0,e.jsxs)(d.tr,{children:[(0,e.jsx)(d.td,{children:(0,e.jsx)(d.code,{children:\"_focusWithin\"})}),(0,e.jsx)(d.td,{children:(0,e.jsx)(d.code,{children:\"&:focus-within\"})}),(0,e.jsx)(d.td,{children:\"none\"})]}),(0,e.jsxs)(d.tr,{children:[(0,e.jsx)(d.td,{children:(0,e.jsx)(d.code,{children:\"_focusVisible\"})}),(0,e.jsx)(d.td,{children:(0,e.jsx)(d.code,{children:\"&:focus-visible\"})}),(0,e.jsx)(d.td,{children:\"none\"})]}),(0,e.jsxs)(d.tr,{children:[(0,e.jsx)(d.td,{children:(0,e.jsx)(d.code,{children:\"_disabled\"})}),(0,e.jsxs)(d.td,{children:[(0,e.jsx)(d.code,{children:\"&[disabled]\"}),(0,e.jsx)(\"br\",{}),(0,e.jsx)(d.code,{children:\"&[aria-disabled=true]\"}),(0,e.jsx)(\"br\",{}),(0,e.jsx)(d.code,{children:\"&[data-disabled]\"})]}),(0,e.jsx)(d.td,{children:\"none\"})]}),(0,e.jsxs)(d.tr,{children:[(0,e.jsx)(d.td,{children:(0,e.jsx)(d.code,{children:\"_readOnly\"})}),(0,e.jsxs)(d.td,{children:[(0,e.jsx)(d.code,{children:\"&[aria-readonly=true]\"}),(0,e.jsx)(\"br\",{}),(0,e.jsx)(d.code,{children:\"&[readonly]\"}),(0,e.jsx)(\"br\",{}),(0,e.jsx)(d.code,{children:\"&[data-readonly]\"})]}),(0,e.jsx)(d.td,{children:\"none\"})]}),(0,e.jsxs)(d.tr,{children:[(0,e.jsx)(d.td,{children:(0,e.jsx)(d.code,{children:\"_before\"})}),(0,e.jsx)(d.td,{children:(0,e.jsx)(d.code,{children:\"&::before\"})}),(0,e.jsx)(d.td,{children:\"none\"})]}),(0,e.jsxs)(d.tr,{children:[(0,e.jsx)(d.td,{children:(0,e.jsx)(d.code,{children:\"_after\"})}),(0,e.jsx)(d.td,{children:(0,e.jsx)(d.code,{children:\"&::after\"})}),(0,e.jsx)(d.td,{children:\"none\"})]}),(0,e.jsxs)(d.tr,{children:[(0,e.jsx)(d.td,{children:(0,e.jsx)(d.code,{children:\"_empty\"})}),(0,e.jsx)(d.td,{children:(0,e.jsx)(d.code,{children:\"&:empty\"})}),(0,e.jsx)(d.td,{children:\"none\"})]}),(0,e.jsxs)(d.tr,{children:[(0,e.jsx)(d.td,{children:(0,e.jsx)(d.code,{children:\"_expanded\"})}),(0,e.jsxs)(d.td,{children:[(0,e.jsx)(d.code,{children:\"&[aria-expanded=true]\"}),(0,e.jsx)(\"br\",{}),(0,e.jsx)(d.code,{children:\"&[data-expanded]\"})]}),(0,e.jsx)(d.td,{children:\"none\"})]}),(0,e.jsxs)(d.tr,{children:[(0,e.jsx)(d.td,{children:(0,e.jsx)(d.code,{children:\"_checked\"})}),(0,e.jsxs)(d.td,{children:[(0,e.jsx)(d.code,{children:\"&[aria-checked=true]\"}),(0,e.jsx)(\"br\",{}),(0,e.jsx)(d.code,{children:\"&[data-checked]\"})]}),(0,e.jsx)(d.td,{children:\"none\"})]}),(0,e.jsxs)(d.tr,{children:[(0,e.jsx)(d.td,{children:(0,e.jsx)(d.code,{children:\"_grabbed\"})}),(0,e.jsxs)(d.td,{children:[(0,e.jsx)(d.code,{children:\"&[aria-grabbed=true]\"}),(0,e.jsx)(\"br\",{}),(0,e.jsx)(d.code,{children:\"&[data-grabbed]\"})]}),(0,e.jsx)(d.td,{children:\"none\"})]}),(0,e.jsxs)(d.tr,{children:[(0,e.jsx)(d.td,{children:(0,e.jsx)(d.code,{children:\"_pressed\"})}),(0,e.jsxs)(d.td,{children:[(0,e.jsx)(d.code,{children:\"&[aria-pressed=true]\"}),(0,e.jsx)(\"br\",{}),(0,e.jsx)(d.code,{children:\"&[data-pressed]\"})]}),(0,e.jsx)(d.td,{children:\"none\"})]}),(0,e.jsxs)(d.tr,{children:[(0,e.jsx)(d.td,{children:(0,e.jsx)(d.code,{children:\"_invalid\"})}),(0,e.jsxs)(d.td,{children:[(0,e.jsx)(d.code,{children:\"&[aria-invalid=true]\"}),(0,e.jsx)(\"br\",{}),(0,e.jsx)(d.code,{children:\"&[data-invalid]\"})]}),(0,e.jsx)(d.td,{children:\"none\"})]}),(0,e.jsxs)(d.tr,{children:[(0,e.jsx)(d.td,{children:(0,e.jsx)(d.code,{children:\"_valid\"})}),(0,e.jsxs)(d.td,{children:[(0,e.jsx)(d.code,{children:\"&[data-valid]\"}),(0,e.jsx)(\"br\",{}),(0,e.jsx)(d.code,{children:\"&[data-state=valid]\"})]}),(0,e.jsx)(d.td,{children:\"none\"})]}),(0,e.jsxs)(d.tr,{children:[(0,e.jsx)(d.td,{children:(0,e.jsx)(d.code,{children:\"_loading\"})}),(0,e.jsxs)(d.td,{children:[(0,e.jsx)(d.code,{children:\"&[data-loading]\"}),(0,e.jsx)(\"br\",{}),(0,e.jsx)(d.code,{children:\"&[aria-busy=true]\"})]}),(0,e.jsx)(d.td,{children:\"none\"})]}),(0,e.jsxs)(d.tr,{children:[(0,e.jsx)(d.td,{children:(0,e.jsx)(d.code,{children:\"_selected\"})}),(0,e.jsxs)(d.td,{children:[(0,e.jsx)(d.code,{children:\"&[aria-selected=true]\"}),(0,e.jsx)(\"br\",{}),(0,e.jsx)(d.code,{children:\"&[data-selected]\"})]}),(0,e.jsx)(d.td,{children:\"none\"})]}),(0,e.jsxs)(d.tr,{children:[(0,e.jsx)(d.td,{children:(0,e.jsx)(d.code,{children:\"_hidden\"})}),(0,e.jsxs)(d.td,{children:[(0,e.jsx)(d.code,{children:\"&[hidden]\"}),(0,e.jsx)(\"br\",{}),(0,e.jsx)(d.code,{children:\"&[data-hidden]\"})]}),(0,e.jsx)(d.td,{children:\"none\"})]}),(0,e.jsxs)(d.tr,{children:[(0,e.jsx)(d.td,{children:(0,e.jsx)(d.code,{children:\"_autofill\"})}),(0,e.jsx)(d.td,{children:(0,e.jsx)(d.code,{children:\"&:-webkit-autofill\"})}),(0,e.jsx)(d.td,{children:\"none\"})]}),(0,e.jsxs)(d.tr,{children:[(0,e.jsx)(d.td,{children:(0,e.jsx)(d.code,{children:\"_even\"})}),(0,e.jsx)(d.td,{children:(0,e.jsx)(d.code,{children:\"&:nth-of-type(even)\"})}),(0,e.jsx)(d.td,{children:\"none\"})]}),(0,e.jsxs)(d.tr,{children:[(0,e.jsx)(d.td,{children:(0,e.jsx)(d.code,{children:\"_odd\"})}),(0,e.jsx)(d.td,{children:(0,e.jsx)(d.code,{children:\"&:nth-of-type(odd)\"})}),(0,e.jsx)(d.td,{children:\"none\"})]}),(0,e.jsxs)(d.tr,{children:[(0,e.jsx)(d.td,{children:(0,e.jsx)(d.code,{children:\"_first\"})}),(0,e.jsx)(d.td,{children:(0,e.jsx)(d.code,{children:\"&:first-of-type\"})}),(0,e.jsx)(d.td,{children:\"none\"})]}),(0,e.jsxs)(d.tr,{children:[(0,e.jsx)(d.td,{children:(0,e.jsx)(d.code,{children:\"_last\"})}),(0,e.jsx)(d.td,{children:(0,e.jsx)(d.code,{children:\"&:last-of-type\"})}),(0,e.jsx)(d.td,{children:\"none\"})]}),(0,e.jsxs)(d.tr,{children:[(0,e.jsx)(d.td,{children:(0,e.jsx)(d.code,{children:\"_notFirst\"})}),(0,e.jsx)(d.td,{children:(0,e.jsx)(d.code,{children:\"&:not(:first-of-type)\"})}),(0,e.jsx)(d.td,{children:\"none\"})]}),(0,e.jsxs)(d.tr,{children:[(0,e.jsx)(d.td,{children:(0,e.jsx)(d.code,{children:\"_notLast\"})}),(0,e.jsx)(d.td,{children:(0,e.jsx)(d.code,{children:\"&:not(:last-of-type)\"})}),(0,e.jsx)(d.td,{children:\"none\"})]}),(0,e.jsxs)(d.tr,{children:[(0,e.jsx)(d.td,{children:(0,e.jsx)(d.code,{children:\"_visited\"})}),(0,e.jsx)(d.td,{children:(0,e.jsx)(d.code,{children:\"&:visited\"})}),(0,e.jsx)(d.td,{children:\"none\"})]}),(0,e.jsxs)(d.tr,{children:[(0,e.jsx)(d.td,{children:(0,e.jsx)(d.code,{children:\"_activeLink\"})}),(0,e.jsx)(d.td,{children:(0,e.jsx)(d.code,{children:\"&[aria-current=page]\"})}),(0,e.jsx)(d.td,{children:\"none\"})]}),(0,e.jsxs)(d.tr,{children:[(0,e.jsx)(d.td,{children:(0,e.jsx)(d.code,{children:\"_activeStep\"})}),(0,e.jsx)(d.td,{children:(0,e.jsx)(d.code,{children:\"&[aria-current=step]\"})}),(0,e.jsx)(d.td,{children:\"none\"})]}),(0,e.jsxs)(d.tr,{children:[(0,e.jsx)(d.td,{children:(0,e.jsx)(d.code,{children:\"_indeterminate\"})}),(0,e.jsxs)(d.td,{children:[(0,e.jsx)(d.code,{children:\"&:indeterminate\"}),(0,e.jsx)(\"br\",{}),(0,e.jsx)(d.code,{children:\"&[aria-checked=mixed]\"}),(0,e.jsx)(\"br\",{}),(0,e.jsx)(d.code,{children:\"&[data-indeterminate]\"})]}),(0,e.jsx)(d.td,{children:\"none\"})]}),(0,e.jsxs)(d.tr,{children:[(0,e.jsx)(d.td,{children:(0,e.jsx)(d.code,{children:\"_groupHover\"})}),(0,e.jsxs)(d.td,{children:[(0,e.jsx)(d.code,{children:\"[role=group]:hover &\"}),(0,e.jsx)(\"br\",{}),(0,e.jsx)(d.code,{children:\"[role=group][data-hover] &\"}),(0,e.jsx)(\"br\",{}),(0,e.jsx)(d.code,{children:\"[data-group]:hover &\"}),(0,e.jsx)(\"br\",{}),(0,e.jsx)(d.code,{children:\"[data-group][data-hover] &\"}),(0,e.jsx)(\"br\",{}),(0,e.jsx)(d.code,{children:\".group:hover &\"}),(0,e.jsx)(\"br\",{}),(0,e.jsx)(d.code,{children:\".group[data-hover] &\"})]}),(0,e.jsx)(d.td,{children:\"none\"})]}),(0,e.jsxs)(d.tr,{children:[(0,e.jsx)(d.td,{children:(0,e.jsx)(d.code,{children:\"_peerHover\"})}),(0,e.jsxs)(d.td,{children:[(0,e.jsx)(d.code,{children:\"[data-peer]:hover ~ &\"}),(0,e.jsx)(\"br\",{}),(0,e.jsx)(d.code,{children:\"[data-peer][data-hover] ~ &\"}),(0,e.jsx)(\"br\",{}),(0,e.jsx)(d.code,{children:\".peer:hover ~ &\"}),(0,e.jsx)(\"br\",{}),(0,e.jsx)(d.code,{children:\".peer[data-hover] ~ &\"})]}),(0,e.jsx)(d.td,{children:\"none\"})]}),(0,e.jsxs)(d.tr,{children:[(0,e.jsx)(d.td,{children:(0,e.jsx)(d.code,{children:\"_groupFocus\"})}),(0,e.jsxs)(d.td,{children:[(0,e.jsx)(d.code,{children:\"[role=group]:focus &\"}),(0,e.jsx)(\"br\",{}),(0,e.jsx)(d.code,{children:\"[role=group][data-focus] &\"}),(0,e.jsx)(\"br\",{}),(0,e.jsx)(d.code,{children:\"[data-group]:focus &\"}),(0,e.jsx)(\"br\",{}),(0,e.jsx)(d.code,{children:\"[data-group][data-focus] &\"}),(0,e.jsx)(\"br\",{}),(0,e.jsx)(d.code,{children:\".group:focus &\"}),(0,e.jsx)(\"br\",{}),(0,e.jsx)(d.code,{children:\".group[data-focus] &\"})]}),(0,e.jsx)(d.td,{children:\"none\"})]}),(0,e.jsxs)(d.tr,{children:[(0,e.jsx)(d.td,{children:(0,e.jsx)(d.code,{children:\"_peerFocus\"})}),(0,e.jsxs)(d.td,{children:[(0,e.jsx)(d.code,{children:\"[data-peer]:focus ~ &\"}),(0,e.jsx)(\"br\",{}),(0,e.jsx)(d.code,{children:\"[data-peer][data-focus] ~ &\"}),(0,e.jsx)(\"br\",{}),(0,e.jsx)(d.code,{children:\".peer:focus ~ &\"}),(0,e.jsx)(\"br\",{}),(0,e.jsx)(d.code,{children:\".peer[data-focus] ~ &\"})]}),(0,e.jsx)(d.td,{children:\"none\"})]}),(0,e.jsxs)(d.tr,{children:[(0,e.jsx)(d.td,{children:(0,e.jsx)(d.code,{children:\"_groupFocusVisible\"})}),(0,e.jsxs)(d.td,{children:[(0,e.jsx)(d.code,{children:\"[role=group]:focus-visible &\"}),(0,e.jsx)(\"br\",{}),(0,e.jsx)(d.code,{children:\"[data-group]:focus-visible &\"}),(0,e.jsx)(\"br\",{}),(0,e.jsx)(d.code,{children:\".group:focus-visible &\"})]}),(0,e.jsx)(d.td,{children:\"none\"})]}),(0,e.jsxs)(d.tr,{children:[(0,e.jsx)(d.td,{children:(0,e.jsx)(d.code,{children:\"_peerFocusVisible\"})}),(0,e.jsxs)(d.td,{children:[(0,e.jsx)(d.code,{children:\"[data-peer]:focus-visible ~ &\"}),(0,e.jsx)(\"br\",{}),(0,e.jsx)(d.code,{children:\".peer:focus-visible ~ &\"})]}),(0,e.jsx)(d.td,{children:\"none\"})]}),(0,e.jsxs)(d.tr,{children:[(0,e.jsx)(d.td,{children:(0,e.jsx)(d.code,{children:\"_groupActive\"})}),(0,e.jsxs)(d.td,{children:[(0,e.jsx)(d.code,{children:\"[role=group]:active &\"}),(0,e.jsx)(\"br\",{}),(0,e.jsx)(d.code,{children:\"[role=group][data-active] &\"}),(0,e.jsx)(\"br\",{}),(0,e.jsx)(d.code,{children:\"[data-group]:active &\"}),(0,e.jsx)(\"br\",{}),(0,e.jsx)(d.code,{children:\"[data-group][data-active] &\"}),(0,e.jsx)(\"br\",{}),(0,e.jsx)(d.code,{children:\".group:active &\"}),(0,e.jsx)(\"br\",{}),(0,e.jsx)(d.code,{children:\".group[data-active] &\"})]}),(0,e.jsx)(d.td,{children:\"none\"})]}),(0,e.jsxs)(d.tr,{children:[(0,e.jsx)(d.td,{children:(0,e.jsx)(d.code,{children:\"_peerActive\"})}),(0,e.jsxs)(d.td,{children:[(0,e.jsx)(d.code,{children:\"[data-peer]:active ~ &\"}),(0,e.jsx)(\"br\",{}),(0,e.jsx)(d.code,{children:\"[data-peer][data-active] ~ &\"}),(0,e.jsx)(\"br\",{}),(0,e.jsx)(d.code,{children:\".peer:active ~ &\"}),(0,e.jsx)(\"br\",{}),(0,e.jsx)(d.code,{children:\".peer[data-active] ~ &\"})]}),(0,e.jsx)(d.td,{children:\"none\"})]}),(0,e.jsxs)(d.tr,{children:[(0,e.jsx)(d.td,{children:(0,e.jsx)(d.code,{children:\"_groupDisabled\"})}),(0,e.jsxs)(d.td,{children:[(0,e.jsx)(d.code,{children:\"[role=group]:disabled &\"}),(0,e.jsx)(\"br\",{}),(0,e.jsx)(d.code,{children:\"[role=group][data-disabled] &\"}),(0,e.jsx)(\"br\",{}),(0,e.jsx)(d.code,{children:\"[data-group]:disabled &\"}),(0,e.jsx)(\"br\",{}),(0,e.jsx)(d.code,{children:\"[data-group][data-disabled] &\"}),(0,e.jsx)(\"br\",{}),(0,e.jsx)(d.code,{children:\".group:disabled &\"}),(0,e.jsx)(\"br\",{}),(0,e.jsx)(d.code,{children:\".group[data-disabled] &\"})]}),(0,e.jsx)(d.td,{children:\"none\"})]}),(0,e.jsxs)(d.tr,{children:[(0,e.jsx)(d.td,{children:(0,e.jsx)(d.code,{children:\"_peerDisabled\"})}),(0,e.jsxs)(d.td,{children:[(0,e.jsx)(d.code,{children:\"[data-peer]:disabled ~ &\"}),(0,e.jsx)(\"br\",{}),(0,e.jsx)(d.code,{children:\"[data-peer][data-disabled] ~ &\"}),(0,e.jsx)(\"br\",{}),(0,e.jsx)(d.code,{children:\".peer:disabled ~ &\"}),(0,e.jsx)(\"br\",{}),(0,e.jsx)(d.code,{children:\".peer[data-disabled] ~ &\"})]}),(0,e.jsx)(d.td,{children:\"none\"})]}),(0,e.jsxs)(d.tr,{children:[(0,e.jsx)(d.td,{children:(0,e.jsx)(d.code,{children:\"_groupInvalid\"})}),(0,e.jsxs)(d.td,{children:[(0,e.jsx)(d.code,{children:\"[role=group]:invalid &\"}),(0,e.jsx)(\"br\",{}),(0,e.jsx)(d.code,{children:\"[role=group][data-invalid] &\"}),(0,e.jsx)(\"br\",{}),(0,e.jsx)(d.code,{children:\"[data-group]:invalid &\"}),(0,e.jsx)(\"br\",{}),(0,e.jsx)(d.code,{children:\"[data-group][data-invalid] &\"}),(0,e.jsx)(\"br\",{}),(0,e.jsx)(d.code,{children:\".group:invalid &\"}),(0,e.jsx)(\"br\",{}),(0,e.jsx)(d.code,{children:\".group[data-invalid] &\"})]}),(0,e.jsx)(d.td,{children:\"none\"})]}),(0,e.jsxs)(d.tr,{children:[(0,e.jsx)(d.td,{children:(0,e.jsx)(d.code,{children:\"_peerInvalid\"})}),(0,e.jsxs)(d.td,{children:[(0,e.jsx)(d.code,{children:\"[data-peer]:invalid ~ &\"}),(0,e.jsx)(\"br\",{}),(0,e.jsx)(d.code,{children:\"[data-peer][data-invalid] ~ &\"}),(0,e.jsx)(\"br\",{}),(0,e.jsx)(d.code,{children:\".peer:invalid ~ &\"}),(0,e.jsx)(\"br\",{}),(0,e.jsx)(d.code,{children:\".peer[data-invalid] ~ &\"})]}),(0,e.jsx)(d.td,{children:\"none\"})]}),(0,e.jsxs)(d.tr,{children:[(0,e.jsx)(d.td,{children:(0,e.jsx)(d.code,{children:\"_groupChecked\"})}),(0,e.jsxs)(d.td,{children:[(0,e.jsx)(d.code,{children:\"[role=group]:checked &\"}),(0,e.jsx)(\"br\",{}),(0,e.jsx)(d.code,{children:\"[role=group][data-checked] &\"}),(0,e.jsx)(\"br\",{}),(0,e.jsx)(d.code,{children:\"[data-group]:checked &\"}),(0,e.jsx)(\"br\",{}),(0,e.jsx)(d.code,{children:\"[data-group][data-checked] &\"}),(0,e.jsx)(\"br\",{}),(0,e.jsx)(d.code,{children:\".group:checked &\"}),(0,e.jsx)(\"br\",{}),(0,e.jsx)(d.code,{children:\".group[data-checked] &\"})]}),(0,e.jsx)(d.td,{children:\"none\"})]}),(0,e.jsxs)(d.tr,{children:[(0,e.jsx)(d.td,{children:(0,e.jsx)(d.code,{children:\"_peerChecked\"})}),(0,e.jsxs)(d.td,{children:[(0,e.jsx)(d.code,{children:\"[data-peer]:checked ~ &\"}),(0,e.jsx)(\"br\",{}),(0,e.jsx)(d.code,{children:\"[data-peer][data-checked] ~ &\"}),(0,e.jsx)(\"br\",{}),(0,e.jsx)(d.code,{children:\".peer:checked ~ &\"}),(0,e.jsx)(\"br\",{}),(0,e.jsx)(d.code,{children:\".peer[data-checked] ~ &\"})]}),(0,e.jsx)(d.td,{children:\"none\"})]}),(0,e.jsxs)(d.tr,{children:[(0,e.jsx)(d.td,{children:(0,e.jsx)(d.code,{children:\"_groupFocusWithin\"})}),(0,e.jsxs)(d.td,{children:[(0,e.jsx)(d.code,{children:\"[role=group]:focus-within &\"}),(0,e.jsx)(\"br\",{}),(0,e.jsx)(d.code,{children:\"[data-group]:focus-within &\"}),(0,e.jsx)(\"br\",{}),(0,e.jsx)(d.code,{children:\".group:focus-within &\"})]}),(0,e.jsx)(d.td,{children:\"none\"})]}),(0,e.jsxs)(d.tr,{children:[(0,e.jsx)(d.td,{children:(0,e.jsx)(d.code,{children:\"_peerFocusWithin\"})}),(0,e.jsxs)(d.td,{children:[(0,e.jsx)(d.code,{children:\"[data-peer]:focus-within ~ &\"}),(0,e.jsx)(\"br\",{}),(0,e.jsx)(d.code,{children:\".peer:focus-within ~ &\"})]}),(0,e.jsx)(d.td,{children:\"none\"})]}),(0,e.jsxs)(d.tr,{children:[(0,e.jsx)(d.td,{children:(0,e.jsx)(d.code,{children:\"_peerPlaceholderShown\"})}),(0,e.jsxs)(d.td,{children:[(0,e.jsx)(d.code,{children:\"[data-peer]:placeholder-shown ~ &\"}),(0,e.jsx)(\"br\",{}),(0,e.jsx)(d.code,{children:\".peer:placeholder-shown ~ &\"})]}),(0,e.jsx)(d.td,{children:\"none\"})]}),(0,e.jsxs)(d.tr,{children:[(0,e.jsx)(d.td,{children:(0,e.jsx)(d.code,{children:\"_placeholder\"})}),(0,e.jsx)(d.td,{children:(0,e.jsx)(d.code,{children:\"&::placeholder\"})}),(0,e.jsx)(d.td,{children:\"none\"})]}),(0,e.jsxs)(d.tr,{children:[(0,e.jsx)(d.td,{children:(0,e.jsx)(d.code,{children:\"_placeholderShown\"})}),(0,e.jsx)(d.td,{children:(0,e.jsx)(d.code,{children:\"&:placeholder-shown\"})}),(0,e.jsx)(d.td,{children:\"none\"})]}),(0,e.jsxs)(d.tr,{children:[(0,e.jsx)(d.td,{children:(0,e.jsx)(d.code,{children:\"_fullScreen\"})}),(0,e.jsx)(d.td,{children:(0,e.jsx)(d.code,{children:\"&:fullscreen\"})}),(0,e.jsx)(d.td,{children:\"none\"})]}),(0,e.jsxs)(d.tr,{children:[(0,e.jsx)(d.td,{children:(0,e.jsx)(d.code,{children:\"_selection\"})}),(0,e.jsx)(d.td,{children:(0,e.jsx)(d.code,{children:\"&::selection\"})}),(0,e.jsx)(d.td,{children:\"none\"})]}),(0,e.jsxs)(d.tr,{children:[(0,e.jsx)(d.td,{children:(0,e.jsx)(d.code,{children:\"_rtl\"})}),(0,e.jsxs)(d.td,{children:[(0,e.jsx)(d.code,{children:\"[dir=rtl] &\"}),(0,e.jsx)(\"br\",{}),(0,e.jsx)(d.code,{children:\"&[dir=rtl]\"})]}),(0,e.jsx)(d.td,{children:\"none\"})]}),(0,e.jsxs)(d.tr,{children:[(0,e.jsx)(d.td,{children:(0,e.jsx)(d.code,{children:\"_ltr\"})}),(0,e.jsxs)(d.td,{children:[(0,e.jsx)(d.code,{children:\"[dir=ltr] &\"}),(0,e.jsx)(\"br\",{}),(0,e.jsx)(d.code,{children:\"&[dir=ltr]\"})]}),(0,e.jsx)(d.td,{children:\"none\"})]}),(0,e.jsxs)(d.tr,{children:[(0,e.jsx)(d.td,{children:(0,e.jsx)(d.code,{children:\"_mediaDark\"})}),(0,e.jsx)(d.td,{children:(0,e.jsx)(d.code,{children:\"@media (prefers-color-scheme: dark)\"})}),(0,e.jsx)(d.td,{children:\"none\"})]}),(0,e.jsxs)(d.tr,{children:[(0,e.jsx)(d.td,{children:(0,e.jsx)(d.code,{children:\"_mediaReduceMotion\"})}),(0,e.jsx)(d.td,{children:(0,e.jsx)(d.code,{children:\"@media (prefers-reduced-motion: reduce)\"})}),(0,e.jsx)(d.td,{children:\"none\"})]}),(0,e.jsxs)(d.tr,{children:[(0,e.jsx)(d.td,{children:(0,e.jsx)(d.code,{children:\"_dark\"})}),(0,e.jsxs)(d.td,{children:[(0,e.jsx)(d.code,{children:\".incmix-ui-dark &\"}),(0,e.jsx)(\"br\",{}),(0,e.jsx)(d.code,{children:\"[data-theme=dark] &\"}),(0,e.jsx)(\"br\",{}),(0,e.jsx)(d.code,{children:\"&[data-theme=dark]\"})]}),(0,e.jsx)(d.td,{children:\"none\"})]}),(0,e.jsxs)(d.tr,{children:[(0,e.jsx)(d.td,{children:(0,e.jsx)(d.code,{children:\"_light\"})}),(0,e.jsxs)(d.td,{children:[(0,e.jsx)(d.code,{children:\".incmix-ui-light &\"}),(0,e.jsx)(\"br\",{}),(0,e.jsx)(d.code,{children:\"[data-theme=light] &\"}),(0,e.jsx)(\"br\",{}),(0,e.jsx)(d.code,{children:\"&[data-theme=light]\"})]}),(0,e.jsx)(d.td,{children:\"none\"})]})]})]}),`\n`,(0,e.jsx)(d.h3,{id:\"other-props\",children:\"Other Props\"}),`\n`,(0,e.jsx)(d.p,{children:`Asides all the common style props listed above, all component will accept the\nfollowing props:`}),`\n`,(0,e.jsxs)(d.table,{children:[(0,e.jsx)(d.thead,{children:(0,e.jsxs)(d.tr,{children:[(0,e.jsx)(d.th,{children:\"Prop\"}),(0,e.jsx)(d.th,{children:\"CSS Property\"}),(0,e.jsx)(d.th,{children:\"Theme Field\"})]})}),(0,e.jsxs)(d.tbody,{children:[(0,e.jsxs)(d.tr,{children:[(0,e.jsx)(d.td,{children:(0,e.jsx)(d.code,{children:\"animation\"})}),(0,e.jsx)(d.td,{children:(0,e.jsx)(d.code,{children:\"animation\"})}),(0,e.jsx)(d.td,{children:\"none\"})]}),(0,e.jsxs)(d.tr,{children:[(0,e.jsx)(d.td,{children:(0,e.jsx)(d.code,{children:\"appearance\"})}),(0,e.jsx)(d.td,{children:(0,e.jsx)(d.code,{children:\"appearance\"})}),(0,e.jsx)(d.td,{children:\"none\"})]}),(0,e.jsxs)(d.tr,{children:[(0,e.jsx)(d.td,{children:(0,e.jsx)(d.code,{children:\"content\"})}),(0,e.jsx)(d.td,{children:(0,e.jsx)(d.code,{children:\"content\"})}),(0,e.jsx)(d.td,{children:\"none\"})]}),(0,e.jsxs)(d.tr,{children:[(0,e.jsx)(d.td,{children:(0,e.jsx)(d.code,{children:\"transform\"})}),(0,e.jsx)(d.td,{children:(0,e.jsx)(d.code,{children:\"transform\"})}),(0,e.jsx)(d.td,{children:\"none\"})]}),(0,e.jsxs)(d.tr,{children:[(0,e.jsx)(d.td,{children:(0,e.jsx)(d.code,{children:\"transformOrigin\"})}),(0,e.jsx)(d.td,{children:(0,e.jsx)(d.code,{children:\"transform-origin\"})}),(0,e.jsx)(d.td,{children:\"none\"})]}),(0,e.jsxs)(d.tr,{children:[(0,e.jsx)(d.td,{children:(0,e.jsx)(d.code,{children:\"visibility\"})}),(0,e.jsx)(d.td,{children:(0,e.jsx)(d.code,{children:\"visibility\"})}),(0,e.jsx)(d.td,{children:\"none\"})]}),(0,e.jsxs)(d.tr,{children:[(0,e.jsx)(d.td,{children:(0,e.jsx)(d.code,{children:\"whiteSpace\"})}),(0,e.jsx)(d.td,{children:(0,e.jsx)(d.code,{children:\"white-space\"})}),(0,e.jsx)(d.td,{children:\"none\"})]}),(0,e.jsxs)(d.tr,{children:[(0,e.jsx)(d.td,{children:(0,e.jsx)(d.code,{children:\"userSelect\"})}),(0,e.jsx)(d.td,{children:(0,e.jsx)(d.code,{children:\"user-select\"})}),(0,e.jsx)(d.td,{children:\"none\"})]}),(0,e.jsxs)(d.tr,{children:[(0,e.jsx)(d.td,{children:(0,e.jsx)(d.code,{children:\"pointerEvents\"})}),(0,e.jsx)(d.td,{children:(0,e.jsx)(d.code,{children:\"pointer-events\"})}),(0,e.jsx)(d.td,{children:\"none\"})]}),(0,e.jsxs)(d.tr,{children:[(0,e.jsx)(d.td,{children:(0,e.jsx)(d.code,{children:\"wordBreak\"})}),(0,e.jsx)(d.td,{children:(0,e.jsx)(d.code,{children:\"word-break\"})}),(0,e.jsx)(d.td,{children:\"none\"})]}),(0,e.jsxs)(d.tr,{children:[(0,e.jsx)(d.td,{children:(0,e.jsx)(d.code,{children:\"overflowWrap\"})}),(0,e.jsx)(d.td,{children:(0,e.jsx)(d.code,{children:\"overflow-wrap\"})}),(0,e.jsx)(d.td,{children:\"none\"})]}),(0,e.jsxs)(d.tr,{children:[(0,e.jsx)(d.td,{children:(0,e.jsx)(d.code,{children:\"textOverflow\"})}),(0,e.jsx)(d.td,{children:(0,e.jsx)(d.code,{children:\"text-overflow\"})}),(0,e.jsx)(d.td,{children:\"none\"})]}),(0,e.jsxs)(d.tr,{children:[(0,e.jsx)(d.td,{children:(0,e.jsx)(d.code,{children:\"boxSizing\"})}),(0,e.jsx)(d.td,{children:(0,e.jsx)(d.code,{children:\"box-sizing\"})}),(0,e.jsx)(d.td,{children:\"none\"})]}),(0,e.jsxs)(d.tr,{children:[(0,e.jsx)(d.td,{children:(0,e.jsx)(d.code,{children:\"cursor\"})}),(0,e.jsx)(d.td,{children:(0,e.jsx)(d.code,{children:\"cursor\"})}),(0,e.jsx)(d.td,{children:\"none\"})]}),(0,e.jsxs)(d.tr,{children:[(0,e.jsx)(d.td,{children:(0,e.jsx)(d.code,{children:\"resize\"})}),(0,e.jsx)(d.td,{children:(0,e.jsx)(d.code,{children:\"resize\"})}),(0,e.jsx)(d.td,{children:\"none\"})]}),(0,e.jsxs)(d.tr,{children:[(0,e.jsx)(d.td,{children:(0,e.jsx)(d.code,{children:\"transition\"})}),(0,e.jsx)(d.td,{children:(0,e.jsx)(d.code,{children:\"transition\"})}),(0,e.jsx)(d.td,{children:\"none\"})]}),(0,e.jsxs)(d.tr,{children:[(0,e.jsx)(d.td,{children:(0,e.jsx)(d.code,{children:\"objectFit\"})}),(0,e.jsx)(d.td,{children:(0,e.jsx)(d.code,{children:\"object-fit\"})}),(0,e.jsx)(d.td,{children:\"none\"})]}),(0,e.jsxs)(d.tr,{children:[(0,e.jsx)(d.td,{children:(0,e.jsx)(d.code,{children:\"objectPosition\"})}),(0,e.jsx)(d.td,{children:(0,e.jsx)(d.code,{children:\"object-position\"})}),(0,e.jsx)(d.td,{children:\"none\"})]}),(0,e.jsxs)(d.tr,{children:[(0,e.jsx)(d.td,{children:(0,e.jsx)(d.code,{children:\"float\"})}),(0,e.jsx)(d.td,{children:(0,e.jsx)(d.code,{children:\"float\"})}),(0,e.jsx)(d.td,{children:\"none\"})]}),(0,e.jsxs)(d.tr,{children:[(0,e.jsx)(d.td,{children:(0,e.jsx)(d.code,{children:\"fill\"})}),(0,e.jsx)(d.td,{children:(0,e.jsx)(d.code,{children:\"fill\"})}),(0,e.jsx)(d.td,{children:(0,e.jsx)(d.code,{children:\"colors\"})})]}),(0,e.jsxs)(d.tr,{children:[(0,e.jsx)(d.td,{children:(0,e.jsx)(d.code,{children:\"stroke\"})}),(0,e.jsx)(d.td,{children:(0,e.jsx)(d.code,{children:\"stroke\"})}),(0,e.jsx)(d.td,{children:(0,e.jsx)(d.code,{children:\"colors\"})})]}),(0,e.jsxs)(d.tr,{children:[(0,e.jsx)(d.td,{children:(0,e.jsx)(d.code,{children:\"outline\"})}),(0,e.jsx)(d.td,{children:(0,e.jsx)(d.code,{children:\"outline\"})}),(0,e.jsx)(d.td,{children:\"none\"})]})]})]}),`\n`,(0,e.jsxs)(d.h2,{id:\"the-as-prop\",children:[\"The \",(0,e.jsx)(d.code,{children:\"as\"}),\" prop\"]}),`\n`,(0,e.jsxs)(d.p,{children:[\"The \",(0,e.jsx)(d.code,{children:\"as\"}),` prop is a feature in all of our components that allows you to pass an\nHTML tag or component to be rendered.`]}),`\n`,(0,e.jsxs)(d.p,{children:[\"For example, say you are using a \",(0,e.jsx)(d.code,{children:\"Button\"}),` component, and you need to make it a\nlink instead. You can compose `,(0,e.jsx)(d.code,{children:\"a\"}),\" and \",(0,e.jsx)(d.code,{children:\"Button\"}),\" like this:\"]}),`\n`,(0,e.jsx)(d.pre,{children:(0,e.jsx)(d.code,{className:\"language-jsx\",children:`<Button as=\"a\" target=\"_blank\" variant=\"outline\" href=\"https://incmix-ui.com\">\n  Hello\n</Button>\n`})}),`\n`,(0,e.jsxs)(d.p,{children:[\"This allows you to use all of the \",(0,e.jsx)(d.code,{children:\"Button\"}),\" props and all of the \",(0,e.jsx)(d.code,{children:\"a\"}),` props\nwithout having to wrap the Button in an `,(0,e.jsx)(d.code,{children:\"a\"}),\" component.\"]})]})}function B(r={}){let{wrapper:d}=r.components||{};return d?(0,e.jsx)(d,Object.assign({},r,{children:(0,e.jsx)(a,r)})):a(r)}var v=B;return y(S);})();\n;return Component;"
    },
    "_id": "docs/styled-system/style-props.mdx",
    "_raw": {
      "sourceFilePath": "docs/styled-system/style-props.mdx",
      "sourceFileName": "style-props.mdx",
      "sourceFileDir": "docs/styled-system",
      "contentType": "mdx",
      "flattenedPath": "docs/styled-system/style-props"
    },
    "type": "Doc",
    "slug": "/docs/styled-system/style-props",
    "frontMatter": {
      "title": "Style Props",
      "description": "Learn how to use style props in Incmix UI. Style props are a way to alter the style of a component by simply passing props to it",
      "slug": "/docs/styled-system/style-props",
      "editUrl": "https://github.com/incmix-ui/incmix-ui-docs/tree/main/content/docs/styled-system/style-props.mdx",
      "headings": [
        {
          "text": "Reference",
          "id": "reference",
          "level": "h2"
        },
        {
          "text": "Margin and padding",
          "id": "margin-and-padding",
          "level": "h3"
        },
        {
          "text": "Color and background color",
          "id": "color-and-background-color",
          "level": "h3"
        },
        {
          "text": "Gradient",
          "id": "gradient",
          "level": "h3"
        },
        {
          "text": "Typography",
          "id": "typography",
          "level": "h3"
        },
        {
          "text": "Layout, width and height",
          "id": "layout-width-and-height",
          "level": "h3"
        },
        {
          "text": "Flexbox",
          "id": "flexbox",
          "level": "h3"
        },
        {
          "text": "Grid Layout",
          "id": "grid-layout",
          "level": "h3"
        },
        {
          "text": "Background",
          "id": "background",
          "level": "h3"
        },
        {
          "text": "Borders",
          "id": "borders",
          "level": "h3"
        },
        {
          "text": "Border Radius",
          "id": "border-radius",
          "level": "h3"
        },
        {
          "text": "Position",
          "id": "position",
          "level": "h3"
        },
        {
          "text": "Shadow",
          "id": "shadow",
          "level": "h3"
        },
        {
          "text": "Filter",
          "id": "filter",
          "level": "h3"
        },
        {
          "text": "Pseudo",
          "id": "pseudo",
          "level": "h3"
        },
        {
          "text": "Other Props",
          "id": "other-props",
          "level": "h3"
        },
        {
          "text": "The `as` prop",
          "id": "the-as-prop",
          "level": "h2"
        }
      ]
    }
  },
  {
    "title": "Text and Layer Styles",
    "description": "Learn how to use style props in Incmix UI. Style props are a way to alter the style of a component by simply passing props to it",
    "scope": "usage",
    "category": "features",
    "body": {
      "raw": "\nIn most projects you might find yourself repeating specific text properties\n(font size, font weight, line height) or layer properties (bg, color, shadow).\nThis can be painful as your project grows in size.\n\nUsing `textStyle` and `layerStyle` props can help you keep things organized and\nconsistent.\n\n## Layer Styles\n\nLayer Styles allow you to save a combination of styling attributes to re-use in\nother components. Once created, pass the `layerStyle` prop to any component and\nincmix will resolve the styles accordingly.\n\nProperties defined in a layer style\n\n- Color or text color\n- Background color\n- Border width and border color\n- Box shadow\n- Opacity\n\n```jsx live=false\n// 1. Import `extendTheme`\nimport { extendTheme } from '@incmix-ui/react'\n\n// 2. Extend the theme with new layer styles\nconst theme = extendTheme({\n  layerStyles: {\n    base: {\n      bg: 'gray.50',\n      border: '2px solid',\n      borderColor: 'gray.500',\n    },\n    selected: {\n      bg: 'teal.500',\n      color: 'teal.700',\n      borderColor: 'orange.500',\n    },\n  },\n})\n\n// 3. Consume the text styles in your components\nfunction Example() {\n  return <Box layerStyle=\"selected\">This is a box</Box>\n}\n\n// 4. You can also switch layer styles\nfunction Example({ isSelected }) {\n  const layerStyle = isSelected ? 'selected' : 'base'\n  return <Box layerStyle={layerStyle}>This is a box</Box>\n}\n```\n\n> Layer Styles will not override variant styling.\n\n## Text Styles\n\nTypography forms the core of any product just as much as colors and components\ndo. As a result, you'll need to establish styles for consistent, legible\ntypography early in the process of creating your product or design system.\n\nThe text styles functionality in Incmix makes it easy to repeatably apply a\ncollection of text properties (like line height and size) to any component.\n\nYou can put these styles in the theme under the `textStyles` key to make easy to\nre-use in the future.\n\nProperties defined in a text style\n\n- Font family, weight, and size\n- Line height\n- Letter spacing\n- Text decoration (strikethrough and underline)\n- Text transform (uppercase, lowercase, and capitalization)\n\n```jsx live=false\n// 1. Import `extendTheme`\nimport { extendTheme } from '@incmix-ui/react'\n\n// 2. Define the new text styles\nconst theme = extendTheme({\n  textStyles: {\n    h1: {\n      // you can also use responsive styles\n      fontSize: ['48px', '72px'],\n      fontWeight: 'bold',\n      lineHeight: '110%',\n      letterSpacing: '-2%',\n    },\n    h2: {\n      fontSize: ['36px', '48px'],\n      fontWeight: 'semibold',\n      lineHeight: '110%',\n      letterSpacing: '-1%',\n    },\n  },\n})\n\n// 3. Consume the text styles in your component\nfunction Example() {\n  return <Box textStyle=\"h1\">This is a box</Box>\n}\n```\n\n### Naming text styles\n\nIn practice, we recommend using the same text style names used by designers on\nyour team. Here are common ideas on how to name text styles:\n\n- Sized-based naming system (`xs`, `sm`, `md`, `lg`, `xl`)\n- Semantic naming system that corresponds to respective html tags in production\n  (`caption`, `paragraph`, `h1`, `h2`)\n- Descriptive or functional naming system that explains the style's intended use\n  (`alert`, `modal-header`, `button-label`)\n",
      "code": "var Component=(()=>{var h=Object.create;var r=Object.defineProperty;var y=Object.getOwnPropertyDescriptor;var p=Object.getOwnPropertyNames;var m=Object.getPrototypeOf,u=Object.prototype.hasOwnProperty;var x=(t,e)=>()=>(e||t((e={exports:{}}).exports,e),e.exports),g=(t,e)=>{for(var o in e)r(t,o,{get:e[o],enumerable:!0})},s=(t,e,o,l)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let i of p(e))!u.call(t,i)&&i!==o&&r(t,i,{get:()=>e[i],enumerable:!(l=y(e,i))||l.enumerable});return t};var f=(t,e,o)=>(o=t!=null?h(m(t)):{},s(e||!t||!t.__esModule?r(o,\"default\",{value:t,enumerable:!0}):o,t)),b=t=>s(r({},\"__esModule\",{value:!0}),t);var a=x((v,c)=>{c.exports=_jsx_runtime});var j={};g(j,{default:()=>T,frontmatter:()=>S});var n=f(a()),S={title:\"Text and Layer Styles\",description:\"Learn how to use style props in Incmix UI. Style props are a way to alter the style of a component by simply passing props to it\",category:\"features\"};function d(t){let e=Object.assign({p:\"p\",code:\"code\",h2:\"h2\",ul:\"ul\",li:\"li\",pre:\"pre\",blockquote:\"blockquote\",h3:\"h3\"},t.components);return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(e.p,{children:`In most projects you might find yourself repeating specific text properties\n(font size, font weight, line height) or layer properties (bg, color, shadow).\nThis can be painful as your project grows in size.`}),`\n`,(0,n.jsxs)(e.p,{children:[\"Using \",(0,n.jsx)(e.code,{children:\"textStyle\"}),\" and \",(0,n.jsx)(e.code,{children:\"layerStyle\"}),` props can help you keep things organized and\nconsistent.`]}),`\n`,(0,n.jsx)(e.h2,{id:\"layer-styles\",children:\"Layer Styles\"}),`\n`,(0,n.jsxs)(e.p,{children:[`Layer Styles allow you to save a combination of styling attributes to re-use in\nother components. Once created, pass the `,(0,n.jsx)(e.code,{children:\"layerStyle\"}),` prop to any component and\nincmix will resolve the styles accordingly.`]}),`\n`,(0,n.jsx)(e.p,{children:\"Properties defined in a layer style\"}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsx)(e.li,{children:\"Color or text color\"}),`\n`,(0,n.jsx)(e.li,{children:\"Background color\"}),`\n`,(0,n.jsx)(e.li,{children:\"Border width and border color\"}),`\n`,(0,n.jsx)(e.li,{children:\"Box shadow\"}),`\n`,(0,n.jsx)(e.li,{children:\"Opacity\"}),`\n`]}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-jsx\",live:\"false\",children:`// 1. Import \\`extendTheme\\`\nimport { extendTheme } from '@incmix-ui/react'\n\n// 2. Extend the theme with new layer styles\nconst theme = extendTheme({\n  layerStyles: {\n    base: {\n      bg: 'gray.50',\n      border: '2px solid',\n      borderColor: 'gray.500',\n    },\n    selected: {\n      bg: 'teal.500',\n      color: 'teal.700',\n      borderColor: 'orange.500',\n    },\n  },\n})\n\n// 3. Consume the text styles in your components\nfunction Example() {\n  return <Box layerStyle=\"selected\">This is a box</Box>\n}\n\n// 4. You can also switch layer styles\nfunction Example({ isSelected }) {\n  const layerStyle = isSelected ? 'selected' : 'base'\n  return <Box layerStyle={layerStyle}>This is a box</Box>\n}\n`})}),`\n`,(0,n.jsxs)(e.blockquote,{children:[`\n`,(0,n.jsx)(e.p,{children:\"Layer Styles will not override variant styling.\"}),`\n`]}),`\n`,(0,n.jsx)(e.h2,{id:\"text-styles\",children:\"Text Styles\"}),`\n`,(0,n.jsx)(e.p,{children:`Typography forms the core of any product just as much as colors and components\ndo. As a result, you'll need to establish styles for consistent, legible\ntypography early in the process of creating your product or design system.`}),`\n`,(0,n.jsx)(e.p,{children:`The text styles functionality in Incmix makes it easy to repeatably apply a\ncollection of text properties (like line height and size) to any component.`}),`\n`,(0,n.jsxs)(e.p,{children:[\"You can put these styles in the theme under the \",(0,n.jsx)(e.code,{children:\"textStyles\"}),` key to make easy to\nre-use in the future.`]}),`\n`,(0,n.jsx)(e.p,{children:\"Properties defined in a text style\"}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsx)(e.li,{children:\"Font family, weight, and size\"}),`\n`,(0,n.jsx)(e.li,{children:\"Line height\"}),`\n`,(0,n.jsx)(e.li,{children:\"Letter spacing\"}),`\n`,(0,n.jsx)(e.li,{children:\"Text decoration (strikethrough and underline)\"}),`\n`,(0,n.jsx)(e.li,{children:\"Text transform (uppercase, lowercase, and capitalization)\"}),`\n`]}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-jsx\",live:\"false\",children:`// 1. Import \\`extendTheme\\`\nimport { extendTheme } from '@incmix-ui/react'\n\n// 2. Define the new text styles\nconst theme = extendTheme({\n  textStyles: {\n    h1: {\n      // you can also use responsive styles\n      fontSize: ['48px', '72px'],\n      fontWeight: 'bold',\n      lineHeight: '110%',\n      letterSpacing: '-2%',\n    },\n    h2: {\n      fontSize: ['36px', '48px'],\n      fontWeight: 'semibold',\n      lineHeight: '110%',\n      letterSpacing: '-1%',\n    },\n  },\n})\n\n// 3. Consume the text styles in your component\nfunction Example() {\n  return <Box textStyle=\"h1\">This is a box</Box>\n}\n`})}),`\n`,(0,n.jsx)(e.h3,{id:\"naming-text-styles\",children:\"Naming text styles\"}),`\n`,(0,n.jsx)(e.p,{children:`In practice, we recommend using the same text style names used by designers on\nyour team. Here are common ideas on how to name text styles:`}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsxs)(e.li,{children:[\"Sized-based naming system (\",(0,n.jsx)(e.code,{children:\"xs\"}),\", \",(0,n.jsx)(e.code,{children:\"sm\"}),\", \",(0,n.jsx)(e.code,{children:\"md\"}),\", \",(0,n.jsx)(e.code,{children:\"lg\"}),\", \",(0,n.jsx)(e.code,{children:\"xl\"}),\")\"]}),`\n`,(0,n.jsxs)(e.li,{children:[`Semantic naming system that corresponds to respective html tags in production\n(`,(0,n.jsx)(e.code,{children:\"caption\"}),\", \",(0,n.jsx)(e.code,{children:\"paragraph\"}),\", \",(0,n.jsx)(e.code,{children:\"h1\"}),\", \",(0,n.jsx)(e.code,{children:\"h2\"}),\")\"]}),`\n`,(0,n.jsxs)(e.li,{children:[`Descriptive or functional naming system that explains the style's intended use\n(`,(0,n.jsx)(e.code,{children:\"alert\"}),\", \",(0,n.jsx)(e.code,{children:\"modal-header\"}),\", \",(0,n.jsx)(e.code,{children:\"button-label\"}),\")\"]}),`\n`]})]})}function w(t={}){let{wrapper:e}=t.components||{};return e?(0,n.jsx)(e,Object.assign({},t,{children:(0,n.jsx)(d,t)})):d(t)}var T=w;return b(j);})();\n;return Component;"
    },
    "_id": "docs/styled-system/text-and-layer-styles.mdx",
    "_raw": {
      "sourceFilePath": "docs/styled-system/text-and-layer-styles.mdx",
      "sourceFileName": "text-and-layer-styles.mdx",
      "sourceFileDir": "docs/styled-system",
      "contentType": "mdx",
      "flattenedPath": "docs/styled-system/text-and-layer-styles"
    },
    "type": "Doc",
    "slug": "/docs/styled-system/text-and-layer-styles",
    "frontMatter": {
      "title": "Text and Layer Styles",
      "description": "Learn how to use style props in Incmix UI. Style props are a way to alter the style of a component by simply passing props to it",
      "slug": "/docs/styled-system/text-and-layer-styles",
      "editUrl": "https://github.com/incmix-ui/incmix-ui-docs/tree/main/content/docs/styled-system/text-and-layer-styles.mdx",
      "headings": [
        {
          "text": "Layer Styles",
          "id": "layer-styles",
          "level": "h2"
        },
        {
          "text": "Text Styles",
          "id": "text-styles",
          "level": "h2"
        },
        {
          "text": "Naming text styles",
          "id": "naming-text-styles",
          "level": "h3"
        }
      ]
    }
  },
  {
    "title": "The `sx` Prop",
    "description": "The sx prop lets you style components inline, using your theme tokens.",
    "scope": "usage",
    "category": "features",
    "body": {
      "raw": "\nWith `sx` you can provide any valid CSS to an element and utilize tokens from\nyour theme to ensure consistency and that you are utilizing constraint-based\ndesign principles when styling your application.\n\nThis prop provides a superset of CSS (contains all CSS properties/selectors in\naddition to custom ones) that maps values directly from the theme, depending on\nthe CSS property used. Also, it allows a simple way of defining responsive\nvalues that correspond to the breakpoints defined in the theme.\n\nTo find out which properties are theme-aware, see the\n[Style Props](/docs/styled-system/style-props).\n\n## Use cases\n\nAlthough the `sx` prop is considered an escape hatch, there are few cases where\nit is needed.\n\n### Defining Any Standard CSS Property\n\nIn case you need to set a CSS property that is not listed in the\n[Style Props](/docs/styled-system/style-props) list, you can use the\n`sx` prop and pass it whatever CSS property you desire.\n\nOne such example is the `filter` property:\n\n```jsx\n<Image src=\"http://placekitten.com/200/300\" alt=\"a kitten\" sx={{ filter: 'blur(8px)' }} />\n```\n\n### Defining CSS Custom Properties\n\nCustom CSS properties can be defined via the `sx` prop as well:\n\n```jsx\n<Box sx={{ '--my-color': '#53c8c4' }}>\n  <Heading color=\"var(--my-color)\" size=\"lg\">\n    This uses CSS Custom Properties!\n  </Heading>\n</Box>\n```\n\n### Creating Nested Selectors\n\nTo create complex, nested selectors, you can use utilize the `&` operator. The\n`&` in selector will get resolved to unique `className` that is assigned the\ncomponent you put `sx` on.\n\n> For the following example you could also use the\n> [`_groupHover` shorthand prop](/docs/styled-system/style-props#pseudo).\n\n```jsx\n<Box borderWidth={2} borderColor=\"purple.500\" p={5} className=\"my-box\">\n  <Heading size=\"lg\">\n    Hover the box...\n    <Box\n      as=\"span\"\n      color=\"red.500\"\n      sx={{\n        '.my-box:hover &': {\n          color: 'green.500',\n        },\n      }}\n    >\n      And I will turn green!\n    </Box>\n  </Heading>\n</Box>\n```\n\n### Custom Media queries\n\n```jsx\n<Box\n  sx={{\n    '@media print': {\n      display: 'none',\n    },\n  }}\n>\n  This text won't be shown when printing this page.\n</Box>\n```\n",
      "code": "var Component=(()=>{var h=Object.create;var r=Object.defineProperty;var p=Object.getOwnPropertyDescriptor;var u=Object.getOwnPropertyNames;var m=Object.getPrototypeOf,y=Object.prototype.hasOwnProperty;var g=(s,e)=>()=>(e||s((e={exports:{}}).exports,e),e.exports),x=(s,e)=>{for(var o in e)r(s,o,{get:e[o],enumerable:!0})},c=(s,e,o,i)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let t of u(e))!y.call(s,t)&&t!==o&&r(s,t,{get:()=>e[t],enumerable:!(i=p(e,t))||i.enumerable});return s};var f=(s,e,o)=>(o=s!=null?h(m(s)):{},c(e||!s||!s.__esModule?r(o,\"default\",{value:s,enumerable:!0}):o,s)),S=s=>c(r({},\"__esModule\",{value:!0}),s);var l=g((k,d)=>{d.exports=_jsx_runtime});var v={};x(v,{default:()=>b,frontmatter:()=>C});var n=f(l()),C={title:\"The `sx` Prop\",description:\"The sx prop lets you style components inline, using your theme tokens.\",category:\"features\"};function a(s){let e=Object.assign({p:\"p\",code:\"code\",a:\"a\",h2:\"h2\",h3:\"h3\",pre:\"pre\",blockquote:\"blockquote\"},s.components);return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsxs)(e.p,{children:[\"With \",(0,n.jsx)(e.code,{children:\"sx\"}),` you can provide any valid CSS to an element and utilize tokens from\nyour theme to ensure consistency and that you are utilizing constraint-based\ndesign principles when styling your application.`]}),`\n`,(0,n.jsx)(e.p,{children:`This prop provides a superset of CSS (contains all CSS properties/selectors in\naddition to custom ones) that maps values directly from the theme, depending on\nthe CSS property used. Also, it allows a simple way of defining responsive\nvalues that correspond to the breakpoints defined in the theme.`}),`\n`,(0,n.jsxs)(e.p,{children:[`To find out which properties are theme-aware, see the\n`,(0,n.jsx)(e.a,{href:\"/docs/styled-system/style-props\",children:\"Style Props\"}),\".\"]}),`\n`,(0,n.jsx)(e.h2,{id:\"use-cases\",children:\"Use cases\"}),`\n`,(0,n.jsxs)(e.p,{children:[\"Although the \",(0,n.jsx)(e.code,{children:\"sx\"}),` prop is considered an escape hatch, there are few cases where\nit is needed.`]}),`\n`,(0,n.jsx)(e.h3,{id:\"defining-any-standard-css-property\",children:\"Defining Any Standard CSS Property\"}),`\n`,(0,n.jsxs)(e.p,{children:[`In case you need to set a CSS property that is not listed in the\n`,(0,n.jsx)(e.a,{href:\"/docs/styled-system/style-props\",children:\"Style Props\"}),` list, you can use the\n`,(0,n.jsx)(e.code,{children:\"sx\"}),\" prop and pass it whatever CSS property you desire.\"]}),`\n`,(0,n.jsxs)(e.p,{children:[\"One such example is the \",(0,n.jsx)(e.code,{children:\"filter\"}),\" property:\"]}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-jsx\",children:`<Image src=\"http://placekitten.com/200/300\" alt=\"a kitten\" sx={{ filter: 'blur(8px)' }} />\n`})}),`\n`,(0,n.jsx)(e.h3,{id:\"defining-css-custom-properties\",children:\"Defining CSS Custom Properties\"}),`\n`,(0,n.jsxs)(e.p,{children:[\"Custom CSS properties can be defined via the \",(0,n.jsx)(e.code,{children:\"sx\"}),\" prop as well:\"]}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-jsx\",children:`<Box sx={{ '--my-color': '#53c8c4' }}>\n  <Heading color=\"var(--my-color)\" size=\"lg\">\n    This uses CSS Custom Properties!\n  </Heading>\n</Box>\n`})}),`\n`,(0,n.jsx)(e.h3,{id:\"creating-nested-selectors\",children:\"Creating Nested Selectors\"}),`\n`,(0,n.jsxs)(e.p,{children:[\"To create complex, nested selectors, you can use utilize the \",(0,n.jsx)(e.code,{children:\"&\"}),` operator. The\n`,(0,n.jsx)(e.code,{children:\"&\"}),\" in selector will get resolved to unique \",(0,n.jsx)(e.code,{children:\"className\"}),` that is assigned the\ncomponent you put `,(0,n.jsx)(e.code,{children:\"sx\"}),\" on.\"]}),`\n`,(0,n.jsxs)(e.blockquote,{children:[`\n`,(0,n.jsxs)(e.p,{children:[`For the following example you could also use the\n`,(0,n.jsxs)(e.a,{href:\"/docs/styled-system/style-props#pseudo\",children:[(0,n.jsx)(e.code,{children:\"_groupHover\"}),\" shorthand prop\"]}),\".\"]}),`\n`]}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-jsx\",children:`<Box borderWidth={2} borderColor=\"purple.500\" p={5} className=\"my-box\">\n  <Heading size=\"lg\">\n    Hover the box...\n    <Box\n      as=\"span\"\n      color=\"red.500\"\n      sx={{\n        '.my-box:hover &': {\n          color: 'green.500',\n        },\n      }}\n    >\n      And I will turn green!\n    </Box>\n  </Heading>\n</Box>\n`})}),`\n`,(0,n.jsx)(e.h3,{id:\"custom-media-queries\",children:\"Custom Media queries\"}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-jsx\",children:`<Box\n  sx={{\n    '@media print': {\n      display: 'none',\n    },\n  }}\n>\n  This text won't be shown when printing this page.\n</Box>\n`})})]})}function w(s={}){let{wrapper:e}=s.components||{};return e?(0,n.jsx)(e,Object.assign({},s,{children:(0,n.jsx)(a,s)})):a(s)}var b=w;return S(v);})();\n;return Component;"
    },
    "_id": "docs/styled-system/the-sx-prop.mdx",
    "_raw": {
      "sourceFilePath": "docs/styled-system/the-sx-prop.mdx",
      "sourceFileName": "the-sx-prop.mdx",
      "sourceFileDir": "docs/styled-system",
      "contentType": "mdx",
      "flattenedPath": "docs/styled-system/the-sx-prop"
    },
    "type": "Doc",
    "slug": "/docs/styled-system/the-sx-prop",
    "frontMatter": {
      "title": "The `sx` Prop",
      "description": "The sx prop lets you style components inline, using your theme tokens.",
      "slug": "/docs/styled-system/the-sx-prop",
      "editUrl": "https://github.com/incmix-ui/incmix-ui-docs/tree/main/content/docs/styled-system/the-sx-prop.mdx",
      "headings": [
        {
          "text": "Use cases",
          "id": "use-cases",
          "level": "h2"
        },
        {
          "text": "Defining Any Standard CSS Property",
          "id": "defining-any-standard-css-property",
          "level": "h3"
        },
        {
          "text": "Defining CSS Custom Properties",
          "id": "defining-css-custom-properties",
          "level": "h3"
        },
        {
          "text": "Creating Nested Selectors",
          "id": "creating-nested-selectors",
          "level": "h3"
        },
        {
          "text": "Custom Media queries",
          "id": "custom-media-queries",
          "level": "h3"
        }
      ]
    }
  },
  {
    "title": "Default Theme",
    "description": "The default incmix theme tokens",
    "scope": "usage",
    "category": "theming",
    "body": {
      "raw": "\nThe theme object is where you define your application's color palette, type\nscale, font stacks, breakpoints, border radius values, and more.\n\nTheming with Incmix UI is based on the\n[Styled System Theme Specification](https://styled-system.com/theme-specification/)\n\n<br></br>\n<ComponentLinks github={{ package: 'theme' }} npm={{ package: '@incmix-ui/theme' }} />\n\n## Colors\n\nAdd a `theme.colors` object to provide colors for your project. By default these\ncolors can be referenced by the `color`, `borderColor`, `backgroundColor`,\n`fill`, `stroke`, styles.\n\nWe recommend adding a palette that ranges from `50` to `900`. Tools like\n[Themera](https://themera.vercel.app/),\n[Smart Swatch](https://smart-swatch.netlify.app/),\n[Coolors](https://coolors.co/app) or [Palx](https://palx.jxnblk.com) are\navailable to generate these palettes.\n\n```js\n// theme.js\nexport default {\n  colors: {\n    transparent: 'transparent',\n    black: '#000',\n    white: '#fff',\n    gray: {\n      50: '#f7fafc',\n      // ...\n      900: '#171923',\n    },\n    // ...\n  },\n}\n```\n\nIncmix provides a sensible\n[default theme](https://github.com/incmix-ui/incmix-ui/tree/main/packages/components/theme)\ninspired by Tailwind CSS, but you can customize it to fit your design.\n\n### Black & White\n\n<ColorWrapper>\n  <ColorPalette color=\"black\" name=\"Black\" />\n  <ColorPalette color=\"white\" name=\"White\" />\n  <div />\n</ColorWrapper>\n\n### Alphas\n\n> Note: Toggle the site's color mode to see the change in the whiteAlpha colors.\n\n<ColorWrapper>\n  <ColorPalettes color=\"blackAlpha\" />\n  <ColorPalettes color=\"whiteAlpha\" />\n</ColorWrapper>\n\n### Gray\n\n<ColorWrapper>\n  <ColorPalettes color=\"gray\" />\n</ColorWrapper>\n\n### Red\n\n<ColorWrapper>\n  <ColorPalettes color=\"red\" />\n</ColorWrapper>\n\n### Orange\n\n<ColorWrapper>\n  <ColorPalettes color=\"orange\" />\n</ColorWrapper>\n\n### Yellow\n\n<ColorWrapper>\n  <ColorPalettes color=\"yellow\" />\n</ColorWrapper>\n\n### Green\n\n<ColorWrapper>\n  <ColorPalettes color=\"green\" />\n</ColorWrapper>\n\n### Teal\n\n<ColorWrapper>\n  <ColorPalettes color=\"teal\" />\n</ColorWrapper>\n\n### Blue\n\n<ColorWrapper>\n  <ColorPalettes color=\"blue\" />\n</ColorWrapper>\n\n### Cyan\n\n<ColorWrapper>\n  <ColorPalettes color=\"cyan\" />\n</ColorWrapper>\n\n### Purple\n\n<ColorWrapper>\n  <ColorPalettes color=\"purple\" />\n</ColorWrapper>\n\n### Pink\n\n<ColorWrapper>\n  <ColorPalettes color=\"pink\" />\n</ColorWrapper>\n\n## Typography\n\nTo manage Typography options, the theme object supports the following keys:\n\n- `fonts` (font families)\n- `fontSizes`\n- `fontWeights`\n- `lineHeights`\n- `letterSpacings`\n\n```js\nimport { extendTheme } from '@incmix-ui/react'\n\n// example theme\nconst theme = extendTheme({\n  colors: {...},\n  fonts: {\n    body: \"system-ui, sans-serif\",\n    heading: \"Georgia, serif\",\n    mono: \"Menlo, monospace\",\n  },\n  fontSizes: {\n    xs: \"0.75rem\",\n    sm: \"0.875rem\",\n    md: \"1rem\",\n    lg: \"1.125rem\",\n    xl: \"1.25rem\",\n    \"2xl\": \"1.5rem\",\n    \"3xl\": \"1.875rem\",\n    \"4xl\": \"2.25rem\",\n    \"5xl\": \"3rem\",\n    \"6xl\": \"3.75rem\",\n    \"7xl\": \"4.5rem\",\n    \"8xl\": \"6rem\",\n    \"9xl\": \"8rem\",\n  },\n  fontWeights: {\n    hairline: 100,\n    thin: 200,\n    light: 300,\n    normal: 400,\n    medium: 500,\n    semibold: 600,\n    bold: 700,\n    extrabold: 800,\n    black: 900,\n  },\n  lineHeights: {\n    normal: \"normal\",\n    none: 1,\n    shorter: 1.25,\n    short: 1.375,\n    base: 1.5,\n    tall: 1.625,\n    taller: \"2\",\n    \"3\": \".75rem\",\n    \"4\": \"1rem\",\n    \"5\": \"1.25rem\",\n    \"6\": \"1.5rem\",\n    \"7\": \"1.75rem\",\n    \"8\": \"2rem\",\n    \"9\": \"2.25rem\",\n    \"10\": \"2.5rem\",\n  },\n  letterSpacings: {\n    tighter: \"-0.05em\",\n    tight: \"-0.025em\",\n    normal: \"0\",\n    wide: \"0.025em\",\n    wider: \"0.05em\",\n    widest: \"0.1em\",\n  },\n});\n```\n\n## Breakpoints\n\nIncmix UI comes with a predefined set of commonly used breakpoints.\n\n> Learn more about\n> [Responsive Styles and Customizing Breakpoints](/docs/styled-system/responsive-styles).\n\n```js\nimport { extendTheme } from '@incmix-ui/react'\n\nconst breakpoints = {\n  sm: '30em',\n  md: '48em',\n  lg: '62em',\n  xl: '80em',\n  '2xl': '96em',\n}\n\nconst theme = extendTheme({ breakpoints, ... })\n```\n\n## Spacing\n\nThe `space` key allows you to customize the global spacing and sizing scale for\nyour project. By default these spacing value can be referenced by the `padding`,\n`margin`, and `top`, `left`, `right`, `bottom` styles.\n\n```js\nimport { extendTheme } from '@incmix-ui/react'\n\nconst spacing = {\n  space: {\n    px: '1px',\n    0.5: '0.125rem',\n    1: '0.25rem',\n    1.5: '0.375rem',\n    2: '0.5rem',\n    2.5: '0.625rem',\n    3: '0.75rem',\n    3.5: '0.875rem',\n    4: '1rem',\n    5: '1.25rem',\n    6: '1.5rem',\n    7: '1.75rem',\n    8: '2rem',\n    9: '2.25rem',\n    10: '2.5rem',\n    12: '3rem',\n    14: '3.5rem',\n    16: '4rem',\n    20: '5rem',\n    24: '6rem',\n    28: '7rem',\n    32: '8rem',\n    36: '9rem',\n    40: '10rem',\n    44: '11rem',\n    48: '12rem',\n    52: '13rem',\n    56: '14rem',\n    60: '15rem',\n    64: '16rem',\n    72: '18rem',\n    80: '20rem',\n    96: '24rem',\n  },\n}\n\nconst theme = extendTheme({ ...spacing })\n```\n\nBy default, Incmix includes a comprehensive numeric spacing scale inspired by\nTailwind CSS. The values are proportional, so 1 spacing unit is equal to\n`0.25rem`, which translates to `4px` by default in common browsers.\n\n> **Mental model:** If you need a spacing of `40px`, divide it by `4`. That'll\n> give you `10`. Then use it in your component.\n\n| Name | Space    | Pixels |                                    |\n| ---- | -------- | ------ | ---------------------------------- |\n| px   | 1px      | 1px    | <Box bg=\"pink.200\" h=\"4\" w=\"px\"/>  |\n| 0.5  | 0.125rem | 2px    | <Box bg=\"pink.200\" h=\"4\" w=\"0.5\"/> |\n| 1    | 0.25rem  | 4px    | <Box bg=\"pink.200\" h=\"4\" w=\"1\"/>   |\n| 1.5  | 0.375rem | 6px    | <Box bg=\"pink.200\" h=\"4\" w=\"1.5\"/> |\n| 2    | 0.5rem   | 8px    | <Box bg=\"pink.200\" h=\"4\" w=\"2\"/>   |\n| 2.5  | 0.625rem | 10px   | <Box bg=\"pink.200\" h=\"4\" w=\"2.5\"/> |\n| 3    | 0.75rem  | 12px   | <Box bg=\"pink.200\" h=\"4\" w=\"3\"/>   |\n| 3.5  | 0.875rem | 14px   | <Box bg=\"pink.200\" h=\"4\" w=\"3.5\"/> |\n| 4    | 1rem     | 16px   | <Box bg=\"pink.200\" h=\"4\" w=\"4\"/>   |\n| 5    | 1.25rem  | 20px   | <Box bg=\"pink.200\" h=\"4\" w=\"5\"/>   |\n| 6    | 1.5rem   | 24px   | <Box bg=\"pink.200\" h=\"4\" w=\"6\"/>   |\n| 7    | 1.75rem  | 28px   | <Box bg=\"pink.200\" h=\"4\" w=\"7\"/>   |\n| 8    | 2rem     | 32px   | <Box bg=\"pink.200\" h=\"4\" w=\"8\"/>   |\n| 9    | 2.25rem  | 36px   | <Box bg=\"pink.200\" h=\"4\" w=\"9\"/>   |\n| 10   | 2.5rem   | 40px   | <Box bg=\"pink.200\" h=\"4\" w=\"10\"/>  |\n| 12   | 3rem     | 48px   | <Box bg=\"pink.200\" h=\"4\" w=\"12\"/>  |\n| 14   | 3.5rem   | 56px   | <Box bg=\"pink.200\" h=\"4\" w=\"14\"/>  |\n| 16   | 4rem     | 64px   | <Box bg=\"pink.200\" h=\"4\" w=\"16\"/>  |\n| 20   | 5rem     | 80px   | <Box bg=\"pink.200\" h=\"4\" w=\"20\"/>  |\n| 24   | 6rem     | 96px   | <Box bg=\"pink.200\" h=\"4\" w=\"24\"/>  |\n| 28   | 7rem     | 112px  | <Box bg=\"pink.200\" h=\"4\" w=\"28\"/>  |\n| 32   | 8rem     | 128px  | <Box bg=\"pink.200\" h=\"4\" w=\"32\"/>  |\n| 36   | 9rem     | 144px  | <Box bg=\"pink.200\" h=\"4\" w=\"36\"/>  |\n| 40   | 10rem    | 160px  | <Box bg=\"pink.200\" h=\"4\" w=\"40\"/>  |\n| 44   | 11rem    | 176px  | <Box bg=\"pink.200\" h=\"4\" w=\"44\"/>  |\n| 48   | 12rem    | 192px  | <Box bg=\"pink.200\" h=\"4\" w=\"48\"/>  |\n| 56   | 14rem    | 224px  | <Box bg=\"pink.200\" h=\"4\" w=\"56\"/>  |\n| 60   | 15rem    | 240px  | <Box bg=\"pink.200\" h=\"4\" w=\"60\"/>  |\n| 64   | 16rem    | 256px  | <Box bg=\"pink.200\" h=\"4\" w=\"64\"/>  |\n| 72   | 18rem    | 288px  | <Box bg=\"pink.200\" h=\"4\" w=\"72\"/>  |\n| 80   | 20rem    | 320px  | <Box bg=\"pink.200\" h=\"4\" w=\"80\"/>  |\n| 96   | 24rem    | 384px  | <Box bg=\"pink.200\" h=\"4\" w=\"96\"/>  |\n\n## Sizes\n\nThe `sizes` key allows you to customize the global sizing of components you\nbuild for your project. By default these sizes value can be referenced by the\n`width`, `height`, and `maxWidth`, `minWidth`, `maxHeight`, `minHeight` styles.\n\n```js\nimport { extendTheme } from '@incmix-ui/react'\n\nconst sizes = {\n  sizes: {\n    ...theme.space,\n    max: 'max-content',\n    min: 'min-content',\n    full: '100%',\n    '3xs': '14rem',\n    '2xs': '16rem',\n    xs: '20rem',\n    sm: '24rem',\n    md: '28rem',\n    lg: '32rem',\n    xl: '36rem',\n    '2xl': '42rem',\n    '3xl': '48rem',\n    '4xl': '56rem',\n    '5xl': '64rem',\n    '6xl': '72rem',\n    '7xl': '80rem',\n    '8xl': '90rem',\n    container: {\n      sm: '640px',\n      md: '768px',\n      lg: '1024px',\n      xl: '1280px',\n    },\n  },\n}\n\nconst theme = extendTheme({ sizes, ...})\n```\n\nA component like this: `<Box w={4} h={3} />` will generate an empty `div` with\nwidth set to `1rem` or `16px` and height set to `0.75rem` or `12px`.\n\n## Border radius\n\nIncmix provides a set of smooth corner radius values defined by the `radii` key.\n\n```js\nimport { extendTheme } from '@incmix-ui/react'\n\nconst borderRadius = {\n  radii: {\n    none: '0',\n    sm: '0.125rem',\n    base: '0.25rem',\n    md: '0.375rem',\n    lg: '0.5rem',\n    xl: '0.75rem',\n    '2xl': '1rem',\n    '3xl': '1.5rem',\n    full: '9999px',\n  },\n}\n\nconst theme = extendTheme({ ...borderRadius, ...})\n```\n\n## z-index values\n\nIncmix provides a minimal set of z-Indices out of the box to help control the\nstacking order of components.\n\n```js\nimport { extendTheme } from '@incmix-ui/react'\n\nconst zIndices = {\n  zIndices: {\n    hide: -1,\n    auto: 'auto',\n    base: 0,\n    docked: 10,\n    dropdown: 1000,\n    sticky: 1100,\n    banner: 1200,\n    overlay: 1300,\n    modal: 1400,\n    popover: 1500,\n    skipLink: 1600,\n    toast: 1700,\n    tooltip: 1800,\n  },\n}\nconst theme = extendTheme({ zIndices, ...})\n```\n\n## Config\n\nThe theme's config is to provide global settings that are used by different\nparts of the Incmix UI system.\n\n| Property                  | Description                                                                                                 | Default  |\n| ------------------------- | ----------------------------------------------------------------------------------------------------------- | -------- |\n| `cssVarPrefix` **(v1.4)** | The prefix to use for the generated CSS custom properties                                                   | `incmix` |\n| `initialColorMode`        | The initial color mode your application should start with. <br reset/> Can be either `light` or `dark` mode | `light`  |\n| `useSystemColorMode`      | If `true`, the incmix system will update color mode <br reset/> based on your system preferences            | `false`  |\n\nYou can leverage the `extendTheme` function to override a specific theme config\nproperty.\n\n```jsx live=false\nimport { extendTheme } from '@incmix-ui/react'\n\nconst theme = extendTheme({\n  config: {\n    cssVarPrefix: 'ck',\n  },\n})\n```\n",
      "code": "var Component=(()=>{var x=Object.create;var o=Object.defineProperty;var g=Object.getOwnPropertyDescriptor;var u=Object.getOwnPropertyNames;var b=Object.getPrototypeOf,f=Object.prototype.hasOwnProperty;var y=(d,n)=>()=>(n||d((n={exports:{}}).exports,n),n.exports),k=(d,n)=>{for(var t in n)o(d,t,{get:n[t],enumerable:!0})},m=(d,n,t,i)=>{if(n&&typeof n==\"object\"||typeof n==\"function\")for(let l of u(n))!f.call(d,l)&&l!==t&&o(d,l,{get:()=>n[l],enumerable:!(i=g(n,l))||i.enumerable});return d};var w=(d,n,t)=>(t=d!=null?x(b(d)):{},m(n||!d||!d.__esModule?o(t,\"default\",{value:d,enumerable:!0}):t,d)),T=d=>m(o({},\"__esModule\",{value:!0}),d);var a=y((I,s)=>{s.exports=_jsx_runtime});var z={};k(z,{default:()=>C,frontmatter:()=>v});var e=w(a()),v={title:\"Default Theme\",description:\"The default incmix theme tokens\",category:\"theming\"};function p(d){let n=Object.assign({p:\"p\",a:\"a\",h2:\"h2\",code:\"code\",pre:\"pre\",h3:\"h3\",blockquote:\"blockquote\",ul:\"ul\",li:\"li\",strong:\"strong\",table:\"table\",thead:\"thead\",tr:\"tr\",th:\"th\",tbody:\"tbody\",td:\"td\"},d.components),{ComponentLinks:t,ColorWrapper:i,ColorPalette:l,ColorPalettes:c,Box:r}=n;return r||h(\"Box\",!0),l||h(\"ColorPalette\",!0),c||h(\"ColorPalettes\",!0),i||h(\"ColorWrapper\",!0),t||h(\"ComponentLinks\",!0),(0,e.jsxs)(e.Fragment,{children:[(0,e.jsx)(n.p,{children:`The theme object is where you define your application's color palette, type\nscale, font stacks, breakpoints, border radius values, and more.`}),`\n`,(0,e.jsxs)(n.p,{children:[`Theming with Incmix UI is based on the\n`,(0,e.jsx)(n.a,{href:\"https://styled-system.com/theme-specification/\",children:\"Styled System Theme Specification\"})]}),`\n`,(0,e.jsx)(\"br\",{}),`\n`,(0,e.jsx)(t,{github:{package:\"theme\"},npm:{package:\"@incmix-ui/theme\"}}),`\n`,(0,e.jsx)(n.h2,{id:\"colors\",children:\"Colors\"}),`\n`,(0,e.jsxs)(n.p,{children:[\"Add a \",(0,e.jsx)(n.code,{children:\"theme.colors\"}),` object to provide colors for your project. By default these\ncolors can be referenced by the `,(0,e.jsx)(n.code,{children:\"color\"}),\", \",(0,e.jsx)(n.code,{children:\"borderColor\"}),\", \",(0,e.jsx)(n.code,{children:\"backgroundColor\"}),`,\n`,(0,e.jsx)(n.code,{children:\"fill\"}),\", \",(0,e.jsx)(n.code,{children:\"stroke\"}),\", styles.\"]}),`\n`,(0,e.jsxs)(n.p,{children:[\"We recommend adding a palette that ranges from \",(0,e.jsx)(n.code,{children:\"50\"}),\" to \",(0,e.jsx)(n.code,{children:\"900\"}),`. Tools like\n`,(0,e.jsx)(n.a,{href:\"https://themera.vercel.app/\",children:\"Themera\"}),`,\n`,(0,e.jsx)(n.a,{href:\"https://smart-swatch.netlify.app/\",children:\"Smart Swatch\"}),`,\n`,(0,e.jsx)(n.a,{href:\"https://coolors.co/app\",children:\"Coolors\"}),\" or \",(0,e.jsx)(n.a,{href:\"https://palx.jxnblk.com\",children:\"Palx\"}),` are\navailable to generate these palettes.`]}),`\n`,(0,e.jsx)(n.pre,{children:(0,e.jsx)(n.code,{className:\"language-js\",children:`// theme.js\nexport default {\n  colors: {\n    transparent: 'transparent',\n    black: '#000',\n    white: '#fff',\n    gray: {\n      50: '#f7fafc',\n      // ...\n      900: '#171923',\n    },\n    // ...\n  },\n}\n`})}),`\n`,(0,e.jsxs)(n.p,{children:[`Incmix provides a sensible\n`,(0,e.jsx)(n.a,{href:\"https://github.com/incmix-ui/incmix-ui/tree/main/packages/components/theme\",children:\"default theme\"}),`\ninspired by Tailwind CSS, but you can customize it to fit your design.`]}),`\n`,(0,e.jsx)(n.h3,{id:\"black--white\",children:\"Black & White\"}),`\n`,(0,e.jsxs)(i,{children:[(0,e.jsx)(l,{color:\"black\",name:\"Black\"}),(0,e.jsx)(l,{color:\"white\",name:\"White\"}),(0,e.jsx)(\"div\",{})]}),`\n`,(0,e.jsx)(n.h3,{id:\"alphas\",children:\"Alphas\"}),`\n`,(0,e.jsxs)(n.blockquote,{children:[`\n`,(0,e.jsx)(n.p,{children:\"Note: Toggle the site's color mode to see the change in the whiteAlpha colors.\"}),`\n`]}),`\n`,(0,e.jsxs)(i,{children:[(0,e.jsx)(c,{color:\"blackAlpha\"}),(0,e.jsx)(c,{color:\"whiteAlpha\"})]}),`\n`,(0,e.jsx)(n.h3,{id:\"gray\",children:\"Gray\"}),`\n`,(0,e.jsx)(i,{children:(0,e.jsx)(c,{color:\"gray\"})}),`\n`,(0,e.jsx)(n.h3,{id:\"red\",children:\"Red\"}),`\n`,(0,e.jsx)(i,{children:(0,e.jsx)(c,{color:\"red\"})}),`\n`,(0,e.jsx)(n.h3,{id:\"orange\",children:\"Orange\"}),`\n`,(0,e.jsx)(i,{children:(0,e.jsx)(c,{color:\"orange\"})}),`\n`,(0,e.jsx)(n.h3,{id:\"yellow\",children:\"Yellow\"}),`\n`,(0,e.jsx)(i,{children:(0,e.jsx)(c,{color:\"yellow\"})}),`\n`,(0,e.jsx)(n.h3,{id:\"green\",children:\"Green\"}),`\n`,(0,e.jsx)(i,{children:(0,e.jsx)(c,{color:\"green\"})}),`\n`,(0,e.jsx)(n.h3,{id:\"teal\",children:\"Teal\"}),`\n`,(0,e.jsx)(i,{children:(0,e.jsx)(c,{color:\"teal\"})}),`\n`,(0,e.jsx)(n.h3,{id:\"blue\",children:\"Blue\"}),`\n`,(0,e.jsx)(i,{children:(0,e.jsx)(c,{color:\"blue\"})}),`\n`,(0,e.jsx)(n.h3,{id:\"cyan\",children:\"Cyan\"}),`\n`,(0,e.jsx)(i,{children:(0,e.jsx)(c,{color:\"cyan\"})}),`\n`,(0,e.jsx)(n.h3,{id:\"purple\",children:\"Purple\"}),`\n`,(0,e.jsx)(i,{children:(0,e.jsx)(c,{color:\"purple\"})}),`\n`,(0,e.jsx)(n.h3,{id:\"pink\",children:\"Pink\"}),`\n`,(0,e.jsx)(i,{children:(0,e.jsx)(c,{color:\"pink\"})}),`\n`,(0,e.jsx)(n.h2,{id:\"typography\",children:\"Typography\"}),`\n`,(0,e.jsx)(n.p,{children:\"To manage Typography options, the theme object supports the following keys:\"}),`\n`,(0,e.jsxs)(n.ul,{children:[`\n`,(0,e.jsxs)(n.li,{children:[(0,e.jsx)(n.code,{children:\"fonts\"}),\" (font families)\"]}),`\n`,(0,e.jsx)(n.li,{children:(0,e.jsx)(n.code,{children:\"fontSizes\"})}),`\n`,(0,e.jsx)(n.li,{children:(0,e.jsx)(n.code,{children:\"fontWeights\"})}),`\n`,(0,e.jsx)(n.li,{children:(0,e.jsx)(n.code,{children:\"lineHeights\"})}),`\n`,(0,e.jsx)(n.li,{children:(0,e.jsx)(n.code,{children:\"letterSpacings\"})}),`\n`]}),`\n`,(0,e.jsx)(n.pre,{children:(0,e.jsx)(n.code,{className:\"language-js\",children:`import { extendTheme } from '@incmix-ui/react'\n\n// example theme\nconst theme = extendTheme({\n  colors: {...},\n  fonts: {\n    body: \"system-ui, sans-serif\",\n    heading: \"Georgia, serif\",\n    mono: \"Menlo, monospace\",\n  },\n  fontSizes: {\n    xs: \"0.75rem\",\n    sm: \"0.875rem\",\n    md: \"1rem\",\n    lg: \"1.125rem\",\n    xl: \"1.25rem\",\n    \"2xl\": \"1.5rem\",\n    \"3xl\": \"1.875rem\",\n    \"4xl\": \"2.25rem\",\n    \"5xl\": \"3rem\",\n    \"6xl\": \"3.75rem\",\n    \"7xl\": \"4.5rem\",\n    \"8xl\": \"6rem\",\n    \"9xl\": \"8rem\",\n  },\n  fontWeights: {\n    hairline: 100,\n    thin: 200,\n    light: 300,\n    normal: 400,\n    medium: 500,\n    semibold: 600,\n    bold: 700,\n    extrabold: 800,\n    black: 900,\n  },\n  lineHeights: {\n    normal: \"normal\",\n    none: 1,\n    shorter: 1.25,\n    short: 1.375,\n    base: 1.5,\n    tall: 1.625,\n    taller: \"2\",\n    \"3\": \".75rem\",\n    \"4\": \"1rem\",\n    \"5\": \"1.25rem\",\n    \"6\": \"1.5rem\",\n    \"7\": \"1.75rem\",\n    \"8\": \"2rem\",\n    \"9\": \"2.25rem\",\n    \"10\": \"2.5rem\",\n  },\n  letterSpacings: {\n    tighter: \"-0.05em\",\n    tight: \"-0.025em\",\n    normal: \"0\",\n    wide: \"0.025em\",\n    wider: \"0.05em\",\n    widest: \"0.1em\",\n  },\n});\n`})}),`\n`,(0,e.jsx)(n.h2,{id:\"breakpoints\",children:\"Breakpoints\"}),`\n`,(0,e.jsx)(n.p,{children:\"Incmix UI comes with a predefined set of commonly used breakpoints.\"}),`\n`,(0,e.jsxs)(n.blockquote,{children:[`\n`,(0,e.jsxs)(n.p,{children:[`Learn more about\n`,(0,e.jsx)(n.a,{href:\"/docs/styled-system/responsive-styles\",children:\"Responsive Styles and Customizing Breakpoints\"}),\".\"]}),`\n`]}),`\n`,(0,e.jsx)(n.pre,{children:(0,e.jsx)(n.code,{className:\"language-js\",children:`import { extendTheme } from '@incmix-ui/react'\n\nconst breakpoints = {\n  sm: '30em',\n  md: '48em',\n  lg: '62em',\n  xl: '80em',\n  '2xl': '96em',\n}\n\nconst theme = extendTheme({ breakpoints, ... })\n`})}),`\n`,(0,e.jsx)(n.h2,{id:\"spacing\",children:\"Spacing\"}),`\n`,(0,e.jsxs)(n.p,{children:[\"The \",(0,e.jsx)(n.code,{children:\"space\"}),` key allows you to customize the global spacing and sizing scale for\nyour project. By default these spacing value can be referenced by the `,(0,e.jsx)(n.code,{children:\"padding\"}),`,\n`,(0,e.jsx)(n.code,{children:\"margin\"}),\", and \",(0,e.jsx)(n.code,{children:\"top\"}),\", \",(0,e.jsx)(n.code,{children:\"left\"}),\", \",(0,e.jsx)(n.code,{children:\"right\"}),\", \",(0,e.jsx)(n.code,{children:\"bottom\"}),\" styles.\"]}),`\n`,(0,e.jsx)(n.pre,{children:(0,e.jsx)(n.code,{className:\"language-js\",children:`import { extendTheme } from '@incmix-ui/react'\n\nconst spacing = {\n  space: {\n    px: '1px',\n    0.5: '0.125rem',\n    1: '0.25rem',\n    1.5: '0.375rem',\n    2: '0.5rem',\n    2.5: '0.625rem',\n    3: '0.75rem',\n    3.5: '0.875rem',\n    4: '1rem',\n    5: '1.25rem',\n    6: '1.5rem',\n    7: '1.75rem',\n    8: '2rem',\n    9: '2.25rem',\n    10: '2.5rem',\n    12: '3rem',\n    14: '3.5rem',\n    16: '4rem',\n    20: '5rem',\n    24: '6rem',\n    28: '7rem',\n    32: '8rem',\n    36: '9rem',\n    40: '10rem',\n    44: '11rem',\n    48: '12rem',\n    52: '13rem',\n    56: '14rem',\n    60: '15rem',\n    64: '16rem',\n    72: '18rem',\n    80: '20rem',\n    96: '24rem',\n  },\n}\n\nconst theme = extendTheme({ ...spacing })\n`})}),`\n`,(0,e.jsxs)(n.p,{children:[`By default, Incmix includes a comprehensive numeric spacing scale inspired by\nTailwind CSS. The values are proportional, so 1 spacing unit is equal to\n`,(0,e.jsx)(n.code,{children:\"0.25rem\"}),\", which translates to \",(0,e.jsx)(n.code,{children:\"4px\"}),\" by default in common browsers.\"]}),`\n`,(0,e.jsxs)(n.blockquote,{children:[`\n`,(0,e.jsxs)(n.p,{children:[(0,e.jsx)(n.strong,{children:\"Mental model:\"}),\" If you need a spacing of \",(0,e.jsx)(n.code,{children:\"40px\"}),\", divide it by \",(0,e.jsx)(n.code,{children:\"4\"}),`. That'll\ngive you `,(0,e.jsx)(n.code,{children:\"10\"}),\". Then use it in your component.\"]}),`\n`]}),`\n`,(0,e.jsxs)(n.table,{children:[(0,e.jsx)(n.thead,{children:(0,e.jsxs)(n.tr,{children:[(0,e.jsx)(n.th,{children:\"Name\"}),(0,e.jsx)(n.th,{children:\"Space\"}),(0,e.jsx)(n.th,{children:\"Pixels\"}),(0,e.jsx)(n.th,{})]})}),(0,e.jsxs)(n.tbody,{children:[(0,e.jsxs)(n.tr,{children:[(0,e.jsx)(n.td,{children:\"px\"}),(0,e.jsx)(n.td,{children:\"1px\"}),(0,e.jsx)(n.td,{children:\"1px\"}),(0,e.jsx)(n.td,{children:(0,e.jsx)(r,{bg:\"pink.200\",h:\"4\",w:\"px\"})})]}),(0,e.jsxs)(n.tr,{children:[(0,e.jsx)(n.td,{children:\"0.5\"}),(0,e.jsx)(n.td,{children:\"0.125rem\"}),(0,e.jsx)(n.td,{children:\"2px\"}),(0,e.jsx)(n.td,{children:(0,e.jsx)(r,{bg:\"pink.200\",h:\"4\",w:\"0.5\"})})]}),(0,e.jsxs)(n.tr,{children:[(0,e.jsx)(n.td,{children:\"1\"}),(0,e.jsx)(n.td,{children:\"0.25rem\"}),(0,e.jsx)(n.td,{children:\"4px\"}),(0,e.jsx)(n.td,{children:(0,e.jsx)(r,{bg:\"pink.200\",h:\"4\",w:\"1\"})})]}),(0,e.jsxs)(n.tr,{children:[(0,e.jsx)(n.td,{children:\"1.5\"}),(0,e.jsx)(n.td,{children:\"0.375rem\"}),(0,e.jsx)(n.td,{children:\"6px\"}),(0,e.jsx)(n.td,{children:(0,e.jsx)(r,{bg:\"pink.200\",h:\"4\",w:\"1.5\"})})]}),(0,e.jsxs)(n.tr,{children:[(0,e.jsx)(n.td,{children:\"2\"}),(0,e.jsx)(n.td,{children:\"0.5rem\"}),(0,e.jsx)(n.td,{children:\"8px\"}),(0,e.jsx)(n.td,{children:(0,e.jsx)(r,{bg:\"pink.200\",h:\"4\",w:\"2\"})})]}),(0,e.jsxs)(n.tr,{children:[(0,e.jsx)(n.td,{children:\"2.5\"}),(0,e.jsx)(n.td,{children:\"0.625rem\"}),(0,e.jsx)(n.td,{children:\"10px\"}),(0,e.jsx)(n.td,{children:(0,e.jsx)(r,{bg:\"pink.200\",h:\"4\",w:\"2.5\"})})]}),(0,e.jsxs)(n.tr,{children:[(0,e.jsx)(n.td,{children:\"3\"}),(0,e.jsx)(n.td,{children:\"0.75rem\"}),(0,e.jsx)(n.td,{children:\"12px\"}),(0,e.jsx)(n.td,{children:(0,e.jsx)(r,{bg:\"pink.200\",h:\"4\",w:\"3\"})})]}),(0,e.jsxs)(n.tr,{children:[(0,e.jsx)(n.td,{children:\"3.5\"}),(0,e.jsx)(n.td,{children:\"0.875rem\"}),(0,e.jsx)(n.td,{children:\"14px\"}),(0,e.jsx)(n.td,{children:(0,e.jsx)(r,{bg:\"pink.200\",h:\"4\",w:\"3.5\"})})]}),(0,e.jsxs)(n.tr,{children:[(0,e.jsx)(n.td,{children:\"4\"}),(0,e.jsx)(n.td,{children:\"1rem\"}),(0,e.jsx)(n.td,{children:\"16px\"}),(0,e.jsx)(n.td,{children:(0,e.jsx)(r,{bg:\"pink.200\",h:\"4\",w:\"4\"})})]}),(0,e.jsxs)(n.tr,{children:[(0,e.jsx)(n.td,{children:\"5\"}),(0,e.jsx)(n.td,{children:\"1.25rem\"}),(0,e.jsx)(n.td,{children:\"20px\"}),(0,e.jsx)(n.td,{children:(0,e.jsx)(r,{bg:\"pink.200\",h:\"4\",w:\"5\"})})]}),(0,e.jsxs)(n.tr,{children:[(0,e.jsx)(n.td,{children:\"6\"}),(0,e.jsx)(n.td,{children:\"1.5rem\"}),(0,e.jsx)(n.td,{children:\"24px\"}),(0,e.jsx)(n.td,{children:(0,e.jsx)(r,{bg:\"pink.200\",h:\"4\",w:\"6\"})})]}),(0,e.jsxs)(n.tr,{children:[(0,e.jsx)(n.td,{children:\"7\"}),(0,e.jsx)(n.td,{children:\"1.75rem\"}),(0,e.jsx)(n.td,{children:\"28px\"}),(0,e.jsx)(n.td,{children:(0,e.jsx)(r,{bg:\"pink.200\",h:\"4\",w:\"7\"})})]}),(0,e.jsxs)(n.tr,{children:[(0,e.jsx)(n.td,{children:\"8\"}),(0,e.jsx)(n.td,{children:\"2rem\"}),(0,e.jsx)(n.td,{children:\"32px\"}),(0,e.jsx)(n.td,{children:(0,e.jsx)(r,{bg:\"pink.200\",h:\"4\",w:\"8\"})})]}),(0,e.jsxs)(n.tr,{children:[(0,e.jsx)(n.td,{children:\"9\"}),(0,e.jsx)(n.td,{children:\"2.25rem\"}),(0,e.jsx)(n.td,{children:\"36px\"}),(0,e.jsx)(n.td,{children:(0,e.jsx)(r,{bg:\"pink.200\",h:\"4\",w:\"9\"})})]}),(0,e.jsxs)(n.tr,{children:[(0,e.jsx)(n.td,{children:\"10\"}),(0,e.jsx)(n.td,{children:\"2.5rem\"}),(0,e.jsx)(n.td,{children:\"40px\"}),(0,e.jsx)(n.td,{children:(0,e.jsx)(r,{bg:\"pink.200\",h:\"4\",w:\"10\"})})]}),(0,e.jsxs)(n.tr,{children:[(0,e.jsx)(n.td,{children:\"12\"}),(0,e.jsx)(n.td,{children:\"3rem\"}),(0,e.jsx)(n.td,{children:\"48px\"}),(0,e.jsx)(n.td,{children:(0,e.jsx)(r,{bg:\"pink.200\",h:\"4\",w:\"12\"})})]}),(0,e.jsxs)(n.tr,{children:[(0,e.jsx)(n.td,{children:\"14\"}),(0,e.jsx)(n.td,{children:\"3.5rem\"}),(0,e.jsx)(n.td,{children:\"56px\"}),(0,e.jsx)(n.td,{children:(0,e.jsx)(r,{bg:\"pink.200\",h:\"4\",w:\"14\"})})]}),(0,e.jsxs)(n.tr,{children:[(0,e.jsx)(n.td,{children:\"16\"}),(0,e.jsx)(n.td,{children:\"4rem\"}),(0,e.jsx)(n.td,{children:\"64px\"}),(0,e.jsx)(n.td,{children:(0,e.jsx)(r,{bg:\"pink.200\",h:\"4\",w:\"16\"})})]}),(0,e.jsxs)(n.tr,{children:[(0,e.jsx)(n.td,{children:\"20\"}),(0,e.jsx)(n.td,{children:\"5rem\"}),(0,e.jsx)(n.td,{children:\"80px\"}),(0,e.jsx)(n.td,{children:(0,e.jsx)(r,{bg:\"pink.200\",h:\"4\",w:\"20\"})})]}),(0,e.jsxs)(n.tr,{children:[(0,e.jsx)(n.td,{children:\"24\"}),(0,e.jsx)(n.td,{children:\"6rem\"}),(0,e.jsx)(n.td,{children:\"96px\"}),(0,e.jsx)(n.td,{children:(0,e.jsx)(r,{bg:\"pink.200\",h:\"4\",w:\"24\"})})]}),(0,e.jsxs)(n.tr,{children:[(0,e.jsx)(n.td,{children:\"28\"}),(0,e.jsx)(n.td,{children:\"7rem\"}),(0,e.jsx)(n.td,{children:\"112px\"}),(0,e.jsx)(n.td,{children:(0,e.jsx)(r,{bg:\"pink.200\",h:\"4\",w:\"28\"})})]}),(0,e.jsxs)(n.tr,{children:[(0,e.jsx)(n.td,{children:\"32\"}),(0,e.jsx)(n.td,{children:\"8rem\"}),(0,e.jsx)(n.td,{children:\"128px\"}),(0,e.jsx)(n.td,{children:(0,e.jsx)(r,{bg:\"pink.200\",h:\"4\",w:\"32\"})})]}),(0,e.jsxs)(n.tr,{children:[(0,e.jsx)(n.td,{children:\"36\"}),(0,e.jsx)(n.td,{children:\"9rem\"}),(0,e.jsx)(n.td,{children:\"144px\"}),(0,e.jsx)(n.td,{children:(0,e.jsx)(r,{bg:\"pink.200\",h:\"4\",w:\"36\"})})]}),(0,e.jsxs)(n.tr,{children:[(0,e.jsx)(n.td,{children:\"40\"}),(0,e.jsx)(n.td,{children:\"10rem\"}),(0,e.jsx)(n.td,{children:\"160px\"}),(0,e.jsx)(n.td,{children:(0,e.jsx)(r,{bg:\"pink.200\",h:\"4\",w:\"40\"})})]}),(0,e.jsxs)(n.tr,{children:[(0,e.jsx)(n.td,{children:\"44\"}),(0,e.jsx)(n.td,{children:\"11rem\"}),(0,e.jsx)(n.td,{children:\"176px\"}),(0,e.jsx)(n.td,{children:(0,e.jsx)(r,{bg:\"pink.200\",h:\"4\",w:\"44\"})})]}),(0,e.jsxs)(n.tr,{children:[(0,e.jsx)(n.td,{children:\"48\"}),(0,e.jsx)(n.td,{children:\"12rem\"}),(0,e.jsx)(n.td,{children:\"192px\"}),(0,e.jsx)(n.td,{children:(0,e.jsx)(r,{bg:\"pink.200\",h:\"4\",w:\"48\"})})]}),(0,e.jsxs)(n.tr,{children:[(0,e.jsx)(n.td,{children:\"56\"}),(0,e.jsx)(n.td,{children:\"14rem\"}),(0,e.jsx)(n.td,{children:\"224px\"}),(0,e.jsx)(n.td,{children:(0,e.jsx)(r,{bg:\"pink.200\",h:\"4\",w:\"56\"})})]}),(0,e.jsxs)(n.tr,{children:[(0,e.jsx)(n.td,{children:\"60\"}),(0,e.jsx)(n.td,{children:\"15rem\"}),(0,e.jsx)(n.td,{children:\"240px\"}),(0,e.jsx)(n.td,{children:(0,e.jsx)(r,{bg:\"pink.200\",h:\"4\",w:\"60\"})})]}),(0,e.jsxs)(n.tr,{children:[(0,e.jsx)(n.td,{children:\"64\"}),(0,e.jsx)(n.td,{children:\"16rem\"}),(0,e.jsx)(n.td,{children:\"256px\"}),(0,e.jsx)(n.td,{children:(0,e.jsx)(r,{bg:\"pink.200\",h:\"4\",w:\"64\"})})]}),(0,e.jsxs)(n.tr,{children:[(0,e.jsx)(n.td,{children:\"72\"}),(0,e.jsx)(n.td,{children:\"18rem\"}),(0,e.jsx)(n.td,{children:\"288px\"}),(0,e.jsx)(n.td,{children:(0,e.jsx)(r,{bg:\"pink.200\",h:\"4\",w:\"72\"})})]}),(0,e.jsxs)(n.tr,{children:[(0,e.jsx)(n.td,{children:\"80\"}),(0,e.jsx)(n.td,{children:\"20rem\"}),(0,e.jsx)(n.td,{children:\"320px\"}),(0,e.jsx)(n.td,{children:(0,e.jsx)(r,{bg:\"pink.200\",h:\"4\",w:\"80\"})})]}),(0,e.jsxs)(n.tr,{children:[(0,e.jsx)(n.td,{children:\"96\"}),(0,e.jsx)(n.td,{children:\"24rem\"}),(0,e.jsx)(n.td,{children:\"384px\"}),(0,e.jsx)(n.td,{children:(0,e.jsx)(r,{bg:\"pink.200\",h:\"4\",w:\"96\"})})]})]})]}),`\n`,(0,e.jsx)(n.h2,{id:\"sizes\",children:\"Sizes\"}),`\n`,(0,e.jsxs)(n.p,{children:[\"The \",(0,e.jsx)(n.code,{children:\"sizes\"}),` key allows you to customize the global sizing of components you\nbuild for your project. By default these sizes value can be referenced by the\n`,(0,e.jsx)(n.code,{children:\"width\"}),\", \",(0,e.jsx)(n.code,{children:\"height\"}),\", and \",(0,e.jsx)(n.code,{children:\"maxWidth\"}),\", \",(0,e.jsx)(n.code,{children:\"minWidth\"}),\", \",(0,e.jsx)(n.code,{children:\"maxHeight\"}),\", \",(0,e.jsx)(n.code,{children:\"minHeight\"}),\" styles.\"]}),`\n`,(0,e.jsx)(n.pre,{children:(0,e.jsx)(n.code,{className:\"language-js\",children:`import { extendTheme } from '@incmix-ui/react'\n\nconst sizes = {\n  sizes: {\n    ...theme.space,\n    max: 'max-content',\n    min: 'min-content',\n    full: '100%',\n    '3xs': '14rem',\n    '2xs': '16rem',\n    xs: '20rem',\n    sm: '24rem',\n    md: '28rem',\n    lg: '32rem',\n    xl: '36rem',\n    '2xl': '42rem',\n    '3xl': '48rem',\n    '4xl': '56rem',\n    '5xl': '64rem',\n    '6xl': '72rem',\n    '7xl': '80rem',\n    '8xl': '90rem',\n    container: {\n      sm: '640px',\n      md: '768px',\n      lg: '1024px',\n      xl: '1280px',\n    },\n  },\n}\n\nconst theme = extendTheme({ sizes, ...})\n`})}),`\n`,(0,e.jsxs)(n.p,{children:[\"A component like this: \",(0,e.jsx)(n.code,{children:\"<Box w={4} h={3} />\"}),\" will generate an empty \",(0,e.jsx)(n.code,{children:\"div\"}),` with\nwidth set to `,(0,e.jsx)(n.code,{children:\"1rem\"}),\" or \",(0,e.jsx)(n.code,{children:\"16px\"}),\" and height set to \",(0,e.jsx)(n.code,{children:\"0.75rem\"}),\" or \",(0,e.jsx)(n.code,{children:\"12px\"}),\".\"]}),`\n`,(0,e.jsx)(n.h2,{id:\"border-radius\",children:\"Border radius\"}),`\n`,(0,e.jsxs)(n.p,{children:[\"Incmix provides a set of smooth corner radius values defined by the \",(0,e.jsx)(n.code,{children:\"radii\"}),\" key.\"]}),`\n`,(0,e.jsx)(n.pre,{children:(0,e.jsx)(n.code,{className:\"language-js\",children:`import { extendTheme } from '@incmix-ui/react'\n\nconst borderRadius = {\n  radii: {\n    none: '0',\n    sm: '0.125rem',\n    base: '0.25rem',\n    md: '0.375rem',\n    lg: '0.5rem',\n    xl: '0.75rem',\n    '2xl': '1rem',\n    '3xl': '1.5rem',\n    full: '9999px',\n  },\n}\n\nconst theme = extendTheme({ ...borderRadius, ...})\n`})}),`\n`,(0,e.jsx)(n.h2,{id:\"z-index-values\",children:\"z-index values\"}),`\n`,(0,e.jsx)(n.p,{children:`Incmix provides a minimal set of z-Indices out of the box to help control the\nstacking order of components.`}),`\n`,(0,e.jsx)(n.pre,{children:(0,e.jsx)(n.code,{className:\"language-js\",children:`import { extendTheme } from '@incmix-ui/react'\n\nconst zIndices = {\n  zIndices: {\n    hide: -1,\n    auto: 'auto',\n    base: 0,\n    docked: 10,\n    dropdown: 1000,\n    sticky: 1100,\n    banner: 1200,\n    overlay: 1300,\n    modal: 1400,\n    popover: 1500,\n    skipLink: 1600,\n    toast: 1700,\n    tooltip: 1800,\n  },\n}\nconst theme = extendTheme({ zIndices, ...})\n`})}),`\n`,(0,e.jsx)(n.h2,{id:\"config\",children:\"Config\"}),`\n`,(0,e.jsx)(n.p,{children:`The theme's config is to provide global settings that are used by different\nparts of the Incmix UI system.`}),`\n`,(0,e.jsxs)(n.table,{children:[(0,e.jsx)(n.thead,{children:(0,e.jsxs)(n.tr,{children:[(0,e.jsx)(n.th,{children:\"Property\"}),(0,e.jsx)(n.th,{children:\"Description\"}),(0,e.jsx)(n.th,{children:\"Default\"})]})}),(0,e.jsxs)(n.tbody,{children:[(0,e.jsxs)(n.tr,{children:[(0,e.jsxs)(n.td,{children:[(0,e.jsx)(n.code,{children:\"cssVarPrefix\"}),\" \",(0,e.jsx)(n.strong,{children:\"(v1.4)\"})]}),(0,e.jsx)(n.td,{children:\"The prefix to use for the generated CSS custom properties\"}),(0,e.jsx)(n.td,{children:(0,e.jsx)(n.code,{children:\"incmix\"})})]}),(0,e.jsxs)(n.tr,{children:[(0,e.jsx)(n.td,{children:(0,e.jsx)(n.code,{children:\"initialColorMode\"})}),(0,e.jsxs)(n.td,{children:[\"The initial color mode your application should start with. \",(0,e.jsx)(\"br\",{reset:!0}),\" Can be either \",(0,e.jsx)(n.code,{children:\"light\"}),\" or \",(0,e.jsx)(n.code,{children:\"dark\"}),\" mode\"]}),(0,e.jsx)(n.td,{children:(0,e.jsx)(n.code,{children:\"light\"})})]}),(0,e.jsxs)(n.tr,{children:[(0,e.jsx)(n.td,{children:(0,e.jsx)(n.code,{children:\"useSystemColorMode\"})}),(0,e.jsxs)(n.td,{children:[\"If \",(0,e.jsx)(n.code,{children:\"true\"}),\", the incmix system will update color mode \",(0,e.jsx)(\"br\",{reset:!0}),\" based on your system preferences\"]}),(0,e.jsx)(n.td,{children:(0,e.jsx)(n.code,{children:\"false\"})})]})]})]}),`\n`,(0,e.jsxs)(n.p,{children:[\"You can leverage the \",(0,e.jsx)(n.code,{children:\"extendTheme\"}),` function to override a specific theme config\nproperty.`]}),`\n`,(0,e.jsx)(n.pre,{children:(0,e.jsx)(n.code,{className:\"language-jsx\",live:\"false\",children:`import { extendTheme } from '@incmix-ui/react'\n\nconst theme = extendTheme({\n  config: {\n    cssVarPrefix: 'ck',\n  },\n})\n`})})]})}function j(d={}){let{wrapper:n}=d.components||{};return n?(0,e.jsx)(n,Object.assign({},d,{children:(0,e.jsx)(p,d)})):p(d)}var C=j;function h(d,n){throw new Error(\"Expected \"+(n?\"component\":\"object\")+\" `\"+d+\"` to be defined: you likely forgot to import, pass, or provide it.\")}return T(z);})();\n;return Component;"
    },
    "_id": "docs/styled-system/theme.mdx",
    "_raw": {
      "sourceFilePath": "docs/styled-system/theme.mdx",
      "sourceFileName": "theme.mdx",
      "sourceFileDir": "docs/styled-system",
      "contentType": "mdx",
      "flattenedPath": "docs/styled-system/theme"
    },
    "type": "Doc",
    "slug": "/docs/styled-system/theme",
    "frontMatter": {
      "title": "Default Theme",
      "description": "The default incmix theme tokens",
      "slug": "/docs/styled-system/theme",
      "editUrl": "https://github.com/incmix-ui/incmix-ui-docs/tree/main/content/docs/styled-system/theme.mdx",
      "headings": [
        {
          "text": "Colors",
          "id": "colors",
          "level": "h2"
        },
        {
          "text": "Black & White",
          "id": "black--white",
          "level": "h3"
        },
        {
          "text": "Alphas",
          "id": "alphas",
          "level": "h3"
        },
        {
          "text": "Gray",
          "id": "gray",
          "level": "h3"
        },
        {
          "text": "Red",
          "id": "red",
          "level": "h3"
        },
        {
          "text": "Orange",
          "id": "orange",
          "level": "h3"
        },
        {
          "text": "Yellow",
          "id": "yellow",
          "level": "h3"
        },
        {
          "text": "Green",
          "id": "green",
          "level": "h3"
        },
        {
          "text": "Teal",
          "id": "teal",
          "level": "h3"
        },
        {
          "text": "Blue",
          "id": "blue",
          "level": "h3"
        },
        {
          "text": "Cyan",
          "id": "cyan",
          "level": "h3"
        },
        {
          "text": "Purple",
          "id": "purple",
          "level": "h3"
        },
        {
          "text": "Pink",
          "id": "pink",
          "level": "h3"
        },
        {
          "text": "Typography",
          "id": "typography",
          "level": "h2"
        },
        {
          "text": "Breakpoints",
          "id": "breakpoints",
          "level": "h2"
        },
        {
          "text": "Spacing",
          "id": "spacing",
          "level": "h2"
        },
        {
          "text": "Sizes",
          "id": "sizes",
          "level": "h2"
        },
        {
          "text": "Border radius",
          "id": "border-radius",
          "level": "h2"
        },
        {
          "text": "z-index values",
          "id": "z-index-values",
          "level": "h2"
        },
        {
          "text": "Config",
          "id": "config",
          "level": "h2"
        }
      ]
    }
  },
  {
    "title": "useBoolean",
    "package": "@incmix-ui/hooks",
    "description": "React hook to manage boolean (on - off) states",
    "scope": "usage",
    "body": {
      "raw": "\n`useBoolean` is a custom hook used to manage a boolean value with `on`, `off`\nand `toggle` functions.\n\n## Import\n\n```js\nimport { useBoolean } from '@incmix-ui/react'\n```\n\n## Return value\n\nThe `useBoolean` hook returns a stateful boolean value and an object with the\nfollowing function to update it:\n\n| Name     | Type         | Description                                     |\n| -------- | ------------ | ----------------------------------------------- |\n| `on`     | `() => void` | A function to set the boolean value to `true`.  |\n| `off`    | `() => void` | A function to set the boolean value to `false`. |\n| `toggle` | `() => void` | A function to negate the boolean state.         |\n\n## Usage\n\n### Usage of toggle method\n\n```jsx\nfunction Example() {\n  const [flag, setFlag] = useBoolean()\n\n  return (\n    <>\n      <p>Boolean state: {flag.toString()}</p>\n      <button onClick={setFlag.toggle}>Click me to toggle the boolean value</button>\n    </>\n  )\n}\n```\n\n### Usage of on and off methods\n\n```jsx\nfunction Example() {\n  const [flag, setFlag] = useBoolean()\n\n  return (\n    <div onMouseEnter={setFlag.on} onMouseLeave={setFlag.off}>\n      {flag ? 'The flag is ON!' : 'Hover me to turn ON'}\n    </div>\n  )\n}\n```\n\n## Parameters\n\nThe hook `useBoolean` accepts the initial boolean value, by default is `false`.\n",
      "code": "var Component=(()=>{var s=Object.create;var l=Object.defineProperty;var u=Object.getOwnPropertyDescriptor;var g=Object.getOwnPropertyNames;var f=Object.getPrototypeOf,m=Object.prototype.hasOwnProperty;var p=(o,e)=>()=>(e||o((e={exports:{}}).exports,e),e.exports),b=(o,e)=>{for(var t in e)l(o,t,{get:e[t],enumerable:!0})},a=(o,e,t,c)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let d of g(e))!m.call(o,d)&&d!==t&&l(o,d,{get:()=>e[d],enumerable:!(c=u(e,d))||c.enumerable});return o};var v=(o,e,t)=>(t=o!=null?s(f(o)):{},a(e||!o||!o.__esModule?l(t,\"default\",{value:o,enumerable:!0}):t,o)),x=o=>a(l({},\"__esModule\",{value:!0}),o);var r=p((y,i)=>{i.exports=_jsx_runtime});var F={};b(F,{default:()=>B,frontmatter:()=>j});var n=v(r()),j={title:\"useBoolean\",package:\"@incmix-ui/hooks\",description:\"React hook to manage boolean (on - off) states\"};function h(o){let e=Object.assign({p:\"p\",code:\"code\",h2:\"h2\",pre:\"pre\",table:\"table\",thead:\"thead\",tr:\"tr\",th:\"th\",tbody:\"tbody\",td:\"td\",h3:\"h3\"},o.components);return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsxs)(e.p,{children:[(0,n.jsx)(e.code,{children:\"useBoolean\"}),\" is a custom hook used to manage a boolean value with \",(0,n.jsx)(e.code,{children:\"on\"}),\", \",(0,n.jsx)(e.code,{children:\"off\"}),`\nand `,(0,n.jsx)(e.code,{children:\"toggle\"}),\" functions.\"]}),`\n`,(0,n.jsx)(e.h2,{id:\"import\",children:\"Import\"}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-js\",children:`import { useBoolean } from '@incmix-ui/react'\n`})}),`\n`,(0,n.jsx)(e.h2,{id:\"return-value\",children:\"Return value\"}),`\n`,(0,n.jsxs)(e.p,{children:[\"The \",(0,n.jsx)(e.code,{children:\"useBoolean\"}),` hook returns a stateful boolean value and an object with the\nfollowing function to update it:`]}),`\n`,(0,n.jsxs)(e.table,{children:[(0,n.jsx)(e.thead,{children:(0,n.jsxs)(e.tr,{children:[(0,n.jsx)(e.th,{children:\"Name\"}),(0,n.jsx)(e.th,{children:\"Type\"}),(0,n.jsx)(e.th,{children:\"Description\"})]})}),(0,n.jsxs)(e.tbody,{children:[(0,n.jsxs)(e.tr,{children:[(0,n.jsx)(e.td,{children:(0,n.jsx)(e.code,{children:\"on\"})}),(0,n.jsx)(e.td,{children:(0,n.jsx)(e.code,{children:\"() => void\"})}),(0,n.jsxs)(e.td,{children:[\"A function to set the boolean value to \",(0,n.jsx)(e.code,{children:\"true\"}),\".\"]})]}),(0,n.jsxs)(e.tr,{children:[(0,n.jsx)(e.td,{children:(0,n.jsx)(e.code,{children:\"off\"})}),(0,n.jsx)(e.td,{children:(0,n.jsx)(e.code,{children:\"() => void\"})}),(0,n.jsxs)(e.td,{children:[\"A function to set the boolean value to \",(0,n.jsx)(e.code,{children:\"false\"}),\".\"]})]}),(0,n.jsxs)(e.tr,{children:[(0,n.jsx)(e.td,{children:(0,n.jsx)(e.code,{children:\"toggle\"})}),(0,n.jsx)(e.td,{children:(0,n.jsx)(e.code,{children:\"() => void\"})}),(0,n.jsx)(e.td,{children:\"A function to negate the boolean state.\"})]})]})]}),`\n`,(0,n.jsx)(e.h2,{id:\"usage\",children:\"Usage\"}),`\n`,(0,n.jsx)(e.h3,{id:\"usage-of-toggle-method\",children:\"Usage of toggle method\"}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-jsx\",children:`function Example() {\n  const [flag, setFlag] = useBoolean()\n\n  return (\n    <>\n      <p>Boolean state: {flag.toString()}</p>\n      <button onClick={setFlag.toggle}>Click me to toggle the boolean value</button>\n    </>\n  )\n}\n`})}),`\n`,(0,n.jsx)(e.h3,{id:\"usage-of-on-and-off-methods\",children:\"Usage of on and off methods\"}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-jsx\",children:`function Example() {\n  const [flag, setFlag] = useBoolean()\n\n  return (\n    <div onMouseEnter={setFlag.on} onMouseLeave={setFlag.off}>\n      {flag ? 'The flag is ON!' : 'Hover me to turn ON'}\n    </div>\n  )\n}\n`})}),`\n`,(0,n.jsx)(e.h2,{id:\"parameters\",children:\"Parameters\"}),`\n`,(0,n.jsxs)(e.p,{children:[\"The hook \",(0,n.jsx)(e.code,{children:\"useBoolean\"}),\" accepts the initial boolean value, by default is \",(0,n.jsx)(e.code,{children:\"false\"}),\".\"]})]})}function k(o={}){let{wrapper:e}=o.components||{};return e?(0,n.jsx)(e,Object.assign({},o,{children:(0,n.jsx)(h,o)})):h(o)}var B=k;return x(F);})();\n;return Component;"
    },
    "_id": "docs/hooks/use-boolean.mdx",
    "_raw": {
      "sourceFilePath": "docs/hooks/use-boolean.mdx",
      "sourceFileName": "use-boolean.mdx",
      "sourceFileDir": "docs/hooks",
      "contentType": "mdx",
      "flattenedPath": "docs/hooks/use-boolean"
    },
    "type": "Doc",
    "slug": "/docs/hooks/use-boolean",
    "frontMatter": {
      "title": "useBoolean",
      "package": "@incmix-ui/hooks",
      "description": "React hook to manage boolean (on - off) states",
      "slug": "/docs/hooks/use-boolean",
      "editUrl": "https://github.com/incmix-ui/incmix-ui-docs/tree/main/content/docs/hooks/use-boolean.mdx",
      "headings": [
        {
          "text": "Import",
          "id": "import",
          "level": "h2"
        },
        {
          "text": "Return value",
          "id": "return-value",
          "level": "h2"
        },
        {
          "text": "Usage",
          "id": "usage",
          "level": "h2"
        },
        {
          "text": "Usage of toggle method",
          "id": "usage-of-toggle-method",
          "level": "h3"
        },
        {
          "text": "Usage of on and off methods",
          "id": "usage-of-on-and-off-methods",
          "level": "h3"
        },
        {
          "text": "Parameters",
          "id": "parameters",
          "level": "h2"
        }
      ]
    }
  },
  {
    "title": "useBreakpointValue",
    "package": "@incmix-ui/media-query",
    "description": "React hook for getting the value for the current breakpoint from the provided responsive values object.",
    "scope": "usage",
    "body": {
      "raw": "\n`useBreakpointValue` is a custom hook which returns the value for the current\nbreakpoint from the provided responsive values object. This hook also responds\nto the window resizing and returning the appropriate value for the new window\nsize.\n\nThe new `variant` and `size` props don't currently accept responsive values\n(specified as objects or arrays), but `useBreakpointValue` is a good way to\nachieve the same behavior.\n\n## Import\n\n```js\nimport { useBreakpointValue } from '@incmix-ui/react'\n```\n\n## Return value\n\nThe `useBreakpointValue` hook returns the value for the current breakpoint.\n\n## Usage\n\n> Make sure to provide a base value when using `useBreakpointValue` so it\n> doesn't return `undefined` in the first render.\n\n```jsx\nfunction Example() {\n  const variant = useBreakpointValue(\n    {\n      base: 'outline',\n      md: 'solid',\n    },\n    {\n      // Breakpoint to use when mediaqueries cannot be used, such as in server-side rendering\n      // (Defaults to 'base')\n      fallback: 'md',\n    },\n  )\n\n  return (\n    <VStack align=\"flex-start\">\n      <Text>Resize your window to see the button variant change</Text>\n      <Button colorScheme=\"teal\" variant={variant}>\n        Button\n      </Button>\n    </VStack>\n  )\n}\n```\n\nThis hook is built to work in server-side rendering (SSR) applications by\ndefault. You might notice a quick flash of incorrect media query values when you\nuse them.\n\nIf you're creating a client-side rendered app, you can leverage the ssr argument\nto get the correct value on the first render.\n\n```jsx live=false\nconst buttonSize = useBreakpointValue({ base: 'sm', lg: 'md' }, { ssr: false })\n\nconst breakpoint = useBreakpoint({ ssr: false })\n```\n",
      "code": "var Component=(()=>{var d=Object.create;var a=Object.defineProperty;var h=Object.getOwnPropertyDescriptor;var p=Object.getOwnPropertyNames;var m=Object.getPrototypeOf,g=Object.prototype.hasOwnProperty;var k=(r,e)=>()=>(e||r((e={exports:{}}).exports,e),e.exports),v=(r,e)=>{for(var t in e)a(r,t,{get:e[t],enumerable:!0})},s=(r,e,t,i)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let o of p(e))!g.call(r,o)&&o!==t&&a(r,o,{get:()=>e[o],enumerable:!(i=h(e,o))||i.enumerable});return r};var f=(r,e,t)=>(t=r!=null?d(m(r)):{},s(e||!r||!r.__esModule?a(t,\"default\",{value:r,enumerable:!0}):t,r)),b=r=>s(a({},\"__esModule\",{value:!0}),r);var u=k((V,c)=>{c.exports=_jsx_runtime});var B={};v(B,{default:()=>j,frontmatter:()=>x});var n=f(u()),x={title:\"useBreakpointValue\",package:\"@incmix-ui/media-query\",description:\"React hook for getting the value for the current breakpoint from the provided responsive values object.\"};function l(r){let e=Object.assign({p:\"p\",code:\"code\",h2:\"h2\",pre:\"pre\",blockquote:\"blockquote\"},r.components);return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsxs)(e.p,{children:[(0,n.jsx)(e.code,{children:\"useBreakpointValue\"}),` is a custom hook which returns the value for the current\nbreakpoint from the provided responsive values object. This hook also responds\nto the window resizing and returning the appropriate value for the new window\nsize.`]}),`\n`,(0,n.jsxs)(e.p,{children:[\"The new \",(0,n.jsx)(e.code,{children:\"variant\"}),\" and \",(0,n.jsx)(e.code,{children:\"size\"}),` props don't currently accept responsive values\n(specified as objects or arrays), but `,(0,n.jsx)(e.code,{children:\"useBreakpointValue\"}),` is a good way to\nachieve the same behavior.`]}),`\n`,(0,n.jsx)(e.h2,{id:\"import\",children:\"Import\"}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-js\",children:`import { useBreakpointValue } from '@incmix-ui/react'\n`})}),`\n`,(0,n.jsx)(e.h2,{id:\"return-value\",children:\"Return value\"}),`\n`,(0,n.jsxs)(e.p,{children:[\"The \",(0,n.jsx)(e.code,{children:\"useBreakpointValue\"}),\" hook returns the value for the current breakpoint.\"]}),`\n`,(0,n.jsx)(e.h2,{id:\"usage\",children:\"Usage\"}),`\n`,(0,n.jsxs)(e.blockquote,{children:[`\n`,(0,n.jsxs)(e.p,{children:[\"Make sure to provide a base value when using \",(0,n.jsx)(e.code,{children:\"useBreakpointValue\"}),` so it\ndoesn't return `,(0,n.jsx)(e.code,{children:\"undefined\"}),\" in the first render.\"]}),`\n`]}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-jsx\",children:`function Example() {\n  const variant = useBreakpointValue(\n    {\n      base: 'outline',\n      md: 'solid',\n    },\n    {\n      // Breakpoint to use when mediaqueries cannot be used, such as in server-side rendering\n      // (Defaults to 'base')\n      fallback: 'md',\n    },\n  )\n\n  return (\n    <VStack align=\"flex-start\">\n      <Text>Resize your window to see the button variant change</Text>\n      <Button colorScheme=\"teal\" variant={variant}>\n        Button\n      </Button>\n    </VStack>\n  )\n}\n`})}),`\n`,(0,n.jsx)(e.p,{children:`This hook is built to work in server-side rendering (SSR) applications by\ndefault. You might notice a quick flash of incorrect media query values when you\nuse them.`}),`\n`,(0,n.jsx)(e.p,{children:`If you're creating a client-side rendered app, you can leverage the ssr argument\nto get the correct value on the first render.`}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-jsx\",live:\"false\",children:`const buttonSize = useBreakpointValue({ base: 'sm', lg: 'md' }, { ssr: false })\n\nconst breakpoint = useBreakpoint({ ssr: false })\n`})})]})}function w(r={}){let{wrapper:e}=r.components||{};return e?(0,n.jsx)(e,Object.assign({},r,{children:(0,n.jsx)(l,r)})):l(r)}var j=w;return b(B);})();\n;return Component;"
    },
    "_id": "docs/hooks/use-breakpoint-value.mdx",
    "_raw": {
      "sourceFilePath": "docs/hooks/use-breakpoint-value.mdx",
      "sourceFileName": "use-breakpoint-value.mdx",
      "sourceFileDir": "docs/hooks",
      "contentType": "mdx",
      "flattenedPath": "docs/hooks/use-breakpoint-value"
    },
    "type": "Doc",
    "slug": "/docs/hooks/use-breakpoint-value",
    "frontMatter": {
      "title": "useBreakpointValue",
      "package": "@incmix-ui/media-query",
      "description": "React hook for getting the value for the current breakpoint from the provided responsive values object.",
      "slug": "/docs/hooks/use-breakpoint-value",
      "editUrl": "https://github.com/incmix-ui/incmix-ui-docs/tree/main/content/docs/hooks/use-breakpoint-value.mdx",
      "headings": [
        {
          "text": "Import",
          "id": "import",
          "level": "h2"
        },
        {
          "text": "Return value",
          "id": "return-value",
          "level": "h2"
        },
        {
          "text": "Usage",
          "id": "usage",
          "level": "h2"
        }
      ]
    }
  },
  {
    "title": "useCheckboxGroup",
    "package": "@incmix-ui/checkbox",
    "description": "React hooks to manage checkbox groups.",
    "scope": "usage",
    "body": {
      "raw": "\n`useCheckboxGroup` is a custom hook that provides all the state management logic\nfor a group of checkboxes.\n\n## Import\n\n```js\nimport { useCheckboxGroup } from '@incmix-ui/react'\n```\n\n## Return value\n\nThe `useCheckboxGroup` hook returns following props\n\n| Name               | Type                                | Description                                                                                                             |\n| ------------------ | ----------------------------------- | ----------------------------------------------------------------------------------------------------------------------- |\n| `value`            | `StringOrNumber[]`                  | The value of checkbox group.                                                                                            |\n| `isDisabled`       | `boolean`                           | A function to set the boolean value to `false`.                                                                         |\n| `onChange`         | `(input: EventOrValue) => void`     | The onChange handler for the checkbox group.                                                                            |\n| `setValue`         | `(state: StringOrNumber[]) => void` | A function to set the value of the checkbox group.                                                                      |\n| `getCheckboxProps` | `(props?: Dict) => Dict`            | A function that takes checkbox props returns them with a onChange handler for the checkbox group and the checked state. |\n\n## Usage\n\n```jsx\nfunction Example() {\n  function CustomCheckbox(props) {\n    const { state, getCheckboxProps, getInputProps, getLabelProps, htmlProps } = useCheckbox(props)\n\n    return (\n      <incmix.label\n        display=\"flex\"\n        flexDirection=\"row\"\n        alignItems=\"center\"\n        gridColumnGap={2}\n        maxW=\"40\"\n        bg=\"green.50\"\n        border=\"1px solid\"\n        borderColor=\"green.500\"\n        rounded=\"lg\"\n        px={3}\n        py={1}\n        cursor=\"pointer\"\n        {...htmlProps}\n      >\n        <input {...getInputProps()} hidden />\n        <Flex\n          alignItems=\"center\"\n          justifyContent=\"center\"\n          border=\"2px solid\"\n          borderColor=\"green.500\"\n          w={4}\n          h={4}\n          {...getCheckboxProps()}\n        >\n          {state.isChecked && <Box w={2} h={2} bg=\"green.500\" />}\n        </Flex>\n        <Text color=\"gray.700\" {...getLabelProps()}>\n          Click me for {props.value}\n        </Text>\n      </incmix.label>\n    )\n  }\n\n  const { value, getCheckboxProps } = useCheckboxGroup({\n    defaultValue: ['2'],\n  })\n\n  return (\n    <Stack>\n      <Text>The selected checkboxes are: {value.sort().join(' and ')}</Text>\n      <CustomCheckbox {...getCheckboxProps({ value: '1' })} />\n      <CustomCheckbox {...getCheckboxProps({ value: '2' })} />\n      <CustomCheckbox {...getCheckboxProps({ value: '3' })} />\n    </Stack>\n  )\n}\n```\n\n## Parameters\n\nThe `useCheckboxGroup` hook accepts an object with the following properties:\n\n<PropsTable of=\"useCheckboxGroup\" />\n",
      "code": "var Component=(()=>{var a=Object.create;var c=Object.defineProperty;var p=Object.getOwnPropertyDescriptor;var u=Object.getOwnPropertyNames;var x=Object.getPrototypeOf,b=Object.prototype.hasOwnProperty;var g=(o,e)=>()=>(e||o((e={exports:{}}).exports,e),e.exports),m=(o,e)=>{for(var r in e)c(o,r,{get:e[r],enumerable:!0})},h=(o,e,r,d)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let t of u(e))!b.call(o,t)&&t!==r&&c(o,t,{get:()=>e[t],enumerable:!(d=p(e,t))||d.enumerable});return o};var k=(o,e,r)=>(r=o!=null?a(x(o)):{},h(e||!o||!o.__esModule?c(r,\"default\",{value:o,enumerable:!0}):r,o)),C=o=>h(c({},\"__esModule\",{value:!0}),o);var l=g((w,i)=>{i.exports=_jsx_runtime});var T={};m(T,{default:()=>P,frontmatter:()=>f});var n=k(l()),f={title:\"useCheckboxGroup\",package:\"@incmix-ui/checkbox\",description:\"React hooks to manage checkbox groups.\"};function s(o){let e=Object.assign({p:\"p\",code:\"code\",h2:\"h2\",pre:\"pre\",table:\"table\",thead:\"thead\",tr:\"tr\",th:\"th\",tbody:\"tbody\",td:\"td\"},o.components),{PropsTable:r}=e;return r||j(\"PropsTable\",!0),(0,n.jsxs)(n.Fragment,{children:[(0,n.jsxs)(e.p,{children:[(0,n.jsx)(e.code,{children:\"useCheckboxGroup\"}),` is a custom hook that provides all the state management logic\nfor a group of checkboxes.`]}),`\n`,(0,n.jsx)(e.h2,{id:\"import\",children:\"Import\"}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-js\",children:`import { useCheckboxGroup } from '@incmix-ui/react'\n`})}),`\n`,(0,n.jsx)(e.h2,{id:\"return-value\",children:\"Return value\"}),`\n`,(0,n.jsxs)(e.p,{children:[\"The \",(0,n.jsx)(e.code,{children:\"useCheckboxGroup\"}),\" hook returns following props\"]}),`\n`,(0,n.jsxs)(e.table,{children:[(0,n.jsx)(e.thead,{children:(0,n.jsxs)(e.tr,{children:[(0,n.jsx)(e.th,{children:\"Name\"}),(0,n.jsx)(e.th,{children:\"Type\"}),(0,n.jsx)(e.th,{children:\"Description\"})]})}),(0,n.jsxs)(e.tbody,{children:[(0,n.jsxs)(e.tr,{children:[(0,n.jsx)(e.td,{children:(0,n.jsx)(e.code,{children:\"value\"})}),(0,n.jsx)(e.td,{children:(0,n.jsx)(e.code,{children:\"StringOrNumber[]\"})}),(0,n.jsx)(e.td,{children:\"The value of checkbox group.\"})]}),(0,n.jsxs)(e.tr,{children:[(0,n.jsx)(e.td,{children:(0,n.jsx)(e.code,{children:\"isDisabled\"})}),(0,n.jsx)(e.td,{children:(0,n.jsx)(e.code,{children:\"boolean\"})}),(0,n.jsxs)(e.td,{children:[\"A function to set the boolean value to \",(0,n.jsx)(e.code,{children:\"false\"}),\".\"]})]}),(0,n.jsxs)(e.tr,{children:[(0,n.jsx)(e.td,{children:(0,n.jsx)(e.code,{children:\"onChange\"})}),(0,n.jsx)(e.td,{children:(0,n.jsx)(e.code,{children:\"(input: EventOrValue) => void\"})}),(0,n.jsx)(e.td,{children:\"The onChange handler for the checkbox group.\"})]}),(0,n.jsxs)(e.tr,{children:[(0,n.jsx)(e.td,{children:(0,n.jsx)(e.code,{children:\"setValue\"})}),(0,n.jsx)(e.td,{children:(0,n.jsx)(e.code,{children:\"(state: StringOrNumber[]) => void\"})}),(0,n.jsx)(e.td,{children:\"A function to set the value of the checkbox group.\"})]}),(0,n.jsxs)(e.tr,{children:[(0,n.jsx)(e.td,{children:(0,n.jsx)(e.code,{children:\"getCheckboxProps\"})}),(0,n.jsx)(e.td,{children:(0,n.jsx)(e.code,{children:\"(props?: Dict) => Dict\"})}),(0,n.jsx)(e.td,{children:\"A function that takes checkbox props returns them with a onChange handler for the checkbox group and the checked state.\"})]})]})]}),`\n`,(0,n.jsx)(e.h2,{id:\"usage\",children:\"Usage\"}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-jsx\",children:`function Example() {\n  function CustomCheckbox(props) {\n    const { state, getCheckboxProps, getInputProps, getLabelProps, htmlProps } = useCheckbox(props)\n\n    return (\n      <incmix.label\n        display=\"flex\"\n        flexDirection=\"row\"\n        alignItems=\"center\"\n        gridColumnGap={2}\n        maxW=\"40\"\n        bg=\"green.50\"\n        border=\"1px solid\"\n        borderColor=\"green.500\"\n        rounded=\"lg\"\n        px={3}\n        py={1}\n        cursor=\"pointer\"\n        {...htmlProps}\n      >\n        <input {...getInputProps()} hidden />\n        <Flex\n          alignItems=\"center\"\n          justifyContent=\"center\"\n          border=\"2px solid\"\n          borderColor=\"green.500\"\n          w={4}\n          h={4}\n          {...getCheckboxProps()}\n        >\n          {state.isChecked && <Box w={2} h={2} bg=\"green.500\" />}\n        </Flex>\n        <Text color=\"gray.700\" {...getLabelProps()}>\n          Click me for {props.value}\n        </Text>\n      </incmix.label>\n    )\n  }\n\n  const { value, getCheckboxProps } = useCheckboxGroup({\n    defaultValue: ['2'],\n  })\n\n  return (\n    <Stack>\n      <Text>The selected checkboxes are: {value.sort().join(' and ')}</Text>\n      <CustomCheckbox {...getCheckboxProps({ value: '1' })} />\n      <CustomCheckbox {...getCheckboxProps({ value: '2' })} />\n      <CustomCheckbox {...getCheckboxProps({ value: '3' })} />\n    </Stack>\n  )\n}\n`})}),`\n`,(0,n.jsx)(e.h2,{id:\"parameters\",children:\"Parameters\"}),`\n`,(0,n.jsxs)(e.p,{children:[\"The \",(0,n.jsx)(e.code,{children:\"useCheckboxGroup\"}),\" hook accepts an object with the following properties:\"]}),`\n`,(0,n.jsx)(r,{of:\"useCheckboxGroup\"})]})}function v(o={}){let{wrapper:e}=o.components||{};return e?(0,n.jsx)(e,Object.assign({},o,{children:(0,n.jsx)(s,o)})):s(o)}var P=v;function j(o,e){throw new Error(\"Expected \"+(e?\"component\":\"object\")+\" `\"+o+\"` to be defined: you likely forgot to import, pass, or provide it.\")}return C(T);})();\n;return Component;"
    },
    "_id": "docs/hooks/use-checkbox-group.mdx",
    "_raw": {
      "sourceFilePath": "docs/hooks/use-checkbox-group.mdx",
      "sourceFileName": "use-checkbox-group.mdx",
      "sourceFileDir": "docs/hooks",
      "contentType": "mdx",
      "flattenedPath": "docs/hooks/use-checkbox-group"
    },
    "type": "Doc",
    "slug": "/docs/hooks/use-checkbox-group",
    "frontMatter": {
      "title": "useCheckboxGroup",
      "package": "@incmix-ui/checkbox",
      "description": "React hooks to manage checkbox groups.",
      "slug": "/docs/hooks/use-checkbox-group",
      "editUrl": "https://github.com/incmix-ui/incmix-ui-docs/tree/main/content/docs/hooks/use-checkbox-group.mdx",
      "headings": [
        {
          "text": "Import",
          "id": "import",
          "level": "h2"
        },
        {
          "text": "Return value",
          "id": "return-value",
          "level": "h2"
        },
        {
          "text": "Usage",
          "id": "usage",
          "level": "h2"
        },
        {
          "text": "Parameters",
          "id": "parameters",
          "level": "h2"
        }
      ]
    }
  },
  {
    "title": "useCheckbox",
    "package": "@incmix-ui/checkbox",
    "description": "React hook to manage checkboxes.",
    "scope": "usage",
    "body": {
      "raw": "\n`useCheckbox` is a custom hook used to provide checkbox functionality, as well\nas state and focus management to custom checkbox components when using it.\n\n## Import\n\n```js\nimport { useCheckbox } from '@incmix-ui/react'\n```\n\n## Return value\n\nThe `useCheckbox` hook returns following props\n\n| Name               | Type            | Description                                                                 |\n| ------------------ | --------------- | --------------------------------------------------------------------------- |\n| `state`            | `CheckboxState` | An object that contains all props defining the current state of a checkbox. |\n| `getCheckboxProps` | `PropGetter`    | A function to get the props of the checkbox.                                |\n| `getInputProps`    | `PropGetter`    | A function to get the props of the input field.                             |\n| `getLabelProps`    | `PropGetter`    | A function to get the props of the checkbox label.                          |\n| `htmlProps`        | `{}`            | An object with all htmlProps.                                               |\n\n## Usage\n\n```jsx\nfunction Example() {\n  const CustomCheckbox = props => {\n    const { state, getCheckboxProps, getInputProps, getLabelProps, htmlProps } = useCheckbox(props)\n\n    return (\n      <incmix.label\n        display=\"flex\"\n        flexDirection=\"row\"\n        alignItems=\"center\"\n        gridColumnGap={2}\n        maxW=\"36\"\n        bg=\"green.50\"\n        border=\"1px solid\"\n        borderColor=\"green.500\"\n        rounded=\"lg\"\n        px={3}\n        py={1}\n        cursor=\"pointer\"\n        {...htmlProps}\n      >\n        <input {...getInputProps()} hidden />\n        <Flex\n          alignItems=\"center\"\n          justifyContent=\"center\"\n          border=\"2px solid\"\n          borderColor=\"green.500\"\n          w={4}\n          h={4}\n          {...getCheckboxProps()}\n        >\n          {state.isChecked && <Box w={2} h={2} bg=\"green.500\" />}\n        </Flex>\n        <Text color=\"gray.700\" {...getLabelProps()}>\n          Click me\n        </Text>\n      </incmix.label>\n    )\n  }\n\n  return (\n    <div>\n      <CustomCheckbox />\n    </div>\n  )\n}\n```\n\n## Parameters\n\nThe `useCheckbox` hook accepts an object with the following properties:\n\n<PropsTable of=\"useCheckbox\" />\n",
      "code": "var Component=(()=>{var a=Object.create;var c=Object.defineProperty;var p=Object.getOwnPropertyDescriptor;var u=Object.getOwnPropertyNames;var x=Object.getPrototypeOf,b=Object.prototype.hasOwnProperty;var m=(t,e)=>()=>(e||t((e={exports:{}}).exports,e),e.exports),g=(t,e)=>{for(var r in e)c(t,r,{get:e[r],enumerable:!0})},i=(t,e,r,d)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let o of u(e))!b.call(t,o)&&o!==r&&c(t,o,{get:()=>e[o],enumerable:!(d=p(e,o))||d.enumerable});return t};var f=(t,e,r)=>(r=t!=null?a(x(t)):{},i(e||!t||!t.__esModule?c(r,\"default\",{value:t,enumerable:!0}):r,t)),k=t=>i(c({},\"__esModule\",{value:!0}),t);var l=m((T,h)=>{h.exports=_jsx_runtime});var y={};g(y,{default:()=>j,frontmatter:()=>C});var n=f(l()),C={title:\"useCheckbox\",package:\"@incmix-ui/checkbox\",description:\"React hook to manage checkboxes.\"};function s(t){let e=Object.assign({p:\"p\",code:\"code\",h2:\"h2\",pre:\"pre\",table:\"table\",thead:\"thead\",tr:\"tr\",th:\"th\",tbody:\"tbody\",td:\"td\"},t.components),{PropsTable:r}=e;return r||w(\"PropsTable\",!0),(0,n.jsxs)(n.Fragment,{children:[(0,n.jsxs)(e.p,{children:[(0,n.jsx)(e.code,{children:\"useCheckbox\"}),` is a custom hook used to provide checkbox functionality, as well\nas state and focus management to custom checkbox components when using it.`]}),`\n`,(0,n.jsx)(e.h2,{id:\"import\",children:\"Import\"}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-js\",children:`import { useCheckbox } from '@incmix-ui/react'\n`})}),`\n`,(0,n.jsx)(e.h2,{id:\"return-value\",children:\"Return value\"}),`\n`,(0,n.jsxs)(e.p,{children:[\"The \",(0,n.jsx)(e.code,{children:\"useCheckbox\"}),\" hook returns following props\"]}),`\n`,(0,n.jsxs)(e.table,{children:[(0,n.jsx)(e.thead,{children:(0,n.jsxs)(e.tr,{children:[(0,n.jsx)(e.th,{children:\"Name\"}),(0,n.jsx)(e.th,{children:\"Type\"}),(0,n.jsx)(e.th,{children:\"Description\"})]})}),(0,n.jsxs)(e.tbody,{children:[(0,n.jsxs)(e.tr,{children:[(0,n.jsx)(e.td,{children:(0,n.jsx)(e.code,{children:\"state\"})}),(0,n.jsx)(e.td,{children:(0,n.jsx)(e.code,{children:\"CheckboxState\"})}),(0,n.jsx)(e.td,{children:\"An object that contains all props defining the current state of a checkbox.\"})]}),(0,n.jsxs)(e.tr,{children:[(0,n.jsx)(e.td,{children:(0,n.jsx)(e.code,{children:\"getCheckboxProps\"})}),(0,n.jsx)(e.td,{children:(0,n.jsx)(e.code,{children:\"PropGetter\"})}),(0,n.jsx)(e.td,{children:\"A function to get the props of the checkbox.\"})]}),(0,n.jsxs)(e.tr,{children:[(0,n.jsx)(e.td,{children:(0,n.jsx)(e.code,{children:\"getInputProps\"})}),(0,n.jsx)(e.td,{children:(0,n.jsx)(e.code,{children:\"PropGetter\"})}),(0,n.jsx)(e.td,{children:\"A function to get the props of the input field.\"})]}),(0,n.jsxs)(e.tr,{children:[(0,n.jsx)(e.td,{children:(0,n.jsx)(e.code,{children:\"getLabelProps\"})}),(0,n.jsx)(e.td,{children:(0,n.jsx)(e.code,{children:\"PropGetter\"})}),(0,n.jsx)(e.td,{children:\"A function to get the props of the checkbox label.\"})]}),(0,n.jsxs)(e.tr,{children:[(0,n.jsx)(e.td,{children:(0,n.jsx)(e.code,{children:\"htmlProps\"})}),(0,n.jsx)(e.td,{children:(0,n.jsx)(e.code,{children:\"{}\"})}),(0,n.jsx)(e.td,{children:\"An object with all htmlProps.\"})]})]})]}),`\n`,(0,n.jsx)(e.h2,{id:\"usage\",children:\"Usage\"}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-jsx\",children:`function Example() {\n  const CustomCheckbox = props => {\n    const { state, getCheckboxProps, getInputProps, getLabelProps, htmlProps } = useCheckbox(props)\n\n    return (\n      <incmix.label\n        display=\"flex\"\n        flexDirection=\"row\"\n        alignItems=\"center\"\n        gridColumnGap={2}\n        maxW=\"36\"\n        bg=\"green.50\"\n        border=\"1px solid\"\n        borderColor=\"green.500\"\n        rounded=\"lg\"\n        px={3}\n        py={1}\n        cursor=\"pointer\"\n        {...htmlProps}\n      >\n        <input {...getInputProps()} hidden />\n        <Flex\n          alignItems=\"center\"\n          justifyContent=\"center\"\n          border=\"2px solid\"\n          borderColor=\"green.500\"\n          w={4}\n          h={4}\n          {...getCheckboxProps()}\n        >\n          {state.isChecked && <Box w={2} h={2} bg=\"green.500\" />}\n        </Flex>\n        <Text color=\"gray.700\" {...getLabelProps()}>\n          Click me\n        </Text>\n      </incmix.label>\n    )\n  }\n\n  return (\n    <div>\n      <CustomCheckbox />\n    </div>\n  )\n}\n`})}),`\n`,(0,n.jsx)(e.h2,{id:\"parameters\",children:\"Parameters\"}),`\n`,(0,n.jsxs)(e.p,{children:[\"The \",(0,n.jsx)(e.code,{children:\"useCheckbox\"}),\" hook accepts an object with the following properties:\"]}),`\n`,(0,n.jsx)(r,{of:\"useCheckbox\"})]})}function P(t={}){let{wrapper:e}=t.components||{};return e?(0,n.jsx)(e,Object.assign({},t,{children:(0,n.jsx)(s,t)})):s(t)}var j=P;function w(t,e){throw new Error(\"Expected \"+(e?\"component\":\"object\")+\" `\"+t+\"` to be defined: you likely forgot to import, pass, or provide it.\")}return k(y);})();\n;return Component;"
    },
    "_id": "docs/hooks/use-checkbox.mdx",
    "_raw": {
      "sourceFilePath": "docs/hooks/use-checkbox.mdx",
      "sourceFileName": "use-checkbox.mdx",
      "sourceFileDir": "docs/hooks",
      "contentType": "mdx",
      "flattenedPath": "docs/hooks/use-checkbox"
    },
    "type": "Doc",
    "slug": "/docs/hooks/use-checkbox",
    "frontMatter": {
      "title": "useCheckbox",
      "package": "@incmix-ui/checkbox",
      "description": "React hook to manage checkboxes.",
      "slug": "/docs/hooks/use-checkbox",
      "editUrl": "https://github.com/incmix-ui/incmix-ui-docs/tree/main/content/docs/hooks/use-checkbox.mdx",
      "headings": [
        {
          "text": "Import",
          "id": "import",
          "level": "h2"
        },
        {
          "text": "Return value",
          "id": "return-value",
          "level": "h2"
        },
        {
          "text": "Usage",
          "id": "usage",
          "level": "h2"
        },
        {
          "text": "Parameters",
          "id": "parameters",
          "level": "h2"
        }
      ]
    }
  },
  {
    "title": "useClipboard",
    "package": "@incmix-ui/hooks",
    "description": "useClipboard is a custom hook that handles copying content to clipboard.",
    "scope": "usage",
    "body": {
      "raw": "\n`useClipboard` is a custom hook that handles copying content to clipboard.\n\n## Arguments\n\nThe `useClipboard` hook takes the following arguments:\n\n| Name               | Type                 | Required | Description                                                                                                                                                                      |\n| ------------------ | -------------------- | -------- | -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| `text`             | `string`             | `true`   | The text or value that is to be copied.                                                                                                                                          |\n| `optionsOrTimeout` | `number` or `object` | `false`  | The timeout as a `number` or an `object` containing 2 properties: `timeout` and `format` for the MIME type. The timeout is measured in milliseconds and has a default of 1500ms. |\n\n## Return value\n\nThe `useClipboard` hook returns an object with the following fields:\n\n| Name        | Type       | Default | Description                                                                                                                                                                       |\n| ----------- | ---------- | ------- | --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| `value`     | `string`   |         | The copied value.                                                                                                                                                                 |\n| `onCopy`    | `function` |         | Callback function to copy content.                                                                                                                                                |\n| `hasCopied` | `boolean`  | `false` | If `true`, the content has been copied within the last `timeout` milliseconds. That is, it is set to true right after `onCopy` is called, and `false` after `timeout` has passed. |\n\n## Import\n\n```js\nimport { useClipboard } from '@incmix-ui/react'\n```\n\n## Usage\n\n```jsx\nfunction Example() {\n  const [value, setValue] = React.useState('Hello world')\n  const { hasCopied, onCopy } = useClipboard(value)\n\n  return (\n    <>\n      <Flex mb={2}>\n        <Input value={value} isReadOnly placeholder=\"Welcome\" />\n        <Button onClick={onCopy} ml={2}>\n          {hasCopied ? 'Copied' : 'Copy'}\n        </Button>\n      </Flex>\n      <Editable placeholder=\"Paste here\">\n        <EditablePreview width=\"100%\" />\n        <EditableInput />\n      </Editable>\n    </>\n  )\n}\n```\n",
      "code": "var Component=(()=>{var s=Object.create;var c=Object.defineProperty;var u=Object.getOwnPropertyDescriptor;var p=Object.getOwnPropertyNames;var m=Object.getPrototypeOf,b=Object.prototype.hasOwnProperty;var f=(t,e)=>()=>(e||t((e={exports:{}}).exports,e),e.exports),g=(t,e)=>{for(var d in e)c(t,d,{get:e[d],enumerable:!0})},l=(t,e,d,r)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let i of p(e))!b.call(t,i)&&i!==d&&c(t,i,{get:()=>e[i],enumerable:!(r=u(e,i))||r.enumerable});return t};var C=(t,e,d)=>(d=t!=null?s(m(t)):{},l(e||!t||!t.__esModule?c(d,\"default\",{value:t,enumerable:!0}):d,t)),x=t=>l(c({},\"__esModule\",{value:!0}),t);var h=f((w,o)=>{o.exports=_jsx_runtime});var T={};g(T,{default:()=>v,frontmatter:()=>y});var n=C(h()),y={title:\"useClipboard\",package:\"@incmix-ui/hooks\",description:\"useClipboard is a custom hook that handles copying content to clipboard.\"};function a(t){let e=Object.assign({p:\"p\",code:\"code\",h2:\"h2\",table:\"table\",thead:\"thead\",tr:\"tr\",th:\"th\",tbody:\"tbody\",td:\"td\",pre:\"pre\"},t.components);return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsxs)(e.p,{children:[(0,n.jsx)(e.code,{children:\"useClipboard\"}),\" is a custom hook that handles copying content to clipboard.\"]}),`\n`,(0,n.jsx)(e.h2,{id:\"arguments\",children:\"Arguments\"}),`\n`,(0,n.jsxs)(e.p,{children:[\"The \",(0,n.jsx)(e.code,{children:\"useClipboard\"}),\" hook takes the following arguments:\"]}),`\n`,(0,n.jsxs)(e.table,{children:[(0,n.jsx)(e.thead,{children:(0,n.jsxs)(e.tr,{children:[(0,n.jsx)(e.th,{children:\"Name\"}),(0,n.jsx)(e.th,{children:\"Type\"}),(0,n.jsx)(e.th,{children:\"Required\"}),(0,n.jsx)(e.th,{children:\"Description\"})]})}),(0,n.jsxs)(e.tbody,{children:[(0,n.jsxs)(e.tr,{children:[(0,n.jsx)(e.td,{children:(0,n.jsx)(e.code,{children:\"text\"})}),(0,n.jsx)(e.td,{children:(0,n.jsx)(e.code,{children:\"string\"})}),(0,n.jsx)(e.td,{children:(0,n.jsx)(e.code,{children:\"true\"})}),(0,n.jsx)(e.td,{children:\"The text or value that is to be copied.\"})]}),(0,n.jsxs)(e.tr,{children:[(0,n.jsx)(e.td,{children:(0,n.jsx)(e.code,{children:\"optionsOrTimeout\"})}),(0,n.jsxs)(e.td,{children:[(0,n.jsx)(e.code,{children:\"number\"}),\" or \",(0,n.jsx)(e.code,{children:\"object\"})]}),(0,n.jsx)(e.td,{children:(0,n.jsx)(e.code,{children:\"false\"})}),(0,n.jsxs)(e.td,{children:[\"The timeout as a \",(0,n.jsx)(e.code,{children:\"number\"}),\" or an \",(0,n.jsx)(e.code,{children:\"object\"}),\" containing 2 properties: \",(0,n.jsx)(e.code,{children:\"timeout\"}),\" and \",(0,n.jsx)(e.code,{children:\"format\"}),\" for the MIME type. The timeout is measured in milliseconds and has a default of 1500ms.\"]})]})]})]}),`\n`,(0,n.jsx)(e.h2,{id:\"return-value\",children:\"Return value\"}),`\n`,(0,n.jsxs)(e.p,{children:[\"The \",(0,n.jsx)(e.code,{children:\"useClipboard\"}),\" hook returns an object with the following fields:\"]}),`\n`,(0,n.jsxs)(e.table,{children:[(0,n.jsx)(e.thead,{children:(0,n.jsxs)(e.tr,{children:[(0,n.jsx)(e.th,{children:\"Name\"}),(0,n.jsx)(e.th,{children:\"Type\"}),(0,n.jsx)(e.th,{children:\"Default\"}),(0,n.jsx)(e.th,{children:\"Description\"})]})}),(0,n.jsxs)(e.tbody,{children:[(0,n.jsxs)(e.tr,{children:[(0,n.jsx)(e.td,{children:(0,n.jsx)(e.code,{children:\"value\"})}),(0,n.jsx)(e.td,{children:(0,n.jsx)(e.code,{children:\"string\"})}),(0,n.jsx)(e.td,{}),(0,n.jsx)(e.td,{children:\"The copied value.\"})]}),(0,n.jsxs)(e.tr,{children:[(0,n.jsx)(e.td,{children:(0,n.jsx)(e.code,{children:\"onCopy\"})}),(0,n.jsx)(e.td,{children:(0,n.jsx)(e.code,{children:\"function\"})}),(0,n.jsx)(e.td,{}),(0,n.jsx)(e.td,{children:\"Callback function to copy content.\"})]}),(0,n.jsxs)(e.tr,{children:[(0,n.jsx)(e.td,{children:(0,n.jsx)(e.code,{children:\"hasCopied\"})}),(0,n.jsx)(e.td,{children:(0,n.jsx)(e.code,{children:\"boolean\"})}),(0,n.jsx)(e.td,{children:(0,n.jsx)(e.code,{children:\"false\"})}),(0,n.jsxs)(e.td,{children:[\"If \",(0,n.jsx)(e.code,{children:\"true\"}),\", the content has been copied within the last \",(0,n.jsx)(e.code,{children:\"timeout\"}),\" milliseconds. That is, it is set to true right after \",(0,n.jsx)(e.code,{children:\"onCopy\"}),\" is called, and \",(0,n.jsx)(e.code,{children:\"false\"}),\" after \",(0,n.jsx)(e.code,{children:\"timeout\"}),\" has passed.\"]})]})]})]}),`\n`,(0,n.jsx)(e.h2,{id:\"import\",children:\"Import\"}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-js\",children:`import { useClipboard } from '@incmix-ui/react'\n`})}),`\n`,(0,n.jsx)(e.h2,{id:\"usage\",children:\"Usage\"}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-jsx\",children:`function Example() {\n  const [value, setValue] = React.useState('Hello world')\n  const { hasCopied, onCopy } = useClipboard(value)\n\n  return (\n    <>\n      <Flex mb={2}>\n        <Input value={value} isReadOnly placeholder=\"Welcome\" />\n        <Button onClick={onCopy} ml={2}>\n          {hasCopied ? 'Copied' : 'Copy'}\n        </Button>\n      </Flex>\n      <Editable placeholder=\"Paste here\">\n        <EditablePreview width=\"100%\" />\n        <EditableInput />\n      </Editable>\n    </>\n  )\n}\n`})})]})}function j(t={}){let{wrapper:e}=t.components||{};return e?(0,n.jsx)(e,Object.assign({},t,{children:(0,n.jsx)(a,t)})):a(t)}var v=j;return x(T);})();\n;return Component;"
    },
    "_id": "docs/hooks/use-clipboard.mdx",
    "_raw": {
      "sourceFilePath": "docs/hooks/use-clipboard.mdx",
      "sourceFileName": "use-clipboard.mdx",
      "sourceFileDir": "docs/hooks",
      "contentType": "mdx",
      "flattenedPath": "docs/hooks/use-clipboard"
    },
    "type": "Doc",
    "slug": "/docs/hooks/use-clipboard",
    "frontMatter": {
      "title": "useClipboard",
      "package": "@incmix-ui/hooks",
      "description": "useClipboard is a custom hook that handles copying content to clipboard.",
      "slug": "/docs/hooks/use-clipboard",
      "editUrl": "https://github.com/incmix-ui/incmix-ui-docs/tree/main/content/docs/hooks/use-clipboard.mdx",
      "headings": [
        {
          "text": "Arguments",
          "id": "arguments",
          "level": "h2"
        },
        {
          "text": "Return value",
          "id": "return-value",
          "level": "h2"
        },
        {
          "text": "Import",
          "id": "import",
          "level": "h2"
        },
        {
          "text": "Usage",
          "id": "usage",
          "level": "h2"
        }
      ]
    }
  },
  {
    "title": "useConst",
    "package": "@incmix-ui/hooks",
    "description": "React hook to initialize and return a constant value",
    "scope": "usage",
    "body": {
      "raw": "\n`useConst` is a custom hook used to initialize and return a constant value.\nUnlike `useMemo`, this will always return the same value, and if the\ninitializer is a function, only call it once.\n\n## Import\n\n```js\nimport { useConst } from '@incmix-ui/react'\n```\n\n## Parameters\n\nThe hook `useConst` accepts the initial value, or a function to get the initial value.\n\n## Usage\n\n```jsx\nfunction Example() {\n  const mountTime = useConst(() => new Date().toTimeString())\n  const obj = useConst({ a: Math.random() })\n  return (\n    <>\n      <p>Mount time: {mountTime}</p>\n      <p>Value from constant object: {obj.a}</p>\n    </>\n  )\n}\n```\n\n## Why not use `useMemo`?\n\nThe React documentation says that the engine may choose to “forget” some\npreviously memoized values and recalculate them on next render, and you should\nwrite your code so that it still works without `useMemo` and then add it to\noptimize performance.\n\nYou should use `useMemo` only when you need to recalculate the value based on\ndependencies.\n\n## Why not use `useState`?\n\n```jsx\nfunction Example() {\n  const [value] = useState(new Date().toTimeString())\n  return <p>Mount time: {value}</p>\n}\n```\n\nThis will work as a constant, but this is semantically wrong and it's expensive\ndue to reducer handling which we don't need.\n",
      "code": "var Component=(()=>{var u=Object.create;var a=Object.defineProperty;var h=Object.getOwnPropertyDescriptor;var m=Object.getOwnPropertyNames;var p=Object.getPrototypeOf,g=Object.prototype.hasOwnProperty;var x=(t,e)=>()=>(e||t((e={exports:{}}).exports,e),e.exports),w=(t,e)=>{for(var o in e)a(t,o,{get:e[o],enumerable:!0})},c=(t,e,o,s)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let i of m(e))!g.call(t,i)&&i!==o&&a(t,i,{get:()=>e[i],enumerable:!(s=h(e,i))||s.enumerable});return t};var y=(t,e,o)=>(o=t!=null?u(p(t)):{},c(e||!t||!t.__esModule?a(o,\"default\",{value:t,enumerable:!0}):o,t)),f=t=>c(a({},\"__esModule\",{value:!0}),t);var l=x((b,r)=>{r.exports=_jsx_runtime});var k={};w(k,{default:()=>M,frontmatter:()=>j});var n=y(l()),j={title:\"useConst\",package:\"@incmix-ui/hooks\",description:\"React hook to initialize and return a constant value\"};function d(t){let e=Object.assign({p:\"p\",code:\"code\",h2:\"h2\",pre:\"pre\"},t.components);return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsxs)(e.p,{children:[(0,n.jsx)(e.code,{children:\"useConst\"}),` is a custom hook used to initialize and return a constant value.\nUnlike `,(0,n.jsx)(e.code,{children:\"useMemo\"}),`, this will always return the same value, and if the\ninitializer is a function, only call it once.`]}),`\n`,(0,n.jsx)(e.h2,{id:\"import\",children:\"Import\"}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-js\",children:`import { useConst } from '@incmix-ui/react'\n`})}),`\n`,(0,n.jsx)(e.h2,{id:\"parameters\",children:\"Parameters\"}),`\n`,(0,n.jsxs)(e.p,{children:[\"The hook \",(0,n.jsx)(e.code,{children:\"useConst\"}),\" accepts the initial value, or a function to get the initial value.\"]}),`\n`,(0,n.jsx)(e.h2,{id:\"usage\",children:\"Usage\"}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-jsx\",children:`function Example() {\n  const mountTime = useConst(() => new Date().toTimeString())\n  const obj = useConst({ a: Math.random() })\n  return (\n    <>\n      <p>Mount time: {mountTime}</p>\n      <p>Value from constant object: {obj.a}</p>\n    </>\n  )\n}\n`})}),`\n`,(0,n.jsxs)(e.h2,{id:\"why-not-use-usememo\",children:[\"Why not use \",(0,n.jsx)(e.code,{children:\"useMemo\"}),\"?\"]}),`\n`,(0,n.jsxs)(e.p,{children:[`The React documentation says that the engine may choose to \\u201Cforget\\u201D some\npreviously memoized values and recalculate them on next render, and you should\nwrite your code so that it still works without `,(0,n.jsx)(e.code,{children:\"useMemo\"}),` and then add it to\noptimize performance.`]}),`\n`,(0,n.jsxs)(e.p,{children:[\"You should use \",(0,n.jsx)(e.code,{children:\"useMemo\"}),` only when you need to recalculate the value based on\ndependencies.`]}),`\n`,(0,n.jsxs)(e.h2,{id:\"why-not-use-usestate\",children:[\"Why not use \",(0,n.jsx)(e.code,{children:\"useState\"}),\"?\"]}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-jsx\",children:`function Example() {\n  const [value] = useState(new Date().toTimeString())\n  return <p>Mount time: {value}</p>\n}\n`})}),`\n`,(0,n.jsx)(e.p,{children:`This will work as a constant, but this is semantically wrong and it's expensive\ndue to reducer handling which we don't need.`})]})}function v(t={}){let{wrapper:e}=t.components||{};return e?(0,n.jsx)(e,Object.assign({},t,{children:(0,n.jsx)(d,t)})):d(t)}var M=v;return f(k);})();\n;return Component;"
    },
    "_id": "docs/hooks/use-const.mdx",
    "_raw": {
      "sourceFilePath": "docs/hooks/use-const.mdx",
      "sourceFileName": "use-const.mdx",
      "sourceFileDir": "docs/hooks",
      "contentType": "mdx",
      "flattenedPath": "docs/hooks/use-const"
    },
    "type": "Doc",
    "slug": "/docs/hooks/use-const",
    "frontMatter": {
      "title": "useConst",
      "package": "@incmix-ui/hooks",
      "description": "React hook to initialize and return a constant value",
      "slug": "/docs/hooks/use-const",
      "editUrl": "https://github.com/incmix-ui/incmix-ui-docs/tree/main/content/docs/hooks/use-const.mdx",
      "headings": [
        {
          "text": "Import",
          "id": "import",
          "level": "h2"
        },
        {
          "text": "Parameters",
          "id": "parameters",
          "level": "h2"
        },
        {
          "text": "Usage",
          "id": "usage",
          "level": "h2"
        },
        {
          "text": "Why not use `useMemo`?",
          "id": "why-not-use-usememo",
          "level": "h2"
        },
        {
          "text": "Why not use `useState`?",
          "id": "why-not-use-usestate",
          "level": "h2"
        }
      ]
    }
  },
  {
    "title": "useControllableState",
    "package": "@incmix-ui/hooks",
    "description": "React hook to handle controlled vs uncontrolled component scenarios",
    "scope": "usage",
    "body": {
      "raw": "\nReact hook that allows any component handle\n[controlled](https://reactjs.org/docs/forms.html#controlled-components) and\n[uncontrolled](https://reactjs.org/docs/uncontrolled-components.html) modes, and\nprovide control over its internal state.\n\nMost Incmix components use the `useControllableState` for seamlessly managing\nboth controlled or uncontrolled state scenarios.\n\n## Import\n\n```js\nimport { useControllableProp, useControllableState } from '@incmix-ui/react'\n```\n\n## useControllableProp\n\nGiven a prop value and state value, the `useControllableProp` hook is used to\ndetermine whether a component is controlled or uncontrolled, and also returns\nthe computed value.\n\n- It returns the prop value if the component is controlled\n- It returns the state value if the component is uncontrolled\n\n### Usage\n\n```jsx live=false\nconst [isControlled, value] = useControllableProp(propValue, stateValue)\n```\n\n## useControllableState\n\nThe `useControllableState` hook returns the state and function that updates the\nstate, just like `React.useState` does.\n\n```js live=false\nconst [value, setValue] = useControllableState(options)\n```\n\n### Usage\n\nWith `useControllableState`, you can pass an initial state (using\n`defaultValue`) implying the component is uncontrolled, or you can pass a\ncontrolled value (using `value`) implying the component is controlled.\n\nHere's an example of an uncontrolled state.\n\n```jsx\nfunction Example() {\n  const [value, setValue] = useControllableState({ defaultValue: 40 })\n  return (\n    <div>\n      <Button onClick={() => setValue(value + 1)}>+</Button>\n      <Box as=\"span\" w=\"200px\" mx=\"24px\">\n        {value}\n      </Box>\n      <Button onClick={() => setValue(value - 1)}>-</Button>\n    </div>\n  )\n}\n```\n\nHere's an example of a controlled state.\n\n```jsx\nfunction Example() {\n  // you need a state and updater to change the value\n  const [value, setValue] = React.useState(40)\n\n  const [internalValue, setInternalValue] = useControllableState({\n    value,\n    onChange: setValue,\n  })\n\n  return (\n    <div>\n      <Button onClick={() => setInternalValue(value + 1)}>+</Button>\n      <Box as=\"span\" w=\"200px\" mx=\"24px\">\n        {internalValue}\n      </Box>\n      <Button onClick={() => setInternalValue(value - 1)}>-</Button>\n    </div>\n  )\n}\n```\n\n### Contextual feedback and State updates\n\nThis hook provides helpful error or warning messages **when you switch between\ncontrolled or uncontrolled modes** or **when you attempt to update the\n`defaultValue` passed.**\n\n## Props\n\n<PropsTable of=\"useControllableState\" />\n",
      "code": "var Component=(()=>{var u=Object.create;var a=Object.defineProperty;var h=Object.getOwnPropertyDescriptor;var p=Object.getOwnPropertyNames;var m=Object.getPrototypeOf,g=Object.prototype.hasOwnProperty;var x=(t,e)=>()=>(e||t((e={exports:{}}).exports,e),e.exports),f=(t,e)=>{for(var o in e)a(t,o,{get:e[o],enumerable:!0})},s=(t,e,o,r)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let l of p(e))!g.call(t,l)&&l!==o&&a(t,l,{get:()=>e[l],enumerable:!(r=h(e,l))||r.enumerable});return t};var v=(t,e,o)=>(o=t!=null?u(m(t)):{},s(e||!t||!t.__esModule?a(o,\"default\",{value:t,enumerable:!0}):o,t)),b=t=>s(a({},\"__esModule\",{value:!0}),t);var d=x((y,c)=>{c.exports=_jsx_runtime});var S={};f(S,{default:()=>V,frontmatter:()=>C});var n=v(d()),C={title:\"useControllableState\",package:\"@incmix-ui/hooks\",description:\"React hook to handle controlled vs uncontrolled component scenarios\"};function i(t){let e=Object.assign({p:\"p\",a:\"a\",code:\"code\",h2:\"h2\",pre:\"pre\",ul:\"ul\",li:\"li\",h3:\"h3\",strong:\"strong\"},t.components),{PropsTable:o}=e;return o||k(\"PropsTable\",!0),(0,n.jsxs)(n.Fragment,{children:[(0,n.jsxs)(e.p,{children:[`React hook that allows any component handle\n`,(0,n.jsx)(e.a,{href:\"https://reactjs.org/docs/forms.html#controlled-components\",children:\"controlled\"}),` and\n`,(0,n.jsx)(e.a,{href:\"https://reactjs.org/docs/uncontrolled-components.html\",children:\"uncontrolled\"}),` modes, and\nprovide control over its internal state.`]}),`\n`,(0,n.jsxs)(e.p,{children:[\"Most Incmix components use the \",(0,n.jsx)(e.code,{children:\"useControllableState\"}),` for seamlessly managing\nboth controlled or uncontrolled state scenarios.`]}),`\n`,(0,n.jsx)(e.h2,{id:\"import\",children:\"Import\"}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-js\",children:`import { useControllableProp, useControllableState } from '@incmix-ui/react'\n`})}),`\n`,(0,n.jsx)(e.h2,{id:\"usecontrollableprop\",children:\"useControllableProp\"}),`\n`,(0,n.jsxs)(e.p,{children:[\"Given a prop value and state value, the \",(0,n.jsx)(e.code,{children:\"useControllableProp\"}),` hook is used to\ndetermine whether a component is controlled or uncontrolled, and also returns\nthe computed value.`]}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsx)(e.li,{children:\"It returns the prop value if the component is controlled\"}),`\n`,(0,n.jsx)(e.li,{children:\"It returns the state value if the component is uncontrolled\"}),`\n`]}),`\n`,(0,n.jsx)(e.h3,{id:\"usage\",children:\"Usage\"}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-jsx\",live:\"false\",children:`const [isControlled, value] = useControllableProp(propValue, stateValue)\n`})}),`\n`,(0,n.jsx)(e.h2,{id:\"usecontrollablestate\",children:\"useControllableState\"}),`\n`,(0,n.jsxs)(e.p,{children:[\"The \",(0,n.jsx)(e.code,{children:\"useControllableState\"}),` hook returns the state and function that updates the\nstate, just like `,(0,n.jsx)(e.code,{children:\"React.useState\"}),\" does.\"]}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-js\",live:\"false\",children:`const [value, setValue] = useControllableState(options)\n`})}),`\n`,(0,n.jsx)(e.h3,{id:\"usage-1\",children:\"Usage\"}),`\n`,(0,n.jsxs)(e.p,{children:[\"With \",(0,n.jsx)(e.code,{children:\"useControllableState\"}),`, you can pass an initial state (using\n`,(0,n.jsx)(e.code,{children:\"defaultValue\"}),`) implying the component is uncontrolled, or you can pass a\ncontrolled value (using `,(0,n.jsx)(e.code,{children:\"value\"}),\") implying the component is controlled.\"]}),`\n`,(0,n.jsx)(e.p,{children:\"Here's an example of an uncontrolled state.\"}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-jsx\",children:`function Example() {\n  const [value, setValue] = useControllableState({ defaultValue: 40 })\n  return (\n    <div>\n      <Button onClick={() => setValue(value + 1)}>+</Button>\n      <Box as=\"span\" w=\"200px\" mx=\"24px\">\n        {value}\n      </Box>\n      <Button onClick={() => setValue(value - 1)}>-</Button>\n    </div>\n  )\n}\n`})}),`\n`,(0,n.jsx)(e.p,{children:\"Here's an example of a controlled state.\"}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-jsx\",children:`function Example() {\n  // you need a state and updater to change the value\n  const [value, setValue] = React.useState(40)\n\n  const [internalValue, setInternalValue] = useControllableState({\n    value,\n    onChange: setValue,\n  })\n\n  return (\n    <div>\n      <Button onClick={() => setInternalValue(value + 1)}>+</Button>\n      <Box as=\"span\" w=\"200px\" mx=\"24px\">\n        {internalValue}\n      </Box>\n      <Button onClick={() => setInternalValue(value - 1)}>-</Button>\n    </div>\n  )\n}\n`})}),`\n`,(0,n.jsx)(e.h3,{id:\"contextual-feedback-and-state-updates\",children:\"Contextual feedback and State updates\"}),`\n`,(0,n.jsxs)(e.p,{children:[\"This hook provides helpful error or warning messages \",(0,n.jsx)(e.strong,{children:`when you switch between\ncontrolled or uncontrolled modes`}),\" or \",(0,n.jsxs)(e.strong,{children:[`when you attempt to update the\n`,(0,n.jsx)(e.code,{children:\"defaultValue\"}),\" passed.\"]})]}),`\n`,(0,n.jsx)(e.h2,{id:\"props\",children:\"Props\"}),`\n`,(0,n.jsx)(o,{of:\"useControllableState\"})]})}function j(t={}){let{wrapper:e}=t.components||{};return e?(0,n.jsx)(e,Object.assign({},t,{children:(0,n.jsx)(i,t)})):i(t)}var V=j;function k(t,e){throw new Error(\"Expected \"+(e?\"component\":\"object\")+\" `\"+t+\"` to be defined: you likely forgot to import, pass, or provide it.\")}return b(S);})();\n;return Component;"
    },
    "_id": "docs/hooks/use-controllable.mdx",
    "_raw": {
      "sourceFilePath": "docs/hooks/use-controllable.mdx",
      "sourceFileName": "use-controllable.mdx",
      "sourceFileDir": "docs/hooks",
      "contentType": "mdx",
      "flattenedPath": "docs/hooks/use-controllable"
    },
    "type": "Doc",
    "slug": "/docs/hooks/use-controllable",
    "frontMatter": {
      "title": "useControllableState",
      "package": "@incmix-ui/hooks",
      "description": "React hook to handle controlled vs uncontrolled component scenarios",
      "slug": "/docs/hooks/use-controllable",
      "editUrl": "https://github.com/incmix-ui/incmix-ui-docs/tree/main/content/docs/hooks/use-controllable.mdx",
      "headings": [
        {
          "text": "Import",
          "id": "import",
          "level": "h2"
        },
        {
          "text": "useControllableProp",
          "id": "usecontrollableprop",
          "level": "h2"
        },
        {
          "text": "Usage",
          "id": "usage",
          "level": "h3"
        },
        {
          "text": "useControllableState",
          "id": "usecontrollablestate",
          "level": "h2"
        },
        {
          "text": "Usage",
          "id": "usage",
          "level": "h3"
        },
        {
          "text": "Contextual feedback and State updates",
          "id": "contextual-feedback-and-state-updates",
          "level": "h3"
        },
        {
          "text": "Props",
          "id": "props",
          "level": "h2"
        }
      ]
    }
  },
  {
    "title": "useDimensions",
    "package": "@incmix-ui/hooks",
    "description": "React hook to measure dimensions of the referenced element",
    "scope": "usage",
    "body": {
      "raw": "\n`useDimensions` is a custom hook that measures dimensions of the referenced\nelement based on its box-model.\n\n## Import\n\n```js\nimport { useDimensions } from '@incmix-ui/react'\n```\n\n## Return value\n\nThis hook returns an object with the properties `marginBox`, `paddingBox`,\n`borderBox`, `contentBox`, `border`, `padding`, and `margin`.\n\nEach of these properties contains a nested object which provides values\nrespective to that property:\n\n| Value:     | Contents:                                                    |\n| ---------- | ------------------------------------------------------------ |\n| marginBox  | top, right, bottom, left, width, height, x, y, center (x, y) |\n| borderBox  | top, right, bottom, left, width, height, x, y, center (x, y) |\n| paddingBox | top, right, bottom, left, width, height, x, y, center (x, y) |\n| contentBox | top, right, bottom, left, width, height, x, y, center (x, y) |\n| border     | top, right, bottom, left                                     |\n| padding    | top, right, bottom, left                                     |\n| margin     | top, right, bottom, left                                     |\n\n## Usage\n\n```jsx\nfunction example() {\n  const elementRef = useRef()\n  const dimensions = useDimensions(elementRef)\n\n  return (\n    <Box ref={elementRef} color=\"white\" width=\"fit-content\" bg=\"blue.700\" p={4}>\n      <Heading>\n        <code>borderBox</code> dimensions\n      </Heading>\n      <List>\n        <ListItem>The Width: {dimensions && dimensions.borderBox.width}</ListItem>\n        <ListItem>The x coordinate: {dimensions && dimensions.borderBox.x}</ListItem>\n      </List>\n    </Box>\n  )\n}\n```\n\n### With `observe` Parameter\n\nWith the second parameter set to `true`, the hook will attach the `resize` and\n`scroll` events to the window object. This will recalculate the reference\nelement's dimensions on scroll or resize of the page.\n\n```jsx\nfunction example() {\n  const elementRef = useRef()\n  const dimensions = useDimensions(elementRef, true)\n\n  return (\n    <>\n      <Textarea ref={elementRef} value=\"Resize this field's height, then either scroll or resize the page.\" />\n      <Box>Changing height: {dimensions && dimensions.borderBox.height}</Box>\n    </>\n  )\n}\n```\n\n## Parameters\n\n| Parameter            | Type                     | Description                                                                                                             |\n| -------------------- | ------------------------ | ----------------------------------------------------------------------------------------------------------------------- |\n| `ref`                | `RefObject<HTMLElement>` | Reference to the element you want to measure                                                                            |\n| `observe (optional)` | `boolean`                | If set to true, the `resize` and `scroll` events will be attached to the window and update the dimensions on each event |\n",
      "code": "var Component=(()=>{var a=Object.create;var d=Object.defineProperty;var m=Object.getOwnPropertyDescriptor;var p=Object.getOwnPropertyNames;var u=Object.getPrototypeOf,x=Object.prototype.hasOwnProperty;var g=(t,e)=>()=>(e||t((e={exports:{}}).exports,e),e.exports),b=(t,e)=>{for(var r in e)d(t,r,{get:e[r],enumerable:!0})},h=(t,e,r,o)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let i of p(e))!x.call(t,i)&&i!==r&&d(t,i,{get:()=>e[i],enumerable:!(o=m(e,i))||o.enumerable});return t};var f=(t,e,r)=>(r=t!=null?a(u(t)):{},h(e||!t||!t.__esModule?d(r,\"default\",{value:t,enumerable:!0}):r,t)),w=t=>h(d({},\"__esModule\",{value:!0}),t);var l=g((D,c)=>{c.exports=_jsx_runtime});var R={};b(R,{default:()=>j,frontmatter:()=>y});var n=f(l()),y={title:\"useDimensions\",package:\"@incmix-ui/hooks\",description:\"React hook to measure dimensions of the referenced element\"};function s(t){let e=Object.assign({p:\"p\",code:\"code\",h2:\"h2\",pre:\"pre\",table:\"table\",thead:\"thead\",tr:\"tr\",th:\"th\",tbody:\"tbody\",td:\"td\",h3:\"h3\"},t.components);return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsxs)(e.p,{children:[(0,n.jsx)(e.code,{children:\"useDimensions\"}),` is a custom hook that measures dimensions of the referenced\nelement based on its box-model.`]}),`\n`,(0,n.jsx)(e.h2,{id:\"import\",children:\"Import\"}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-js\",children:`import { useDimensions } from '@incmix-ui/react'\n`})}),`\n`,(0,n.jsx)(e.h2,{id:\"return-value\",children:\"Return value\"}),`\n`,(0,n.jsxs)(e.p,{children:[\"This hook returns an object with the properties \",(0,n.jsx)(e.code,{children:\"marginBox\"}),\", \",(0,n.jsx)(e.code,{children:\"paddingBox\"}),`,\n`,(0,n.jsx)(e.code,{children:\"borderBox\"}),\", \",(0,n.jsx)(e.code,{children:\"contentBox\"}),\", \",(0,n.jsx)(e.code,{children:\"border\"}),\", \",(0,n.jsx)(e.code,{children:\"padding\"}),\", and \",(0,n.jsx)(e.code,{children:\"margin\"}),\".\"]}),`\n`,(0,n.jsx)(e.p,{children:`Each of these properties contains a nested object which provides values\nrespective to that property:`}),`\n`,(0,n.jsxs)(e.table,{children:[(0,n.jsx)(e.thead,{children:(0,n.jsxs)(e.tr,{children:[(0,n.jsx)(e.th,{children:\"Value:\"}),(0,n.jsx)(e.th,{children:\"Contents:\"})]})}),(0,n.jsxs)(e.tbody,{children:[(0,n.jsxs)(e.tr,{children:[(0,n.jsx)(e.td,{children:\"marginBox\"}),(0,n.jsx)(e.td,{children:\"top, right, bottom, left, width, height, x, y, center (x, y)\"})]}),(0,n.jsxs)(e.tr,{children:[(0,n.jsx)(e.td,{children:\"borderBox\"}),(0,n.jsx)(e.td,{children:\"top, right, bottom, left, width, height, x, y, center (x, y)\"})]}),(0,n.jsxs)(e.tr,{children:[(0,n.jsx)(e.td,{children:\"paddingBox\"}),(0,n.jsx)(e.td,{children:\"top, right, bottom, left, width, height, x, y, center (x, y)\"})]}),(0,n.jsxs)(e.tr,{children:[(0,n.jsx)(e.td,{children:\"contentBox\"}),(0,n.jsx)(e.td,{children:\"top, right, bottom, left, width, height, x, y, center (x, y)\"})]}),(0,n.jsxs)(e.tr,{children:[(0,n.jsx)(e.td,{children:\"border\"}),(0,n.jsx)(e.td,{children:\"top, right, bottom, left\"})]}),(0,n.jsxs)(e.tr,{children:[(0,n.jsx)(e.td,{children:\"padding\"}),(0,n.jsx)(e.td,{children:\"top, right, bottom, left\"})]}),(0,n.jsxs)(e.tr,{children:[(0,n.jsx)(e.td,{children:\"margin\"}),(0,n.jsx)(e.td,{children:\"top, right, bottom, left\"})]})]})]}),`\n`,(0,n.jsx)(e.h2,{id:\"usage\",children:\"Usage\"}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-jsx\",children:`function example() {\n  const elementRef = useRef()\n  const dimensions = useDimensions(elementRef)\n\n  return (\n    <Box ref={elementRef} color=\"white\" width=\"fit-content\" bg=\"blue.700\" p={4}>\n      <Heading>\n        <code>borderBox</code> dimensions\n      </Heading>\n      <List>\n        <ListItem>The Width: {dimensions && dimensions.borderBox.width}</ListItem>\n        <ListItem>The x coordinate: {dimensions && dimensions.borderBox.x}</ListItem>\n      </List>\n    </Box>\n  )\n}\n`})}),`\n`,(0,n.jsxs)(e.h3,{id:\"with-observe-parameter\",children:[\"With \",(0,n.jsx)(e.code,{children:\"observe\"}),\" Parameter\"]}),`\n`,(0,n.jsxs)(e.p,{children:[\"With the second parameter set to \",(0,n.jsx)(e.code,{children:\"true\"}),\", the hook will attach the \",(0,n.jsx)(e.code,{children:\"resize\"}),` and\n`,(0,n.jsx)(e.code,{children:\"scroll\"}),` events to the window object. This will recalculate the reference\nelement's dimensions on scroll or resize of the page.`]}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-jsx\",children:`function example() {\n  const elementRef = useRef()\n  const dimensions = useDimensions(elementRef, true)\n\n  return (\n    <>\n      <Textarea ref={elementRef} value=\"Resize this field's height, then either scroll or resize the page.\" />\n      <Box>Changing height: {dimensions && dimensions.borderBox.height}</Box>\n    </>\n  )\n}\n`})}),`\n`,(0,n.jsx)(e.h2,{id:\"parameters\",children:\"Parameters\"}),`\n`,(0,n.jsxs)(e.table,{children:[(0,n.jsx)(e.thead,{children:(0,n.jsxs)(e.tr,{children:[(0,n.jsx)(e.th,{children:\"Parameter\"}),(0,n.jsx)(e.th,{children:\"Type\"}),(0,n.jsx)(e.th,{children:\"Description\"})]})}),(0,n.jsxs)(e.tbody,{children:[(0,n.jsxs)(e.tr,{children:[(0,n.jsx)(e.td,{children:(0,n.jsx)(e.code,{children:\"ref\"})}),(0,n.jsx)(e.td,{children:(0,n.jsx)(e.code,{children:\"RefObject<HTMLElement>\"})}),(0,n.jsx)(e.td,{children:\"Reference to the element you want to measure\"})]}),(0,n.jsxs)(e.tr,{children:[(0,n.jsx)(e.td,{children:(0,n.jsx)(e.code,{children:\"observe (optional)\"})}),(0,n.jsx)(e.td,{children:(0,n.jsx)(e.code,{children:\"boolean\"})}),(0,n.jsxs)(e.td,{children:[\"If set to true, the \",(0,n.jsx)(e.code,{children:\"resize\"}),\" and \",(0,n.jsx)(e.code,{children:\"scroll\"}),\" events will be attached to the window and update the dimensions on each event\"]})]})]})]})]})}function B(t={}){let{wrapper:e}=t.components||{};return e?(0,n.jsx)(e,Object.assign({},t,{children:(0,n.jsx)(s,t)})):s(t)}var j=B;return w(R);})();\n;return Component;"
    },
    "_id": "docs/hooks/use-dimensions.mdx",
    "_raw": {
      "sourceFilePath": "docs/hooks/use-dimensions.mdx",
      "sourceFileName": "use-dimensions.mdx",
      "sourceFileDir": "docs/hooks",
      "contentType": "mdx",
      "flattenedPath": "docs/hooks/use-dimensions"
    },
    "type": "Doc",
    "slug": "/docs/hooks/use-dimensions",
    "frontMatter": {
      "title": "useDimensions",
      "package": "@incmix-ui/hooks",
      "description": "React hook to measure dimensions of the referenced element",
      "slug": "/docs/hooks/use-dimensions",
      "editUrl": "https://github.com/incmix-ui/incmix-ui-docs/tree/main/content/docs/hooks/use-dimensions.mdx",
      "headings": [
        {
          "text": "Import",
          "id": "import",
          "level": "h2"
        },
        {
          "text": "Return value",
          "id": "return-value",
          "level": "h2"
        },
        {
          "text": "Usage",
          "id": "usage",
          "level": "h2"
        },
        {
          "text": "With `observe` Parameter",
          "id": "with-observe-parameter",
          "level": "h3"
        },
        {
          "text": "Parameters",
          "id": "parameters",
          "level": "h2"
        }
      ]
    }
  },
  {
    "title": "useDisclosure",
    "package": "@incmix-ui/hooks",
    "description": "React hook to handle common open and close scenarios in UI components",
    "scope": "usage",
    "body": {
      "raw": "\n`useDisclosure` is a custom hook used to help handle common `open`, `close`, or\n`toggle` scenarios. It can be used to control feedback component such as\n[Modal](/docs/components/overlay/modal),\n[AlertDialog](/docs/components/overlay/alert-dialog),\n[Drawer](/docs/components/overlay/drawer), etc.\n\n## Import\n\n```js\nimport { useDisclosure } from '@incmix-ui/react'\n```\n\n## Return value\n\nThe `useDisclosure` hook returns an object with the following fields:\n\n| Name                 | Type       | Default | Description                                                                               |\n| -------------------- | ---------- | ------- | ----------------------------------------------------------------------------------------- |\n| `isOpen`             | `boolean`  | `false` | If `true`, it sets the controlled component to its visible state.                         |\n| `onClose`            | `function` |         | Callback function to set a falsy value for the `isOpen` parameter.                        |\n| `onOpen`             | `function` |         | Callback function to set a truthy value for the `isOpen` parameter.                       |\n| `onToggle`           | `function` |         | Callback function to toggle the value of the `isOpen` parameter.                          |\n| `getDisclosureProps` | `function` |         | Callback function to retrieve a set of props for the controlled component.                |\n| `getButtonProps`     | `function` |         | Callback function to retrieve a set of props for the button that triggers the disclosure. |\n\n## Usage\n\nYou can use a combination of the methods and values returned by the hook for\nvarious control of the components affected by the disclosure.\n\nBelow is the use of returned fields of the hook without a getter to control the\n`Drawer` component on button toggle.\n\n```jsx\nfunction Example() {\n  const { isOpen, onOpen, onClose } = useDisclosure()\n\n  return (\n    <>\n      <Button onClick={onOpen}>Open Drawer</Button>\n      <Drawer placement=\"right\" onClose={onClose} isOpen={isOpen}>\n        <DrawerOverlay />\n        <DrawerContent>\n          <DrawerHeader borderBottomWidth=\"1px\">Basic Drawer</DrawerHeader>\n          <DrawerBody>\n            <p>Some contents...</p>\n            <p>Some contents...</p>\n            <p>Some contents...</p>\n          </DrawerBody>\n        </DrawerContent>\n      </Drawer>\n    </>\n  )\n}\n```\n\nUsing the `getDisclosureProps` and `getButtonProps` methods returned by the hook\nprovides the needed attributes and handlers to the respective component and\nbutton for visibility toggling and accessibility.\n\nThe component that uses `getDisclosureProps` receives the following props:\n\n- An `id` (can optionally pass this in as a prop to the hook to render a custom\n  value).\n- A dynamically rendered `hidden` attribute.\n\n`getDisclosureProps` can directly accept any additional props for the component.\n\nThe button that uses `getButtonProps` for toggling receives the following props:\n\n- A dynamically rendered `aria-expanded` attribute to let a screen reader know\n  whether the disclosure component is visible.\n- The `aria-controls` attribute using the `id` (can optionally pass `id` in as a\n  prop to the hook to render a custom value). This lets a screen reader know\n  which component is controlled by the button.\n- An onClick handler that uses the `onToggle` callback along with any other\n  click events passed as an `onClick` prop to `getButtonProps`\n\n`getButtonProps` can also directly accept any additional props for the button.\n\n```jsx\nfunction Basic() {\n  const { getDisclosureProps, getButtonProps } = useDisclosure()\n\n  const buttonProps = getButtonProps()\n  const disclosureProps = getDisclosureProps()\n  return (\n    <>\n      <Button {...buttonProps}>Toggle Me</Button>\n      <Text {...disclosureProps} mt={4}>\n        This text is being visibly toggled hidden and shown by the button.\n        <br />\n        (Inspect these components to see the rendered attributes)\n      </Text>\n    </>\n  )\n}\n```\n\n## Parameters\n\nThe `useDisclosure` hook accepts an optional object with the following\nproperties:\n\n<PropsTable of=\"useDisclosure\" />\n",
      "code": "var Component=(()=>{var a=Object.create;var c=Object.defineProperty;var p=Object.getOwnPropertyDescriptor;var u=Object.getOwnPropertyNames;var g=Object.getPrototypeOf,m=Object.prototype.hasOwnProperty;var f=(o,e)=>()=>(e||o((e={exports:{}}).exports,e),e.exports),b=(o,e)=>{for(var t in e)c(o,t,{get:e[t],enumerable:!0})},d=(o,e,t,i)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let r of u(e))!m.call(o,r)&&r!==t&&c(o,r,{get:()=>e[r],enumerable:!(i=p(e,r))||i.enumerable});return o};var y=(o,e,t)=>(t=o!=null?a(g(o)):{},d(e||!o||!o.__esModule?c(t,\"default\",{value:o,enumerable:!0}):t,o)),D=o=>d(c({},\"__esModule\",{value:!0}),o);var s=f((C,l)=>{l.exports=_jsx_runtime});var P={};b(P,{default:()=>v,frontmatter:()=>w});var n=y(s()),w={title:\"useDisclosure\",package:\"@incmix-ui/hooks\",description:\"React hook to handle common open and close scenarios in UI components\"};function h(o){let e=Object.assign({p:\"p\",code:\"code\",a:\"a\",h2:\"h2\",pre:\"pre\",table:\"table\",thead:\"thead\",tr:\"tr\",th:\"th\",tbody:\"tbody\",td:\"td\",ul:\"ul\",li:\"li\"},o.components),{PropsTable:t}=e;return t||x(\"PropsTable\",!0),(0,n.jsxs)(n.Fragment,{children:[(0,n.jsxs)(e.p,{children:[(0,n.jsx)(e.code,{children:\"useDisclosure\"}),\" is a custom hook used to help handle common \",(0,n.jsx)(e.code,{children:\"open\"}),\", \",(0,n.jsx)(e.code,{children:\"close\"}),`, or\n`,(0,n.jsx)(e.code,{children:\"toggle\"}),` scenarios. It can be used to control feedback component such as\n`,(0,n.jsx)(e.a,{href:\"/docs/components/overlay/modal\",children:\"Modal\"}),`,\n`,(0,n.jsx)(e.a,{href:\"/docs/components/overlay/alert-dialog\",children:\"AlertDialog\"}),`,\n`,(0,n.jsx)(e.a,{href:\"/docs/components/overlay/drawer\",children:\"Drawer\"}),\", etc.\"]}),`\n`,(0,n.jsx)(e.h2,{id:\"import\",children:\"Import\"}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-js\",children:`import { useDisclosure } from '@incmix-ui/react'\n`})}),`\n`,(0,n.jsx)(e.h2,{id:\"return-value\",children:\"Return value\"}),`\n`,(0,n.jsxs)(e.p,{children:[\"The \",(0,n.jsx)(e.code,{children:\"useDisclosure\"}),\" hook returns an object with the following fields:\"]}),`\n`,(0,n.jsxs)(e.table,{children:[(0,n.jsx)(e.thead,{children:(0,n.jsxs)(e.tr,{children:[(0,n.jsx)(e.th,{children:\"Name\"}),(0,n.jsx)(e.th,{children:\"Type\"}),(0,n.jsx)(e.th,{children:\"Default\"}),(0,n.jsx)(e.th,{children:\"Description\"})]})}),(0,n.jsxs)(e.tbody,{children:[(0,n.jsxs)(e.tr,{children:[(0,n.jsx)(e.td,{children:(0,n.jsx)(e.code,{children:\"isOpen\"})}),(0,n.jsx)(e.td,{children:(0,n.jsx)(e.code,{children:\"boolean\"})}),(0,n.jsx)(e.td,{children:(0,n.jsx)(e.code,{children:\"false\"})}),(0,n.jsxs)(e.td,{children:[\"If \",(0,n.jsx)(e.code,{children:\"true\"}),\", it sets the controlled component to its visible state.\"]})]}),(0,n.jsxs)(e.tr,{children:[(0,n.jsx)(e.td,{children:(0,n.jsx)(e.code,{children:\"onClose\"})}),(0,n.jsx)(e.td,{children:(0,n.jsx)(e.code,{children:\"function\"})}),(0,n.jsx)(e.td,{}),(0,n.jsxs)(e.td,{children:[\"Callback function to set a falsy value for the \",(0,n.jsx)(e.code,{children:\"isOpen\"}),\" parameter.\"]})]}),(0,n.jsxs)(e.tr,{children:[(0,n.jsx)(e.td,{children:(0,n.jsx)(e.code,{children:\"onOpen\"})}),(0,n.jsx)(e.td,{children:(0,n.jsx)(e.code,{children:\"function\"})}),(0,n.jsx)(e.td,{}),(0,n.jsxs)(e.td,{children:[\"Callback function to set a truthy value for the \",(0,n.jsx)(e.code,{children:\"isOpen\"}),\" parameter.\"]})]}),(0,n.jsxs)(e.tr,{children:[(0,n.jsx)(e.td,{children:(0,n.jsx)(e.code,{children:\"onToggle\"})}),(0,n.jsx)(e.td,{children:(0,n.jsx)(e.code,{children:\"function\"})}),(0,n.jsx)(e.td,{}),(0,n.jsxs)(e.td,{children:[\"Callback function to toggle the value of the \",(0,n.jsx)(e.code,{children:\"isOpen\"}),\" parameter.\"]})]}),(0,n.jsxs)(e.tr,{children:[(0,n.jsx)(e.td,{children:(0,n.jsx)(e.code,{children:\"getDisclosureProps\"})}),(0,n.jsx)(e.td,{children:(0,n.jsx)(e.code,{children:\"function\"})}),(0,n.jsx)(e.td,{}),(0,n.jsx)(e.td,{children:\"Callback function to retrieve a set of props for the controlled component.\"})]}),(0,n.jsxs)(e.tr,{children:[(0,n.jsx)(e.td,{children:(0,n.jsx)(e.code,{children:\"getButtonProps\"})}),(0,n.jsx)(e.td,{children:(0,n.jsx)(e.code,{children:\"function\"})}),(0,n.jsx)(e.td,{}),(0,n.jsx)(e.td,{children:\"Callback function to retrieve a set of props for the button that triggers the disclosure.\"})]})]})]}),`\n`,(0,n.jsx)(e.h2,{id:\"usage\",children:\"Usage\"}),`\n`,(0,n.jsx)(e.p,{children:`You can use a combination of the methods and values returned by the hook for\nvarious control of the components affected by the disclosure.`}),`\n`,(0,n.jsxs)(e.p,{children:[`Below is the use of returned fields of the hook without a getter to control the\n`,(0,n.jsx)(e.code,{children:\"Drawer\"}),\" component on button toggle.\"]}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-jsx\",children:`function Example() {\n  const { isOpen, onOpen, onClose } = useDisclosure()\n\n  return (\n    <>\n      <Button onClick={onOpen}>Open Drawer</Button>\n      <Drawer placement=\"right\" onClose={onClose} isOpen={isOpen}>\n        <DrawerOverlay />\n        <DrawerContent>\n          <DrawerHeader borderBottomWidth=\"1px\">Basic Drawer</DrawerHeader>\n          <DrawerBody>\n            <p>Some contents...</p>\n            <p>Some contents...</p>\n            <p>Some contents...</p>\n          </DrawerBody>\n        </DrawerContent>\n      </Drawer>\n    </>\n  )\n}\n`})}),`\n`,(0,n.jsxs)(e.p,{children:[\"Using the \",(0,n.jsx)(e.code,{children:\"getDisclosureProps\"}),\" and \",(0,n.jsx)(e.code,{children:\"getButtonProps\"}),` methods returned by the hook\nprovides the needed attributes and handlers to the respective component and\nbutton for visibility toggling and accessibility.`]}),`\n`,(0,n.jsxs)(e.p,{children:[\"The component that uses \",(0,n.jsx)(e.code,{children:\"getDisclosureProps\"}),\" receives the following props:\"]}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsxs)(e.li,{children:[\"An \",(0,n.jsx)(e.code,{children:\"id\"}),` (can optionally pass this in as a prop to the hook to render a custom\nvalue).`]}),`\n`,(0,n.jsxs)(e.li,{children:[\"A dynamically rendered \",(0,n.jsx)(e.code,{children:\"hidden\"}),\" attribute.\"]}),`\n`]}),`\n`,(0,n.jsxs)(e.p,{children:[(0,n.jsx)(e.code,{children:\"getDisclosureProps\"}),\" can directly accept any additional props for the component.\"]}),`\n`,(0,n.jsxs)(e.p,{children:[\"The button that uses \",(0,n.jsx)(e.code,{children:\"getButtonProps\"}),\" for toggling receives the following props:\"]}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsxs)(e.li,{children:[\"A dynamically rendered \",(0,n.jsx)(e.code,{children:\"aria-expanded\"}),` attribute to let a screen reader know\nwhether the disclosure component is visible.`]}),`\n`,(0,n.jsxs)(e.li,{children:[\"The \",(0,n.jsx)(e.code,{children:\"aria-controls\"}),\" attribute using the \",(0,n.jsx)(e.code,{children:\"id\"}),\" (can optionally pass \",(0,n.jsx)(e.code,{children:\"id\"}),` in as a\nprop to the hook to render a custom value). This lets a screen reader know\nwhich component is controlled by the button.`]}),`\n`,(0,n.jsxs)(e.li,{children:[\"An onClick handler that uses the \",(0,n.jsx)(e.code,{children:\"onToggle\"}),` callback along with any other\nclick events passed as an `,(0,n.jsx)(e.code,{children:\"onClick\"}),\" prop to \",(0,n.jsx)(e.code,{children:\"getButtonProps\"})]}),`\n`]}),`\n`,(0,n.jsxs)(e.p,{children:[(0,n.jsx)(e.code,{children:\"getButtonProps\"}),\" can also directly accept any additional props for the button.\"]}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-jsx\",children:`function Basic() {\n  const { getDisclosureProps, getButtonProps } = useDisclosure()\n\n  const buttonProps = getButtonProps()\n  const disclosureProps = getDisclosureProps()\n  return (\n    <>\n      <Button {...buttonProps}>Toggle Me</Button>\n      <Text {...disclosureProps} mt={4}>\n        This text is being visibly toggled hidden and shown by the button.\n        <br />\n        (Inspect these components to see the rendered attributes)\n      </Text>\n    </>\n  )\n}\n`})}),`\n`,(0,n.jsx)(e.h2,{id:\"parameters\",children:\"Parameters\"}),`\n`,(0,n.jsxs)(e.p,{children:[\"The \",(0,n.jsx)(e.code,{children:\"useDisclosure\"}),` hook accepts an optional object with the following\nproperties:`]}),`\n`,(0,n.jsx)(t,{of:\"useDisclosure\"})]})}function k(o={}){let{wrapper:e}=o.components||{};return e?(0,n.jsx)(e,Object.assign({},o,{children:(0,n.jsx)(h,o)})):h(o)}var v=k;function x(o,e){throw new Error(\"Expected \"+(e?\"component\":\"object\")+\" `\"+o+\"` to be defined: you likely forgot to import, pass, or provide it.\")}return D(P);})();\n;return Component;"
    },
    "_id": "docs/hooks/use-disclosure.mdx",
    "_raw": {
      "sourceFilePath": "docs/hooks/use-disclosure.mdx",
      "sourceFileName": "use-disclosure.mdx",
      "sourceFileDir": "docs/hooks",
      "contentType": "mdx",
      "flattenedPath": "docs/hooks/use-disclosure"
    },
    "type": "Doc",
    "slug": "/docs/hooks/use-disclosure",
    "frontMatter": {
      "title": "useDisclosure",
      "package": "@incmix-ui/hooks",
      "description": "React hook to handle common open and close scenarios in UI components",
      "slug": "/docs/hooks/use-disclosure",
      "editUrl": "https://github.com/incmix-ui/incmix-ui-docs/tree/main/content/docs/hooks/use-disclosure.mdx",
      "headings": [
        {
          "text": "Import",
          "id": "import",
          "level": "h2"
        },
        {
          "text": "Return value",
          "id": "return-value",
          "level": "h2"
        },
        {
          "text": "Usage",
          "id": "usage",
          "level": "h2"
        },
        {
          "text": "Parameters",
          "id": "parameters",
          "level": "h2"
        }
      ]
    }
  },
  {
    "title": "useMediaQuery",
    "package": "@incmix-ui/hooks",
    "description": "React hook to detect media queries",
    "scope": "usage",
    "body": {
      "raw": "\n`useMediaQuery` is a custom hook used to help detect whether a single media\nquery or multiple media queries individually match.\n\n[Learn more about the API and its backgrounds.](https://developer.mozilla.org/en-US/docs/Web/API/Window/matchMedia)\n\n## Import\n\n```js\nimport { useMediaQuery } from '@incmix-ui/react'\n```\n\n## Return value\n\nThe `useMediaQuery` hook returns an array of booleans, indicating whether the\ngiven query matches or queries match.\n\nWhy an array? `useMediaQuery` accepts both a string and an array of strings, but\nwill always return an array. This way, you can combine multiple media queries\nwhich will be individually matched in a single call.\n\n> Keep in mind this API relies on the users browser support of\n> `window.matchMedia` and will always return `false` if it is not supported or\n> does not exist (e.g. during serverside rendering).\n\n## Usage\n\n```jsx\nfunction Example() {\n  const [isLargerThan1280] = useMediaQuery('(min-width: 1280px)')\n\n  return <Text>{isLargerThan1280 ? 'larger than 1280px' : 'smaller than 1280px'}</Text>\n}\n```\n\n```jsx\nfunction Example() {\n  const [isLargerThanHD, isDisplayingInBrowser] = useMediaQuery(['(min-width: 1920px)', '(display-mode: browser)'])\n\n  function determineText() {\n    if (isLargerThanHD) {\n      return `high resolution you got there ${isDisplayingInBrowser ? 'in your browser' : 'on your screen'}`\n    }\n\n    return isDisplayingInBrowser ? 'rendering in a browser' : 'rendering on something else, e.g. PWA'\n  }\n\n  return <Text>{determineText()}</Text>\n}\n```\n",
      "code": "var Component=(()=>{var u=Object.create;var t=Object.defineProperty;var h=Object.getOwnPropertyDescriptor;var m=Object.getOwnPropertyNames;var p=Object.getPrototypeOf,g=Object.prototype.hasOwnProperty;var y=(r,e)=>()=>(e||r((e={exports:{}}).exports,e),e.exports),x=(r,e)=>{for(var i in e)t(r,i,{get:e[i],enumerable:!0})},o=(r,e,i,s)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let a of m(e))!g.call(r,a)&&a!==i&&t(r,a,{get:()=>e[a],enumerable:!(s=h(e,a))||s.enumerable});return r};var w=(r,e,i)=>(i=r!=null?u(p(r)):{},o(e||!r||!r.__esModule?t(i,\"default\",{value:r,enumerable:!0}):i,r)),b=r=>o(t({},\"__esModule\",{value:!0}),r);var c=y((q,d)=>{d.exports=_jsx_runtime});var j={};x(j,{default:()=>T,frontmatter:()=>f});var n=w(c()),f={title:\"useMediaQuery\",package:\"@incmix-ui/hooks\",description:\"React hook to detect media queries\"};function l(r){let e=Object.assign({p:\"p\",code:\"code\",a:\"a\",h2:\"h2\",pre:\"pre\",blockquote:\"blockquote\"},r.components);return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsxs)(e.p,{children:[(0,n.jsx)(e.code,{children:\"useMediaQuery\"}),` is a custom hook used to help detect whether a single media\nquery or multiple media queries individually match.`]}),`\n`,(0,n.jsx)(e.p,{children:(0,n.jsx)(e.a,{href:\"https://developer.mozilla.org/en-US/docs/Web/API/Window/matchMedia\",children:\"Learn more about the API and its backgrounds.\"})}),`\n`,(0,n.jsx)(e.h2,{id:\"import\",children:\"Import\"}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-js\",children:`import { useMediaQuery } from '@incmix-ui/react'\n`})}),`\n`,(0,n.jsx)(e.h2,{id:\"return-value\",children:\"Return value\"}),`\n`,(0,n.jsxs)(e.p,{children:[\"The \",(0,n.jsx)(e.code,{children:\"useMediaQuery\"}),` hook returns an array of booleans, indicating whether the\ngiven query matches or queries match.`]}),`\n`,(0,n.jsxs)(e.p,{children:[\"Why an array? \",(0,n.jsx)(e.code,{children:\"useMediaQuery\"}),` accepts both a string and an array of strings, but\nwill always return an array. This way, you can combine multiple media queries\nwhich will be individually matched in a single call.`]}),`\n`,(0,n.jsxs)(e.blockquote,{children:[`\n`,(0,n.jsxs)(e.p,{children:[`Keep in mind this API relies on the users browser support of\n`,(0,n.jsx)(e.code,{children:\"window.matchMedia\"}),\" and will always return \",(0,n.jsx)(e.code,{children:\"false\"}),` if it is not supported or\ndoes not exist (e.g. during serverside rendering).`]}),`\n`]}),`\n`,(0,n.jsx)(e.h2,{id:\"usage\",children:\"Usage\"}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-jsx\",children:`function Example() {\n  const [isLargerThan1280] = useMediaQuery('(min-width: 1280px)')\n\n  return <Text>{isLargerThan1280 ? 'larger than 1280px' : 'smaller than 1280px'}</Text>\n}\n`})}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-jsx\",children:`function Example() {\n  const [isLargerThanHD, isDisplayingInBrowser] = useMediaQuery(['(min-width: 1920px)', '(display-mode: browser)'])\n\n  function determineText() {\n    if (isLargerThanHD) {\n      return \\`high resolution you got there \\${isDisplayingInBrowser ? 'in your browser' : 'on your screen'}\\`\n    }\n\n    return isDisplayingInBrowser ? 'rendering in a browser' : 'rendering on something else, e.g. PWA'\n  }\n\n  return <Text>{determineText()}</Text>\n}\n`})})]})}function M(r={}){let{wrapper:e}=r.components||{};return e?(0,n.jsx)(e,Object.assign({},r,{children:(0,n.jsx)(l,r)})):l(r)}var T=M;return b(j);})();\n;return Component;"
    },
    "_id": "docs/hooks/use-media-query.mdx",
    "_raw": {
      "sourceFilePath": "docs/hooks/use-media-query.mdx",
      "sourceFileName": "use-media-query.mdx",
      "sourceFileDir": "docs/hooks",
      "contentType": "mdx",
      "flattenedPath": "docs/hooks/use-media-query"
    },
    "type": "Doc",
    "slug": "/docs/hooks/use-media-query",
    "frontMatter": {
      "title": "useMediaQuery",
      "package": "@incmix-ui/hooks",
      "description": "React hook to detect media queries",
      "slug": "/docs/hooks/use-media-query",
      "editUrl": "https://github.com/incmix-ui/incmix-ui-docs/tree/main/content/docs/hooks/use-media-query.mdx",
      "headings": [
        {
          "text": "Import",
          "id": "import",
          "level": "h2"
        },
        {
          "text": "Return value",
          "id": "return-value",
          "level": "h2"
        },
        {
          "text": "Usage",
          "id": "usage",
          "level": "h2"
        }
      ]
    }
  },
  {
    "title": "useMergeRefs",
    "package": "@incmix-ui/hooks",
    "description": "React hook that merges react refs into a single memoized function",
    "scope": "usage",
    "body": {
      "raw": "\n`useMergeRefs` is a custom hook used to merge several react refs into a single\none.\n\n## Import\n\n```js\nimport { useMergeRefs } from '@incmix-ui/react'\n```\n\n## Return value\n\nThe `useMergeRefs` hook returns a function that receives the element and assign\nthe value to the given React refs.\n\n## Usage\n\n```jsx\nfunction Example({ ref, ...props }) {\n  const internalRef = React.useRef()\n  const refs = useMergeRefs(internalRef, ref)\n\n  return (\n    <div {...props} ref={refs}>\n      A div with multiple refs.\n    </div>\n  )\n}\n```\n\n### Usage combining with another Incmix-UI hooks\n\n```jsx\nfunction Example({ ref, ...props }) {\n  const outsideRef = React.useRef()\n  const { isOpen, onOpen, onClose } = useDisclosure()\n  const { popperRef, referenceRef } = usePopper()\n\n  useOutsideClick({\n    ref: outsideRef,\n    handler: () => isOpen && onClose(),\n  })\n\n  const buttonEl = useMergeRefs(outsideRef, referenceRef)\n\n  return (\n    <>\n      <button ref={buttonEl} onClick={onOpen}>\n        Click me to see the popover\n      </button>\n      {isOpen && (\n        <Box ref={popperRef} bg=\"green\">\n          Click outside to close me\n        </Box>\n      )}\n    </>\n  )\n}\n```\n",
      "code": "var Component=(()=>{var h=Object.create;var o=Object.defineProperty;var d=Object.getOwnPropertyDescriptor;var f=Object.getOwnPropertyNames;var p=Object.getPrototypeOf,m=Object.prototype.hasOwnProperty;var g=(n,e)=>()=>(e||n((e={exports:{}}).exports,e),e.exports),R=(n,e)=>{for(var r in e)o(n,r,{get:e[r],enumerable:!0})},c=(n,e,r,i)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let s of f(e))!m.call(n,s)&&s!==r&&o(n,s,{get:()=>e[s],enumerable:!(i=d(e,s))||i.enumerable});return n};var x=(n,e,r)=>(r=n!=null?h(p(n)):{},c(e||!n||!n.__esModule?o(r,\"default\",{value:n,enumerable:!0}):r,n)),k=n=>c(o({},\"__esModule\",{value:!0}),n);var u=g((O,a)=>{a.exports=_jsx_runtime});var M={};R(M,{default:()=>b,frontmatter:()=>j});var t=x(u()),j={title:\"useMergeRefs\",package:\"@incmix-ui/hooks\",description:\"React hook that merges react refs into a single memoized function\"};function l(n){let e=Object.assign({p:\"p\",code:\"code\",h2:\"h2\",pre:\"pre\",h3:\"h3\"},n.components);return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsxs)(e.p,{children:[(0,t.jsx)(e.code,{children:\"useMergeRefs\"}),` is a custom hook used to merge several react refs into a single\none.`]}),`\n`,(0,t.jsx)(e.h2,{id:\"import\",children:\"Import\"}),`\n`,(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:\"language-js\",children:`import { useMergeRefs } from '@incmix-ui/react'\n`})}),`\n`,(0,t.jsx)(e.h2,{id:\"return-value\",children:\"Return value\"}),`\n`,(0,t.jsxs)(e.p,{children:[\"The \",(0,t.jsx)(e.code,{children:\"useMergeRefs\"}),` hook returns a function that receives the element and assign\nthe value to the given React refs.`]}),`\n`,(0,t.jsx)(e.h2,{id:\"usage\",children:\"Usage\"}),`\n`,(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:\"language-jsx\",children:`function Example({ ref, ...props }) {\n  const internalRef = React.useRef()\n  const refs = useMergeRefs(internalRef, ref)\n\n  return (\n    <div {...props} ref={refs}>\n      A div with multiple refs.\n    </div>\n  )\n}\n`})}),`\n`,(0,t.jsx)(e.h3,{id:\"usage-combining-with-another-incmix-ui-hooks\",children:\"Usage combining with another Incmix-UI hooks\"}),`\n`,(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:\"language-jsx\",children:`function Example({ ref, ...props }) {\n  const outsideRef = React.useRef()\n  const { isOpen, onOpen, onClose } = useDisclosure()\n  const { popperRef, referenceRef } = usePopper()\n\n  useOutsideClick({\n    ref: outsideRef,\n    handler: () => isOpen && onClose(),\n  })\n\n  const buttonEl = useMergeRefs(outsideRef, referenceRef)\n\n  return (\n    <>\n      <button ref={buttonEl} onClick={onOpen}>\n        Click me to see the popover\n      </button>\n      {isOpen && (\n        <Box ref={popperRef} bg=\"green\">\n          Click outside to close me\n        </Box>\n      )}\n    </>\n  )\n}\n`})})]})}function v(n={}){let{wrapper:e}=n.components||{};return e?(0,t.jsx)(e,Object.assign({},n,{children:(0,t.jsx)(l,n)})):l(n)}var b=v;return k(M);})();\n;return Component;"
    },
    "_id": "docs/hooks/use-merge-refs.mdx",
    "_raw": {
      "sourceFilePath": "docs/hooks/use-merge-refs.mdx",
      "sourceFileName": "use-merge-refs.mdx",
      "sourceFileDir": "docs/hooks",
      "contentType": "mdx",
      "flattenedPath": "docs/hooks/use-merge-refs"
    },
    "type": "Doc",
    "slug": "/docs/hooks/use-merge-refs",
    "frontMatter": {
      "title": "useMergeRefs",
      "package": "@incmix-ui/hooks",
      "description": "React hook that merges react refs into a single memoized function",
      "slug": "/docs/hooks/use-merge-refs",
      "editUrl": "https://github.com/incmix-ui/incmix-ui-docs/tree/main/content/docs/hooks/use-merge-refs.mdx",
      "headings": [
        {
          "text": "Import",
          "id": "import",
          "level": "h2"
        },
        {
          "text": "Return value",
          "id": "return-value",
          "level": "h2"
        },
        {
          "text": "Usage",
          "id": "usage",
          "level": "h2"
        },
        {
          "text": "Usage combining with another Incmix-UI hooks",
          "id": "usage-combining-with-another-incmix-ui-hooks",
          "level": "h3"
        }
      ]
    }
  },
  {
    "title": "useOutsideClick",
    "package": "@incmix-ui/hooks",
    "description": "React hook to detect clicks outside of a specified element.",
    "scope": "usage",
    "body": {
      "raw": "\n`useOutsideClick` is a custom hook that handles click events outside a specific\nDOM element, like a `div`. A handler is invoked when a click or touch event\nhappens outside the referenced element.\n\n> This hook is compatible with mouse and touch events.\n\n## Import\n\n```js\nimport { useOutsideClick } from '@incmix-ui/react'\n```\n\n## Usage\n\n```jsx\nfunction Example() {\n  const ref = React.useRef()\n  const [isModalOpen, setIsModalOpen] = React.useState(false)\n  useOutsideClick({\n    ref: ref,\n    handler: () => setIsModalOpen(false),\n  })\n\n  return (\n    <>\n      {isModalOpen ? (\n        <div ref={ref}>👋 Hey, I'm a modal. Click anywhere outside of me to close.</div>\n      ) : (\n        <button onClick={() => setIsModalOpen(true)}>Open Modal</button>\n      )}\n    </>\n  )\n}\n```\n\n## Parameters\n\nThe `useOutsideClick` hook accepts an object with the following properties:\n\n<PropsTable of=\"useOutsideClick\" />\n",
      "code": "var Component=(()=>{var u=Object.create;var c=Object.defineProperty;var h=Object.getOwnPropertyDescriptor;var p=Object.getOwnPropertyNames;var m=Object.getPrototypeOf,f=Object.prototype.hasOwnProperty;var k=(n,e)=>()=>(e||n((e={exports:{}}).exports,e),e.exports),x=(n,e)=>{for(var o in e)c(n,o,{get:e[o],enumerable:!0})},r=(n,e,o,s)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let i of p(e))!f.call(n,i)&&i!==o&&c(n,i,{get:()=>e[i],enumerable:!(s=h(e,i))||s.enumerable});return n};var O=(n,e,o)=>(o=n!=null?u(m(n)):{},r(e||!n||!n.__esModule?c(o,\"default\",{value:n,enumerable:!0}):o,n)),g=n=>r(c({},\"__esModule\",{value:!0}),n);var d=k((_,a)=>{a.exports=_jsx_runtime});var v={};x(v,{default:()=>M,frontmatter:()=>b});var t=O(d()),b={title:\"useOutsideClick\",package:\"@incmix-ui/hooks\",description:\"React hook to detect clicks outside of a specified element.\"};function l(n){let e=Object.assign({p:\"p\",code:\"code\",blockquote:\"blockquote\",h2:\"h2\",pre:\"pre\"},n.components),{PropsTable:o}=e;return o||C(\"PropsTable\",!0),(0,t.jsxs)(t.Fragment,{children:[(0,t.jsxs)(e.p,{children:[(0,t.jsx)(e.code,{children:\"useOutsideClick\"}),` is a custom hook that handles click events outside a specific\nDOM element, like a `,(0,t.jsx)(e.code,{children:\"div\"}),`. A handler is invoked when a click or touch event\nhappens outside the referenced element.`]}),`\n`,(0,t.jsxs)(e.blockquote,{children:[`\n`,(0,t.jsx)(e.p,{children:\"This hook is compatible with mouse and touch events.\"}),`\n`]}),`\n`,(0,t.jsx)(e.h2,{id:\"import\",children:\"Import\"}),`\n`,(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:\"language-js\",children:`import { useOutsideClick } from '@incmix-ui/react'\n`})}),`\n`,(0,t.jsx)(e.h2,{id:\"usage\",children:\"Usage\"}),`\n`,(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:\"language-jsx\",children:`function Example() {\n  const ref = React.useRef()\n  const [isModalOpen, setIsModalOpen] = React.useState(false)\n  useOutsideClick({\n    ref: ref,\n    handler: () => setIsModalOpen(false),\n  })\n\n  return (\n    <>\n      {isModalOpen ? (\n        <div ref={ref}>\\u{1F44B} Hey, I'm a modal. Click anywhere outside of me to close.</div>\n      ) : (\n        <button onClick={() => setIsModalOpen(true)}>Open Modal</button>\n      )}\n    </>\n  )\n}\n`})}),`\n`,(0,t.jsx)(e.h2,{id:\"parameters\",children:\"Parameters\"}),`\n`,(0,t.jsxs)(e.p,{children:[\"The \",(0,t.jsx)(e.code,{children:\"useOutsideClick\"}),\" hook accepts an object with the following properties:\"]}),`\n`,(0,t.jsx)(o,{of:\"useOutsideClick\"})]})}function j(n={}){let{wrapper:e}=n.components||{};return e?(0,t.jsx)(e,Object.assign({},n,{children:(0,t.jsx)(l,n)})):l(n)}var M=j;function C(n,e){throw new Error(\"Expected \"+(e?\"component\":\"object\")+\" `\"+n+\"` to be defined: you likely forgot to import, pass, or provide it.\")}return g(v);})();\n;return Component;"
    },
    "_id": "docs/hooks/use-outside-click.mdx",
    "_raw": {
      "sourceFilePath": "docs/hooks/use-outside-click.mdx",
      "sourceFileName": "use-outside-click.mdx",
      "sourceFileDir": "docs/hooks",
      "contentType": "mdx",
      "flattenedPath": "docs/hooks/use-outside-click"
    },
    "type": "Doc",
    "slug": "/docs/hooks/use-outside-click",
    "frontMatter": {
      "title": "useOutsideClick",
      "package": "@incmix-ui/hooks",
      "description": "React hook to detect clicks outside of a specified element.",
      "slug": "/docs/hooks/use-outside-click",
      "editUrl": "https://github.com/incmix-ui/incmix-ui-docs/tree/main/content/docs/hooks/use-outside-click.mdx",
      "headings": [
        {
          "text": "Import",
          "id": "import",
          "level": "h2"
        },
        {
          "text": "Usage",
          "id": "usage",
          "level": "h2"
        },
        {
          "text": "Parameters",
          "id": "parameters",
          "level": "h2"
        }
      ]
    }
  },
  {
    "title": "usePrefersReducedMotion",
    "package": "@incmix-ui/hooks",
    "description": "React hook to detect animation preference",
    "scope": "usage",
    "body": {
      "raw": "\n`usePrefersReducedMotion` is a custom hook used to help detect the users motion\npreference.\n\n[Learn more about the API and its backgrounds.](https://developer.mozilla.org/en-US/docs/Web/CSS/@media/prefers-reduced-motion)\n\n## Import\n\n```js\nimport { usePrefersReducedMotion } from '@incmix-ui/react'\n```\n\n## Return value\n\nThe `usePrefersReducedMotion` hook returns a boolean, indicating whether the\nuser prefers reduced motion.\n\n> Keep in mind this API relies on the users browser support of\n> `window.matchMedia` and will always return `false` if it is not supported or\n> does not exist (e.g. during serverside rendering).\n\n## Usage\n\n```jsx live=false\nimport { Image, keyframes, usePrefersReducedMotion } from '@incmix-ui/react'\nimport logo from './logo.svg'\n\nconst spin = keyframes`\n  from { transform: rotate(0deg); }\n  to { transform: rotate(360deg); }\n`\n\nfunction Example() {\n  const prefersReducedMotion = usePrefersReducedMotion()\n\n  const animation = prefersReducedMotion ? undefined : `${spin} infinite 20s linear`\n\n  return <Image animation={animation} src={logo} {...props} />\n}\n```\n",
      "code": "var Component=(()=>{var l=Object.create;var i=Object.defineProperty;var m=Object.getOwnPropertyDescriptor;var h=Object.getOwnPropertyNames;var p=Object.getPrototypeOf,f=Object.prototype.hasOwnProperty;var g=(r,e)=>()=>(e||r((e={exports:{}}).exports,e),e.exports),x=(r,e)=>{for(var o in e)i(r,o,{get:e[o],enumerable:!0})},c=(r,e,o,s)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let t of h(e))!f.call(r,t)&&t!==o&&i(r,t,{get:()=>e[t],enumerable:!(s=m(e,t))||s.enumerable});return r};var M=(r,e,o)=>(o=r!=null?l(p(r)):{},c(e||!r||!r.__esModule?i(o,\"default\",{value:r,enumerable:!0}):o,r)),k=r=>c(i({},\"__esModule\",{value:!0}),r);var a=g((_,d)=>{d.exports=_jsx_runtime});var P={};x(P,{default:()=>j,frontmatter:()=>b});var n=M(a()),b={title:\"usePrefersReducedMotion\",package:\"@incmix-ui/hooks\",description:\"React hook to detect animation preference\"};function u(r){let e=Object.assign({p:\"p\",code:\"code\",a:\"a\",h2:\"h2\",pre:\"pre\",blockquote:\"blockquote\"},r.components);return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsxs)(e.p,{children:[(0,n.jsx)(e.code,{children:\"usePrefersReducedMotion\"}),` is a custom hook used to help detect the users motion\npreference.`]}),`\n`,(0,n.jsx)(e.p,{children:(0,n.jsx)(e.a,{href:\"https://developer.mozilla.org/en-US/docs/Web/CSS/@media/prefers-reduced-motion\",children:\"Learn more about the API and its backgrounds.\"})}),`\n`,(0,n.jsx)(e.h2,{id:\"import\",children:\"Import\"}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-js\",children:`import { usePrefersReducedMotion } from '@incmix-ui/react'\n`})}),`\n`,(0,n.jsx)(e.h2,{id:\"return-value\",children:\"Return value\"}),`\n`,(0,n.jsxs)(e.p,{children:[\"The \",(0,n.jsx)(e.code,{children:\"usePrefersReducedMotion\"}),` hook returns a boolean, indicating whether the\nuser prefers reduced motion.`]}),`\n`,(0,n.jsxs)(e.blockquote,{children:[`\n`,(0,n.jsxs)(e.p,{children:[`Keep in mind this API relies on the users browser support of\n`,(0,n.jsx)(e.code,{children:\"window.matchMedia\"}),\" and will always return \",(0,n.jsx)(e.code,{children:\"false\"}),` if it is not supported or\ndoes not exist (e.g. during serverside rendering).`]}),`\n`]}),`\n`,(0,n.jsx)(e.h2,{id:\"usage\",children:\"Usage\"}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-jsx\",live:\"false\",children:`import { Image, keyframes, usePrefersReducedMotion } from '@incmix-ui/react'\nimport logo from './logo.svg'\n\nconst spin = keyframes\\`\n  from { transform: rotate(0deg); }\n  to { transform: rotate(360deg); }\n\\`\n\nfunction Example() {\n  const prefersReducedMotion = usePrefersReducedMotion()\n\n  const animation = prefersReducedMotion ? undefined : \\`\\${spin} infinite 20s linear\\`\n\n  return <Image animation={animation} src={logo} {...props} />\n}\n`})})]})}function R(r={}){let{wrapper:e}=r.components||{};return e?(0,n.jsx)(e,Object.assign({},r,{children:(0,n.jsx)(u,r)})):u(r)}var j=R;return k(P);})();\n;return Component;"
    },
    "_id": "docs/hooks/use-prefers-reduced-motion.mdx",
    "_raw": {
      "sourceFilePath": "docs/hooks/use-prefers-reduced-motion.mdx",
      "sourceFileName": "use-prefers-reduced-motion.mdx",
      "sourceFileDir": "docs/hooks",
      "contentType": "mdx",
      "flattenedPath": "docs/hooks/use-prefers-reduced-motion"
    },
    "type": "Doc",
    "slug": "/docs/hooks/use-prefers-reduced-motion",
    "frontMatter": {
      "title": "usePrefersReducedMotion",
      "package": "@incmix-ui/hooks",
      "description": "React hook to detect animation preference",
      "slug": "/docs/hooks/use-prefers-reduced-motion",
      "editUrl": "https://github.com/incmix-ui/incmix-ui-docs/tree/main/content/docs/hooks/use-prefers-reduced-motion.mdx",
      "headings": [
        {
          "text": "Import",
          "id": "import",
          "level": "h2"
        },
        {
          "text": "Return value",
          "id": "return-value",
          "level": "h2"
        },
        {
          "text": "Usage",
          "id": "usage",
          "level": "h2"
        }
      ]
    }
  },
  {
    "title": "useRadioGroup",
    "package": "@incmix-ui/radio",
    "description": "React hooks to manage radio groups.",
    "scope": "usage",
    "body": {
      "raw": "\n`useRadioGroup` is a custom hook that provides all the state management logic\nfor a group of radios.\n\n## Import\n\n```js\nimport { useRadioGroup } from '@incmix-ui/react'\n```\n\n## Return value\n\nThe `useRadioGroup` hook returns following props\n\n| Name            | Type                                | Description                                                                    |\n| --------------- | ----------------------------------- | ------------------------------------------------------------------------------ |\n| `value`         | `StringOrNumber[]`                  | The value of radio group.                                                      |\n| `name`          | `string`                            | The name of the radio options. All radio options must use the same name.       |\n| `ref`           | `any`                               | The ref of the radio group.                                                    |\n| `isDisabled`    | `boolean`                           | A utility to manage disabled state.                                            |\n| `isFocusable`   | `boolean`                           | A utility to manage focused state.                                             |\n| `focus`         | `() => void`                        | A utility function to set the focus on the first enabled radio.                |\n| `onChange`      | `(nextValue: EventOrValue) => void` | The onChange handler for the radio group.                                      |\n| `setValue`      | `(state: StringOrNumber[]) => void` | A function to set the value of the radio group.                                |\n| `getRadioProps` | `(props?: Dict) => Dict`            | A function that takes root props and handles changes for the radio group       |\n| `getRootProps`  | `(props?: Dict) => Dict`            | A function that takes radio root props and handles changes for the radio group |\n| `htmlProps`     | `{}`                                | A function that takes radio root props and handles changes for the radio group |\n\n## Usage\n\n```jsx\nfunction Example() {\n  function CustomRadio(props) {\n    const { image, ...radioProps } = props\n    const { state, getInputProps, getCheckboxProps, htmlProps, getLabelProps } = useRadio(radioProps)\n\n    return (\n      <incmix.label {...htmlProps} cursor=\"pointer\">\n        <input {...getInputProps({})} hidden />\n        <Box {...getCheckboxProps()} bg={state.isChecked ? 'green.200' : 'transparent'} w={12} p={1} rounded=\"full\">\n          <Image src={image} rounded=\"full\" {...getLabelProps()} />\n        </Box>\n      </incmix.label>\n    )\n  }\n\n  const toast = useToast()\n\n  const avatars = [\n    { name: 'Kat', image: 'https://randomuser.me/api/portraits/women/44.jpg' },\n    { name: 'Kevin', image: 'https://randomuser.me/api/portraits/men/86.jpg' },\n    { name: 'Andy', image: 'https://randomuser.me/api/portraits/men/29.jpg' },\n    { name: 'Jess', image: 'https://randomuser.me/api/portraits/women/95.jpg' },\n  ]\n\n  const handleChange = value => {\n    toast({\n      title: `The value got changed to ${value}!`,\n      status: 'success',\n      duration: 2000,\n    })\n  }\n\n  const { value, getRadioProps, getRootProps } = useRadioGroup({\n    defaultValue: 'Kevin',\n    onChange: handleChange,\n  })\n\n  return (\n    <Stack {...getRootProps()}>\n      <Text>The selected radio is: {value}</Text>\n      <HStack>\n        {avatars.map(avatar => {\n          return <CustomRadio key={avatar.name} image={avatar.image} {...getRadioProps({ value: avatar.name })} />\n        })}\n      </HStack>\n    </Stack>\n  )\n}\n```\n\n## Using `isDisabled` and `isFocusable`\n\nWhen providing the hook with the `isDisabled` and/or `isFocusable` props, this\nvalues also need to be returned and passed to the radio inputs.\n\nThis is different than simply passing them as props to the `RadioGroup`\ncomponent because the component has access to context to supply the values to\nthe radio inputs.\n\nBelow is an example with `isDisabled` being passed to the hook and used with the\n`Radio` component. If needed, this custom component can than be controllable by\na parent, which would supply the logic to determine if the inputs need to be\ndisabled.\n\n```jsx manual=true\nfunction CustomRadioGroup(props) {\n  const { options, ...rest } = props\n\n  const { getRootProps, getRadioProps, isDisabled } = useRadioGroup({\n    ...rest,\n  })\n\n  const group = getRootProps()\n\n  return (\n    <HStack {...group}>\n      {options.map(value => {\n        const radio = getRadioProps({ value })\n        return (\n          <Radio isDisabled={isDisabled} key={value} {...radio}>\n            {value}\n          </Radio>\n        )\n      })}\n    </HStack>\n  )\n}\n\nfunction Parent() {\n  const [isDisabled, setIsDisabled] = useState(true)\n\n  // Some logic to handle the disabled state\n\n  return (\n    <>\n      {/* Any components above */}\n      <CustomRadioGroup isDisabled={isDisabled} options={['react', 'vue', 'svelte']} />\n      {/* Any components below */}\n    </>\n  )\n}\n\nrender(<Parent />)\n```\n\n## Parameters\n\nThe `useRadioGroup` hook accepts an object with the following properties:\n\n<PropsTable of=\"useRadioGroup\" />\n",
      "code": "var Component=(()=>{var h=Object.create;var d=Object.defineProperty;var p=Object.getOwnPropertyDescriptor;var u=Object.getOwnPropertyNames;var m=Object.getPrototypeOf,g=Object.prototype.hasOwnProperty;var b=(t,e)=>()=>(e||t((e={exports:{}}).exports,e),e.exports),f=(t,e)=>{for(var o in e)d(t,o,{get:e[o],enumerable:!0})},a=(t,e,o,i)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let r of u(e))!g.call(t,r)&&r!==o&&d(t,r,{get:()=>e[r],enumerable:!(i=p(e,r))||i.enumerable});return t};var v=(t,e,o)=>(o=t!=null?h(m(t)):{},a(e||!t||!t.__esModule?d(o,\"default\",{value:t,enumerable:!0}):o,t)),R=t=>a(d({},\"__esModule\",{value:!0}),t);var c=b((w,s)=>{s.exports=_jsx_runtime});var D={};f(D,{default:()=>k,frontmatter:()=>x});var n=v(c()),x={title:\"useRadioGroup\",package:\"@incmix-ui/radio\",description:\"React hooks to manage radio groups.\"};function l(t){let e=Object.assign({p:\"p\",code:\"code\",h2:\"h2\",pre:\"pre\",table:\"table\",thead:\"thead\",tr:\"tr\",th:\"th\",tbody:\"tbody\",td:\"td\"},t.components),{PropsTable:o}=e;return o||y(\"PropsTable\",!0),(0,n.jsxs)(n.Fragment,{children:[(0,n.jsxs)(e.p,{children:[(0,n.jsx)(e.code,{children:\"useRadioGroup\"}),` is a custom hook that provides all the state management logic\nfor a group of radios.`]}),`\n`,(0,n.jsx)(e.h2,{id:\"import\",children:\"Import\"}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-js\",children:`import { useRadioGroup } from '@incmix-ui/react'\n`})}),`\n`,(0,n.jsx)(e.h2,{id:\"return-value\",children:\"Return value\"}),`\n`,(0,n.jsxs)(e.p,{children:[\"The \",(0,n.jsx)(e.code,{children:\"useRadioGroup\"}),\" hook returns following props\"]}),`\n`,(0,n.jsxs)(e.table,{children:[(0,n.jsx)(e.thead,{children:(0,n.jsxs)(e.tr,{children:[(0,n.jsx)(e.th,{children:\"Name\"}),(0,n.jsx)(e.th,{children:\"Type\"}),(0,n.jsx)(e.th,{children:\"Description\"})]})}),(0,n.jsxs)(e.tbody,{children:[(0,n.jsxs)(e.tr,{children:[(0,n.jsx)(e.td,{children:(0,n.jsx)(e.code,{children:\"value\"})}),(0,n.jsx)(e.td,{children:(0,n.jsx)(e.code,{children:\"StringOrNumber[]\"})}),(0,n.jsx)(e.td,{children:\"The value of radio group.\"})]}),(0,n.jsxs)(e.tr,{children:[(0,n.jsx)(e.td,{children:(0,n.jsx)(e.code,{children:\"name\"})}),(0,n.jsx)(e.td,{children:(0,n.jsx)(e.code,{children:\"string\"})}),(0,n.jsx)(e.td,{children:\"The name of the radio options. All radio options must use the same name.\"})]}),(0,n.jsxs)(e.tr,{children:[(0,n.jsx)(e.td,{children:(0,n.jsx)(e.code,{children:\"ref\"})}),(0,n.jsx)(e.td,{children:(0,n.jsx)(e.code,{children:\"any\"})}),(0,n.jsx)(e.td,{children:\"The ref of the radio group.\"})]}),(0,n.jsxs)(e.tr,{children:[(0,n.jsx)(e.td,{children:(0,n.jsx)(e.code,{children:\"isDisabled\"})}),(0,n.jsx)(e.td,{children:(0,n.jsx)(e.code,{children:\"boolean\"})}),(0,n.jsx)(e.td,{children:\"A utility to manage disabled state.\"})]}),(0,n.jsxs)(e.tr,{children:[(0,n.jsx)(e.td,{children:(0,n.jsx)(e.code,{children:\"isFocusable\"})}),(0,n.jsx)(e.td,{children:(0,n.jsx)(e.code,{children:\"boolean\"})}),(0,n.jsx)(e.td,{children:\"A utility to manage focused state.\"})]}),(0,n.jsxs)(e.tr,{children:[(0,n.jsx)(e.td,{children:(0,n.jsx)(e.code,{children:\"focus\"})}),(0,n.jsx)(e.td,{children:(0,n.jsx)(e.code,{children:\"() => void\"})}),(0,n.jsx)(e.td,{children:\"A utility function to set the focus on the first enabled radio.\"})]}),(0,n.jsxs)(e.tr,{children:[(0,n.jsx)(e.td,{children:(0,n.jsx)(e.code,{children:\"onChange\"})}),(0,n.jsx)(e.td,{children:(0,n.jsx)(e.code,{children:\"(nextValue: EventOrValue) => void\"})}),(0,n.jsx)(e.td,{children:\"The onChange handler for the radio group.\"})]}),(0,n.jsxs)(e.tr,{children:[(0,n.jsx)(e.td,{children:(0,n.jsx)(e.code,{children:\"setValue\"})}),(0,n.jsx)(e.td,{children:(0,n.jsx)(e.code,{children:\"(state: StringOrNumber[]) => void\"})}),(0,n.jsx)(e.td,{children:\"A function to set the value of the radio group.\"})]}),(0,n.jsxs)(e.tr,{children:[(0,n.jsx)(e.td,{children:(0,n.jsx)(e.code,{children:\"getRadioProps\"})}),(0,n.jsx)(e.td,{children:(0,n.jsx)(e.code,{children:\"(props?: Dict) => Dict\"})}),(0,n.jsx)(e.td,{children:\"A function that takes root props and handles changes for the radio group\"})]}),(0,n.jsxs)(e.tr,{children:[(0,n.jsx)(e.td,{children:(0,n.jsx)(e.code,{children:\"getRootProps\"})}),(0,n.jsx)(e.td,{children:(0,n.jsx)(e.code,{children:\"(props?: Dict) => Dict\"})}),(0,n.jsx)(e.td,{children:\"A function that takes radio root props and handles changes for the radio group\"})]}),(0,n.jsxs)(e.tr,{children:[(0,n.jsx)(e.td,{children:(0,n.jsx)(e.code,{children:\"htmlProps\"})}),(0,n.jsx)(e.td,{children:(0,n.jsx)(e.code,{children:\"{}\"})}),(0,n.jsx)(e.td,{children:\"A function that takes radio root props and handles changes for the radio group\"})]})]})]}),`\n`,(0,n.jsx)(e.h2,{id:\"usage\",children:\"Usage\"}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-jsx\",children:`function Example() {\n  function CustomRadio(props) {\n    const { image, ...radioProps } = props\n    const { state, getInputProps, getCheckboxProps, htmlProps, getLabelProps } = useRadio(radioProps)\n\n    return (\n      <incmix.label {...htmlProps} cursor=\"pointer\">\n        <input {...getInputProps({})} hidden />\n        <Box {...getCheckboxProps()} bg={state.isChecked ? 'green.200' : 'transparent'} w={12} p={1} rounded=\"full\">\n          <Image src={image} rounded=\"full\" {...getLabelProps()} />\n        </Box>\n      </incmix.label>\n    )\n  }\n\n  const toast = useToast()\n\n  const avatars = [\n    { name: 'Kat', image: 'https://randomuser.me/api/portraits/women/44.jpg' },\n    { name: 'Kevin', image: 'https://randomuser.me/api/portraits/men/86.jpg' },\n    { name: 'Andy', image: 'https://randomuser.me/api/portraits/men/29.jpg' },\n    { name: 'Jess', image: 'https://randomuser.me/api/portraits/women/95.jpg' },\n  ]\n\n  const handleChange = value => {\n    toast({\n      title: \\`The value got changed to \\${value}!\\`,\n      status: 'success',\n      duration: 2000,\n    })\n  }\n\n  const { value, getRadioProps, getRootProps } = useRadioGroup({\n    defaultValue: 'Kevin',\n    onChange: handleChange,\n  })\n\n  return (\n    <Stack {...getRootProps()}>\n      <Text>The selected radio is: {value}</Text>\n      <HStack>\n        {avatars.map(avatar => {\n          return <CustomRadio key={avatar.name} image={avatar.image} {...getRadioProps({ value: avatar.name })} />\n        })}\n      </HStack>\n    </Stack>\n  )\n}\n`})}),`\n`,(0,n.jsxs)(e.h2,{id:\"using-isdisabled-and-isfocusable\",children:[\"Using \",(0,n.jsx)(e.code,{children:\"isDisabled\"}),\" and \",(0,n.jsx)(e.code,{children:\"isFocusable\"})]}),`\n`,(0,n.jsxs)(e.p,{children:[\"When providing the hook with the \",(0,n.jsx)(e.code,{children:\"isDisabled\"}),\" and/or \",(0,n.jsx)(e.code,{children:\"isFocusable\"}),` props, this\nvalues also need to be returned and passed to the radio inputs.`]}),`\n`,(0,n.jsxs)(e.p,{children:[\"This is different than simply passing them as props to the \",(0,n.jsx)(e.code,{children:\"RadioGroup\"}),`\ncomponent because the component has access to context to supply the values to\nthe radio inputs.`]}),`\n`,(0,n.jsxs)(e.p,{children:[\"Below is an example with \",(0,n.jsx)(e.code,{children:\"isDisabled\"}),` being passed to the hook and used with the\n`,(0,n.jsx)(e.code,{children:\"Radio\"}),` component. If needed, this custom component can than be controllable by\na parent, which would supply the logic to determine if the inputs need to be\ndisabled.`]}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-jsx\",manual:\"true\",children:`function CustomRadioGroup(props) {\n  const { options, ...rest } = props\n\n  const { getRootProps, getRadioProps, isDisabled } = useRadioGroup({\n    ...rest,\n  })\n\n  const group = getRootProps()\n\n  return (\n    <HStack {...group}>\n      {options.map(value => {\n        const radio = getRadioProps({ value })\n        return (\n          <Radio isDisabled={isDisabled} key={value} {...radio}>\n            {value}\n          </Radio>\n        )\n      })}\n    </HStack>\n  )\n}\n\nfunction Parent() {\n  const [isDisabled, setIsDisabled] = useState(true)\n\n  // Some logic to handle the disabled state\n\n  return (\n    <>\n      {/* Any components above */}\n      <CustomRadioGroup isDisabled={isDisabled} options={['react', 'vue', 'svelte']} />\n      {/* Any components below */}\n    </>\n  )\n}\n\nrender(<Parent />)\n`})}),`\n`,(0,n.jsx)(e.h2,{id:\"parameters\",children:\"Parameters\"}),`\n`,(0,n.jsxs)(e.p,{children:[\"The \",(0,n.jsx)(e.code,{children:\"useRadioGroup\"}),\" hook accepts an object with the following properties:\"]}),`\n`,(0,n.jsx)(o,{of:\"useRadioGroup\"})]})}function P(t={}){let{wrapper:e}=t.components||{};return e?(0,n.jsx)(e,Object.assign({},t,{children:(0,n.jsx)(l,t)})):l(t)}var k=P;function y(t,e){throw new Error(\"Expected \"+(e?\"component\":\"object\")+\" `\"+t+\"` to be defined: you likely forgot to import, pass, or provide it.\")}return R(D);})();\n;return Component;"
    },
    "_id": "docs/hooks/use-radio-group.mdx",
    "_raw": {
      "sourceFilePath": "docs/hooks/use-radio-group.mdx",
      "sourceFileName": "use-radio-group.mdx",
      "sourceFileDir": "docs/hooks",
      "contentType": "mdx",
      "flattenedPath": "docs/hooks/use-radio-group"
    },
    "type": "Doc",
    "slug": "/docs/hooks/use-radio-group",
    "frontMatter": {
      "title": "useRadioGroup",
      "package": "@incmix-ui/radio",
      "description": "React hooks to manage radio groups.",
      "slug": "/docs/hooks/use-radio-group",
      "editUrl": "https://github.com/incmix-ui/incmix-ui-docs/tree/main/content/docs/hooks/use-radio-group.mdx",
      "headings": [
        {
          "text": "Import",
          "id": "import",
          "level": "h2"
        },
        {
          "text": "Return value",
          "id": "return-value",
          "level": "h2"
        },
        {
          "text": "Usage",
          "id": "usage",
          "level": "h2"
        },
        {
          "text": "Using `isDisabled` and `isFocusable`",
          "id": "using-isdisabled-and-isfocusable",
          "level": "h2"
        },
        {
          "text": "Parameters",
          "id": "parameters",
          "level": "h2"
        }
      ]
    }
  },
  {
    "title": "useRadio",
    "package": "@incmix-ui/radio",
    "description": "React hook to manage radio.",
    "scope": "usage",
    "body": {
      "raw": "\n`useRadio` is a custom hook used to provide radio functionality, as well as\nstate and focus management to custom radio components when using it.\n\n## Import\n\n```js\nimport { useRadio } from '@incmix-ui/react'\n```\n\n## Return value\n\nThe `useRadio` hook returns following props\n\n| Name               | Type         | Description                                                              |\n| ------------------ | ------------ | ------------------------------------------------------------------------ |\n| `state`            | `RadioState` | An object that contains all props defining the current state of a radio. |\n| `getCheckboxProps` | `PropGetter` | A function to get the props of the radio.                                |\n| `getInputProps`    | `PropGetter` | A function to get the props of the input field.                          |\n| `getLabelProps`    | `PropGetter` | A function to get the props of the radio label.                          |\n| `getRootProps`     | `PropGetter` | A function to get the props of the radio root.                           |\n| `htmlProps`        | `{}`         | An object with all htmlProps.                                            |\n\n> The `getCheckboxProps` function does return the props of the radio. The naming\n> error is known. Changing it would mean a breaking change to a lot of users,\n> which is why it will stay like this until the next major release.\n\n## Usage\n\n```jsx\nfunction Example() {\n  const CustomRadio = props => {\n    const { image, ...radioProps } = props\n    const { state, getInputProps, getCheckboxProps, htmlProps, getLabelProps } = useRadio(radioProps)\n\n    return (\n      <incmix.label {...htmlProps} cursor=\"pointer\">\n        <input {...getInputProps({})} hidden />\n        <Box {...getCheckboxProps()} bg={state.isChecked ? 'green.200' : 'transparent'} w={12} p={1} rounded=\"full\">\n          <Image src={image} rounded=\"full\" {...getLabelProps()} />\n        </Box>\n      </incmix.label>\n    )\n  }\n\n  return (\n    <div>\n      <CustomRadio image={'https://randomuser.me/api/portraits/men/86.jpg'} />\n    </div>\n  )\n}\n```\n\n## Parameters\n\nThe `useRadio` hook accepts an object with the following properties:\n\n<PropsTable of=\"useRadio\" />\n",
      "code": "var Component=(()=>{var s=Object.create;var i=Object.defineProperty;var p=Object.getOwnPropertyDescriptor;var u=Object.getOwnPropertyNames;var m=Object.getPrototypeOf,g=Object.prototype.hasOwnProperty;var f=(n,e)=>()=>(e||n((e={exports:{}}).exports,e),e.exports),b=(n,e)=>{for(var r in e)i(n,r,{get:e[r],enumerable:!0})},c=(n,e,r,d)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let o of u(e))!g.call(n,o)&&o!==r&&i(n,o,{get:()=>e[o],enumerable:!(d=p(e,o))||d.enumerable});return n};var x=(n,e,r)=>(r=n!=null?s(m(n)):{},c(e||!n||!n.__esModule?i(r,\"default\",{value:n,enumerable:!0}):r,n)),P=n=>c(i({},\"__esModule\",{value:!0}),n);var l=f((_,h)=>{h.exports=_jsx_runtime});var y={};b(y,{default:()=>w,frontmatter:()=>k});var t=x(l()),k={title:\"useRadio\",package:\"@incmix-ui/radio\",description:\"React hook to manage radio.\"};function a(n){let e=Object.assign({p:\"p\",code:\"code\",h2:\"h2\",pre:\"pre\",table:\"table\",thead:\"thead\",tr:\"tr\",th:\"th\",tbody:\"tbody\",td:\"td\",blockquote:\"blockquote\"},n.components),{PropsTable:r}=e;return r||R(\"PropsTable\",!0),(0,t.jsxs)(t.Fragment,{children:[(0,t.jsxs)(e.p,{children:[(0,t.jsx)(e.code,{children:\"useRadio\"}),` is a custom hook used to provide radio functionality, as well as\nstate and focus management to custom radio components when using it.`]}),`\n`,(0,t.jsx)(e.h2,{id:\"import\",children:\"Import\"}),`\n`,(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:\"language-js\",children:`import { useRadio } from '@incmix-ui/react'\n`})}),`\n`,(0,t.jsx)(e.h2,{id:\"return-value\",children:\"Return value\"}),`\n`,(0,t.jsxs)(e.p,{children:[\"The \",(0,t.jsx)(e.code,{children:\"useRadio\"}),\" hook returns following props\"]}),`\n`,(0,t.jsxs)(e.table,{children:[(0,t.jsx)(e.thead,{children:(0,t.jsxs)(e.tr,{children:[(0,t.jsx)(e.th,{children:\"Name\"}),(0,t.jsx)(e.th,{children:\"Type\"}),(0,t.jsx)(e.th,{children:\"Description\"})]})}),(0,t.jsxs)(e.tbody,{children:[(0,t.jsxs)(e.tr,{children:[(0,t.jsx)(e.td,{children:(0,t.jsx)(e.code,{children:\"state\"})}),(0,t.jsx)(e.td,{children:(0,t.jsx)(e.code,{children:\"RadioState\"})}),(0,t.jsx)(e.td,{children:\"An object that contains all props defining the current state of a radio.\"})]}),(0,t.jsxs)(e.tr,{children:[(0,t.jsx)(e.td,{children:(0,t.jsx)(e.code,{children:\"getCheckboxProps\"})}),(0,t.jsx)(e.td,{children:(0,t.jsx)(e.code,{children:\"PropGetter\"})}),(0,t.jsx)(e.td,{children:\"A function to get the props of the radio.\"})]}),(0,t.jsxs)(e.tr,{children:[(0,t.jsx)(e.td,{children:(0,t.jsx)(e.code,{children:\"getInputProps\"})}),(0,t.jsx)(e.td,{children:(0,t.jsx)(e.code,{children:\"PropGetter\"})}),(0,t.jsx)(e.td,{children:\"A function to get the props of the input field.\"})]}),(0,t.jsxs)(e.tr,{children:[(0,t.jsx)(e.td,{children:(0,t.jsx)(e.code,{children:\"getLabelProps\"})}),(0,t.jsx)(e.td,{children:(0,t.jsx)(e.code,{children:\"PropGetter\"})}),(0,t.jsx)(e.td,{children:\"A function to get the props of the radio label.\"})]}),(0,t.jsxs)(e.tr,{children:[(0,t.jsx)(e.td,{children:(0,t.jsx)(e.code,{children:\"getRootProps\"})}),(0,t.jsx)(e.td,{children:(0,t.jsx)(e.code,{children:\"PropGetter\"})}),(0,t.jsx)(e.td,{children:\"A function to get the props of the radio root.\"})]}),(0,t.jsxs)(e.tr,{children:[(0,t.jsx)(e.td,{children:(0,t.jsx)(e.code,{children:\"htmlProps\"})}),(0,t.jsx)(e.td,{children:(0,t.jsx)(e.code,{children:\"{}\"})}),(0,t.jsx)(e.td,{children:\"An object with all htmlProps.\"})]})]})]}),`\n`,(0,t.jsxs)(e.blockquote,{children:[`\n`,(0,t.jsxs)(e.p,{children:[\"The \",(0,t.jsx)(e.code,{children:\"getCheckboxProps\"}),` function does return the props of the radio. The naming\nerror is known. Changing it would mean a breaking change to a lot of users,\nwhich is why it will stay like this until the next major release.`]}),`\n`]}),`\n`,(0,t.jsx)(e.h2,{id:\"usage\",children:\"Usage\"}),`\n`,(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:\"language-jsx\",children:`function Example() {\n  const CustomRadio = props => {\n    const { image, ...radioProps } = props\n    const { state, getInputProps, getCheckboxProps, htmlProps, getLabelProps } = useRadio(radioProps)\n\n    return (\n      <incmix.label {...htmlProps} cursor=\"pointer\">\n        <input {...getInputProps({})} hidden />\n        <Box {...getCheckboxProps()} bg={state.isChecked ? 'green.200' : 'transparent'} w={12} p={1} rounded=\"full\">\n          <Image src={image} rounded=\"full\" {...getLabelProps()} />\n        </Box>\n      </incmix.label>\n    )\n  }\n\n  return (\n    <div>\n      <CustomRadio image={'https://randomuser.me/api/portraits/men/86.jpg'} />\n    </div>\n  )\n}\n`})}),`\n`,(0,t.jsx)(e.h2,{id:\"parameters\",children:\"Parameters\"}),`\n`,(0,t.jsxs)(e.p,{children:[\"The \",(0,t.jsx)(e.code,{children:\"useRadio\"}),\" hook accepts an object with the following properties:\"]}),`\n`,(0,t.jsx)(r,{of:\"useRadio\"})]})}function j(n={}){let{wrapper:e}=n.components||{};return e?(0,t.jsx)(e,Object.assign({},n,{children:(0,t.jsx)(a,n)})):a(n)}var w=j;function R(n,e){throw new Error(\"Expected \"+(e?\"component\":\"object\")+\" `\"+n+\"` to be defined: you likely forgot to import, pass, or provide it.\")}return P(y);})();\n;return Component;"
    },
    "_id": "docs/hooks/use-radio.mdx",
    "_raw": {
      "sourceFilePath": "docs/hooks/use-radio.mdx",
      "sourceFileName": "use-radio.mdx",
      "sourceFileDir": "docs/hooks",
      "contentType": "mdx",
      "flattenedPath": "docs/hooks/use-radio"
    },
    "type": "Doc",
    "slug": "/docs/hooks/use-radio",
    "frontMatter": {
      "title": "useRadio",
      "package": "@incmix-ui/radio",
      "description": "React hook to manage radio.",
      "slug": "/docs/hooks/use-radio",
      "editUrl": "https://github.com/incmix-ui/incmix-ui-docs/tree/main/content/docs/hooks/use-radio.mdx",
      "headings": [
        {
          "text": "Import",
          "id": "import",
          "level": "h2"
        },
        {
          "text": "Return value",
          "id": "return-value",
          "level": "h2"
        },
        {
          "text": "Usage",
          "id": "usage",
          "level": "h2"
        },
        {
          "text": "Parameters",
          "id": "parameters",
          "level": "h2"
        }
      ]
    }
  },
  {
    "title": "useTheme",
    "package": "@incmix-ui/system",
    "description": "React hook to get access to theme by reading from theme context",
    "scope": "usage",
    "body": {
      "raw": "\n`useTheme` is a custom hook used to get the theme object from context.\n\n## Import\n\n```js\nimport { useTheme } from '@incmix-ui/react'\n```\n\n## Return value\n\nThe `useTheme` hook returns the theme object.\n\n## Usage\n\n```jsx live=false\nfunction Example() {\n  const theme = useTheme()\n\n  return <div>{/* Do something with the theme */}</div>\n}\n```\n",
      "code": "var Component=(()=>{var d=Object.create;var r=Object.defineProperty;var u=Object.getOwnPropertyDescriptor;var l=Object.getOwnPropertyNames;var p=Object.getPrototypeOf,g=Object.prototype.hasOwnProperty;var x=(t,e)=>()=>(e||t((e={exports:{}}).exports,e),e.exports),j=(t,e)=>{for(var o in e)r(t,o,{get:e[o],enumerable:!0})},i=(t,e,o,s)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let c of l(e))!g.call(t,c)&&c!==o&&r(t,c,{get:()=>e[c],enumerable:!(s=u(e,c))||s.enumerable});return t};var f=(t,e,o)=>(o=t!=null?d(p(t)):{},i(e||!t||!t.__esModule?r(o,\"default\",{value:t,enumerable:!0}):o,t)),_=t=>i(r({},\"__esModule\",{value:!0}),t);var m=x((D,h)=>{h.exports=_jsx_runtime});var k={};j(k,{default:()=>v,frontmatter:()=>T});var n=f(m()),T={title:\"useTheme\",package:\"@incmix-ui/system\",description:\"React hook to get access to theme by reading from theme context\"};function a(t){let e=Object.assign({p:\"p\",code:\"code\",h2:\"h2\",pre:\"pre\"},t.components);return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsxs)(e.p,{children:[(0,n.jsx)(e.code,{children:\"useTheme\"}),\" is a custom hook used to get the theme object from context.\"]}),`\n`,(0,n.jsx)(e.h2,{id:\"import\",children:\"Import\"}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-js\",children:`import { useTheme } from '@incmix-ui/react'\n`})}),`\n`,(0,n.jsx)(e.h2,{id:\"return-value\",children:\"Return value\"}),`\n`,(0,n.jsxs)(e.p,{children:[\"The \",(0,n.jsx)(e.code,{children:\"useTheme\"}),\" hook returns the theme object.\"]}),`\n`,(0,n.jsx)(e.h2,{id:\"usage\",children:\"Usage\"}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-jsx\",live:\"false\",children:`function Example() {\n  const theme = useTheme()\n\n  return <div>{/* Do something with the theme */}</div>\n}\n`})})]})}function b(t={}){let{wrapper:e}=t.components||{};return e?(0,n.jsx)(e,Object.assign({},t,{children:(0,n.jsx)(a,t)})):a(t)}var v=b;return _(k);})();\n;return Component;"
    },
    "_id": "docs/hooks/use-theme.mdx",
    "_raw": {
      "sourceFilePath": "docs/hooks/use-theme.mdx",
      "sourceFileName": "use-theme.mdx",
      "sourceFileDir": "docs/hooks",
      "contentType": "mdx",
      "flattenedPath": "docs/hooks/use-theme"
    },
    "type": "Doc",
    "slug": "/docs/hooks/use-theme",
    "frontMatter": {
      "title": "useTheme",
      "package": "@incmix-ui/system",
      "description": "React hook to get access to theme by reading from theme context",
      "slug": "/docs/hooks/use-theme",
      "editUrl": "https://github.com/incmix-ui/incmix-ui-docs/tree/main/content/docs/hooks/use-theme.mdx",
      "headings": [
        {
          "text": "Import",
          "id": "import",
          "level": "h2"
        },
        {
          "text": "Return value",
          "id": "return-value",
          "level": "h2"
        },
        {
          "text": "Usage",
          "id": "usage",
          "level": "h2"
        }
      ]
    }
  },
  {
    "title": "useToken",
    "package": "@incmix-ui/system",
    "description": "Hook to resolve design tokens from the theme",
    "scope": "usage",
    "body": {
      "raw": "\n`useToken` is a custom hook used to resolve design tokens from the theme.\n\n## Import\n\n```js\nimport { useToken } from '@incmix-ui/react'\n```\n\n## Return value\n\nThe `useToken` hook retrieves whatever is in the theme at the given path(s).\n\n## Usage\n\n```jsx\nfunction Example() {\n  const [red100, blue200] = useToken(\n    // the key within the theme, in this case `theme.colors`\n    'colors',\n    // the subkey(s), resolving to `theme.colors.red.100`\n    ['red.100', 'blue.200'],\n    // a single fallback or fallback array matching the length of the previous arg\n  )\n\n  return (\n    <Box p={4} boxShadow={`inset 0 4px 0 ${red100}, 0 0 8px ${blue200}`}>\n      You can utilize <Code>useToken</Code> to create a <Code>boxShadow</Code> with colors from your theme.\n    </Box>\n  )\n}\n```\n\n> Note that you can also use the `sx` prop to write styles freely using themes\n> tokens.\n",
      "code": "var Component=(()=>{var d=Object.create;var s=Object.defineProperty;var u=Object.getOwnPropertyDescriptor;var m=Object.getOwnPropertyNames;var p=Object.getPrototypeOf,g=Object.prototype.hasOwnProperty;var k=(n,e)=>()=>(e||n((e={exports:{}}).exports,e),e.exports),x=(n,e)=>{for(var t in e)s(n,t,{get:e[t],enumerable:!0})},i=(n,e,t,c)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let r of m(e))!g.call(n,r)&&r!==t&&s(n,r,{get:()=>e[r],enumerable:!(c=u(e,r))||c.enumerable});return n};var f=(n,e,t)=>(t=n!=null?d(p(n)):{},i(e||!n||!n.__esModule?s(t,\"default\",{value:n,enumerable:!0}):t,n)),b=n=>i(s({},\"__esModule\",{value:!0}),n);var a=k((_,h)=>{h.exports=_jsx_runtime});var w={};x(w,{default:()=>y,frontmatter:()=>j});var o=f(a()),j={title:\"useToken\",package:\"@incmix-ui/system\",description:\"Hook to resolve design tokens from the theme\"};function l(n){let e=Object.assign({p:\"p\",code:\"code\",h2:\"h2\",pre:\"pre\",blockquote:\"blockquote\"},n.components);return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsxs)(e.p,{children:[(0,o.jsx)(e.code,{children:\"useToken\"}),\" is a custom hook used to resolve design tokens from the theme.\"]}),`\n`,(0,o.jsx)(e.h2,{id:\"import\",children:\"Import\"}),`\n`,(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:\"language-js\",children:`import { useToken } from '@incmix-ui/react'\n`})}),`\n`,(0,o.jsx)(e.h2,{id:\"return-value\",children:\"Return value\"}),`\n`,(0,o.jsxs)(e.p,{children:[\"The \",(0,o.jsx)(e.code,{children:\"useToken\"}),\" hook retrieves whatever is in the theme at the given path(s).\"]}),`\n`,(0,o.jsx)(e.h2,{id:\"usage\",children:\"Usage\"}),`\n`,(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:\"language-jsx\",children:`function Example() {\n  const [red100, blue200] = useToken(\n    // the key within the theme, in this case \\`theme.colors\\`\n    'colors',\n    // the subkey(s), resolving to \\`theme.colors.red.100\\`\n    ['red.100', 'blue.200'],\n    // a single fallback or fallback array matching the length of the previous arg\n  )\n\n  return (\n    <Box p={4} boxShadow={\\`inset 0 4px 0 \\${red100}, 0 0 8px \\${blue200}\\`}>\n      You can utilize <Code>useToken</Code> to create a <Code>boxShadow</Code> with colors from your theme.\n    </Box>\n  )\n}\n`})}),`\n`,(0,o.jsxs)(e.blockquote,{children:[`\n`,(0,o.jsxs)(e.p,{children:[\"Note that you can also use the \",(0,o.jsx)(e.code,{children:\"sx\"}),` prop to write styles freely using themes\ntokens.`]}),`\n`]})]})}function v(n={}){let{wrapper:e}=n.components||{};return e?(0,o.jsx)(e,Object.assign({},n,{children:(0,o.jsx)(l,n)})):l(n)}var y=v;return b(w);})();\n;return Component;"
    },
    "_id": "docs/hooks/use-token.mdx",
    "_raw": {
      "sourceFilePath": "docs/hooks/use-token.mdx",
      "sourceFileName": "use-token.mdx",
      "sourceFileDir": "docs/hooks",
      "contentType": "mdx",
      "flattenedPath": "docs/hooks/use-token"
    },
    "type": "Doc",
    "slug": "/docs/hooks/use-token",
    "frontMatter": {
      "title": "useToken",
      "package": "@incmix-ui/system",
      "description": "Hook to resolve design tokens from the theme",
      "slug": "/docs/hooks/use-token",
      "editUrl": "https://github.com/incmix-ui/incmix-ui-docs/tree/main/content/docs/hooks/use-token.mdx",
      "headings": [
        {
          "text": "Import",
          "id": "import",
          "level": "h2"
        },
        {
          "text": "Return value",
          "id": "return-value",
          "level": "h2"
        },
        {
          "text": "Usage",
          "id": "usage",
          "level": "h2"
        }
      ]
    }
  },
  {
    "id": "button",
    "scope": "props",
    "body": {
      "raw": "\n## Props\n\n### Button Props\n\n`Button` composes the `Box` component, so you can pass all its props. These are\nprops specific to the `Button` component:\n\n<PropsTable of=\"Button\" />\n\n### Button Group Props\n\n`ButtonGroup` composes the `Box` component, so you can pass all its props. These\nare props specific to the `ButtonGroup` component:\n\n<PropsTable of=\"ButtonGroup\" />\n",
      "code": "var Component=(()=>{var h=Object.create;var s=Object.defineProperty;var a=Object.getOwnPropertyDescriptor;var l=Object.getOwnPropertyNames;var m=Object.getPrototypeOf,f=Object.prototype.hasOwnProperty;var x=(e,o)=>()=>(o||e((o={exports:{}}).exports,o),o.exports),B=(e,o)=>{for(var t in o)s(e,t,{get:o[t],enumerable:!0})},p=(e,o,t,c)=>{if(o&&typeof o==\"object\"||typeof o==\"function\")for(let r of l(o))!f.call(e,r)&&r!==t&&s(e,r,{get:()=>o[r],enumerable:!(c=a(o,r))||c.enumerable});return e};var b=(e,o,t)=>(t=e!=null?h(m(e)):{},p(o||!e||!e.__esModule?s(t,\"default\",{value:e,enumerable:!0}):t,e)),j=e=>p(s({},\"__esModule\",{value:!0}),e);var d=x((T,i)=>{i.exports=_jsx_runtime});var G={};B(G,{default:()=>y,frontmatter:()=>_});var n=b(d()),_={id:\"button\",scope:\"props\"};function u(e){let o=Object.assign({h2:\"h2\",h3:\"h3\",p:\"p\",code:\"code\"},e.components),{PropsTable:t}=o;return t||P(\"PropsTable\",!0),(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(o.h2,{id:\"props\",children:\"Props\"}),`\n`,(0,n.jsx)(o.h3,{id:\"button-props\",children:\"Button Props\"}),`\n`,(0,n.jsxs)(o.p,{children:[(0,n.jsx)(o.code,{children:\"Button\"}),\" composes the \",(0,n.jsx)(o.code,{children:\"Box\"}),` component, so you can pass all its props. These are\nprops specific to the `,(0,n.jsx)(o.code,{children:\"Button\"}),\" component:\"]}),`\n`,(0,n.jsx)(t,{of:\"Button\"}),`\n`,(0,n.jsx)(o.h3,{id:\"button-group-props\",children:\"Button Group Props\"}),`\n`,(0,n.jsxs)(o.p,{children:[(0,n.jsx)(o.code,{children:\"ButtonGroup\"}),\" composes the \",(0,n.jsx)(o.code,{children:\"Box\"}),` component, so you can pass all its props. These\nare props specific to the `,(0,n.jsx)(o.code,{children:\"ButtonGroup\"}),\" component:\"]}),`\n`,(0,n.jsx)(t,{of:\"ButtonGroup\"})]})}function g(e={}){let{wrapper:o}=e.components||{};return o?(0,n.jsx)(o,Object.assign({},e,{children:(0,n.jsx)(u,e)})):u(e)}var y=g;function P(e,o){throw new Error(\"Expected \"+(o?\"component\":\"object\")+\" `\"+e+\"` to be defined: you likely forgot to import, pass, or provide it.\")}return j(G);})();\n;return Component;"
    },
    "_id": "docs/components/button/props.mdx",
    "_raw": {
      "sourceFilePath": "docs/components/button/props.mdx",
      "sourceFileName": "props.mdx",
      "sourceFileDir": "docs/components/button",
      "contentType": "mdx",
      "flattenedPath": "docs/components/button/props"
    },
    "type": "Doc",
    "slug": "/docs/components/button/props",
    "frontMatter": {
      "slug": "/docs/components/button/props",
      "editUrl": "https://github.com/incmix-ui/incmix-ui-docs/tree/main/content/docs/components/button/props.mdx",
      "headings": [
        {
          "text": "Props",
          "id": "props",
          "level": "h2"
        },
        {
          "text": "Button Props",
          "id": "button-props",
          "level": "h3"
        },
        {
          "text": "Button Group Props",
          "id": "button-group-props",
          "level": "h3"
        }
      ]
    }
  },
  {
    "id": "button",
    "scope": "theming",
    "body": {
      "raw": "\nThe `Button` component is a single part component. All of the styling is applied\ndirectly to the `button` element.\n\n> To learn more about styling single part components, visit the\n> [Component Style](/docs/styled-system/component-style#styling-single-part-components)\n> page.\n\n## Theming properties\n\nThe properties that affect the theming of the `Button` component are:\n\n- `variant`: The visual variant of the button. Defaults to `solid`.\n- `colorScheme`: The color scheme of the button. Defaults to `gray`.\n- `size`: The size of the button. Defaults to `md`.\n\n## Theming utilities\n\n- `defineStyle`: a function used to create style objects.\n- `defineStyleConfig`: a function used to define the style configuration for a\n  single part component.\n\n```jsx live=false\nimport { defineStyle, defineStyleConfig } from '@incmix-ui/react'\n```\n\n## Customizing the default theme\n\n```jsx live=false\nimport { defineStyle, defineStyleConfig } from '@incmix-ui/react'\n\nconst outline = defineStyle({\n  border: '2px dashed', // change the appearance of the border\n  borderRadius: 0, // remove the border radius\n  fontWeight: 'semibold', // change the font weight\n})\n\nexport const buttonTheme = defineStyleConfig({\n  variants: { outline },\n})\n```\n\nAfter customizing the button theme, we can import it in our theme file and add\nit in the `components` property:\n\n```jsx live=false\nimport { extendTheme } from '@incmix-ui/react'\nimport { buttonTheme } from './components/button.ts'\n\nexport const theme = extendTheme({\n  components: { Button: buttonTheme },\n})\n```\n\n> This is a crucial step to make sure that any changes that we make to the\n> button theme are applied.\n\n## Adding a custom size\n\nLet's assume we want to include an extra large button size. Here's how we can do\nthat:\n\n```jsx live=false\nimport { defineStyle, defineStyleConfig } from '@incmix-ui/react'\n\nconst xl = defineStyle({\n  fontSize: 'xl',\n  px: '6',\n  h: '16',\n  borderRadius: 'md',\n})\n\nexport const buttonTheme = defineStyleConfig({\n  sizes: { xl },\n})\n\n// Now we can use the new `xl` size\n<Button size=\"xl\">...</Button>\n```\n\nEvery time you're adding anything new to the theme, you'd need to run the CLI\ncommand to get proper autocomplete in your IDE. You can learn more about the CLI\ntool [here](/docs/styled-system/cli).\n\n## Adding a custom variant\n\nLet's assume we want to include a custom branded variant. Here's how we can do\nthat:\n\n```jsx live=false\nimport { defineStyle, defineStyleConfig } from '@incmix-ui/react'\n\nconst brandPrimary = defineStyle({\n  background: 'orange.500',\n  color: 'white',\n  fontFamily: 'serif',\n  fontWeight: 'normal',\n\n  // let's also provide dark mode alternatives\n  _dark: {\n    background: 'orange.300',\n    color: 'orange.800',\n  }\n})\n\nexport const buttonTheme = defineStyleConfig({\n  variants: { brandPrimary },\n})\n\n// Now we can use the new `brandPrimary` variant\n<Button variant=\"brandPrimary\">...</Button>\n```\n\n## Using a custom color scheme\n\nLet's assume we want to use our own custom color scale based on our brand. We'd\nneed to define the color scale first in the main theme file:\n\n```jsx live=false\nimport { extendTheme } from '@incmix-ui/react'\n\nexport const theme = extendTheme({\n  colors: {\n    brand: {\n      50: '#f7fafc',\n      ...\n      500: '#718096',\n      ...\n      900: '#171923',\n    }\n  }\n})\n```\n\nThen, we can use the custom color scale as the color scheme for the button:\n\n```jsx live=false\n<Button colorScheme=\"brand\">...</Button>\n```\n\n## Changing the default properties\n\nLet's assume we want to change the default size, variant or color scheme of\nevery button in our app. Here's how we can do that:\n\n```jsx live=false\nimport { defineStyleConfig } from '@incmix-ui/react'\n\nexport const buttonTheme = defineStyleConfig({\n  defaultProps: {\n    size: 'lg',\n    variant: 'outline',\n    colorScheme: 'brand',\n  },\n})\n\n// This saves you time, instead of manually setting the size,\n// variant and color scheme every time you use a button:\n<Button size=\"lg\" variant=\"outline\" colorScheme=\"brand\">...</Button>\n```\n\n## Showcase\n\nimport { App, Index, ButtonTheme } from 'configs/sandpack-contents/component-theming/button'\n\n<SandpackEmbed\n  files={{\n    '/theme/components/Button.ts': ButtonTheme,\n    '/App.tsx': App,\n    '/index.tsx': {\n      code: Index,\n      hidden: true,\n    },\n  }}\n  dependencies={{\n    'react-icons': '^4.4.0',\n  }}\n/>\n",
      "code": "var Component=(()=>{var g=Object.create;var a=Object.defineProperty;var b=Object.getOwnPropertyDescriptor;var x=Object.getOwnPropertyNames;var y=Object.getPrototypeOf,v=Object.prototype.hasOwnProperty;var l=(t,e)=>()=>(e||t((e={exports:{}}).exports,e),e.exports),S=(t,e)=>{for(var o in e)a(t,o,{get:e[o],enumerable:!0})},s=(t,e,o,c)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let r of x(e))!v.call(t,r)&&r!==o&&a(t,r,{get:()=>e[r],enumerable:!(c=b(e,r))||c.enumerable});return t};var d=(t,e,o)=>(o=t!=null?g(y(t)):{},s(e||!t||!t.__esModule?a(o,\"default\",{value:t,enumerable:!0}):o,t)),w=t=>s(a({},\"__esModule\",{value:!0}),t);var m=l((_,h)=>{h.exports=_jsx_runtime});var p=l((M,u)=>{u.exports={App:`import { Box, SimpleGrid, IconButton, Button, useColorMode } from \"@incmix-ui/react\";\nimport { FaMoon, FaSun } from \"react-icons/fa\";\n\nexport default function App() {\n  const { toggleColorMode, colorMode } = useColorMode();\n  return (\n    <Box position=\"relative\" h=\"100vh\">\n      <SimpleGrid gap={12} p={12} columns={2}>\n        <Button>\n          Themed solid button\n        </Button>\n        <Button variant=\"custom\">\n          Themed custom button\n        </Button>\n        <Button variant=\"ghost\">\n          Themed ghost button\n        </Button>\n        <Button variant=\"outline\">\n          Themed outline button\n        </Button>\n        <Button variant=\"link\">\n          Themed link button\n        </Button>\n      </SimpleGrid>\n\n      <IconButton\n        aria-label=\"toggle theme\"\n        rounded=\"full\"\n        size=\"xs\"\n        position=\"absolute\"\n        bottom={4}\n        left={4}\n        onClick={toggleColorMode} icon={colorMode === \"dark\" ? <FaSun /> : <FaMoon />}\n      />\n    </Box>\n  );\n}`,Index:`import * as React from \"react\";\nimport { createRoot } from \"react-dom/client\";\nimport { IncmixProvider, extendTheme } from \"@incmix-ui/react\";\n\nimport App from \"./App\";\nimport { buttonTheme } from \"./theme/components/Button\";\n\nconst theme = extendTheme({\n  components: {\n    Button: buttonTheme,\n  }\n});\n\nconst container = document.getElementById(\"root\");\nconst root = createRoot(container!);\nroot.render(\n  <IncmixProvider theme={theme}>\n    <App />\n  </IncmixProvider>\n);`,ButtonTheme:`import { defineStyle, defineStyleConfig } from \"@incmix-ui/styled-system\"\n\nconst baseStyle = defineStyle({\n  borderRadius: 0, // disable the border radius\n  fontWeight: \"normal\", // change the font weight to normal\n  fontFamily: \"mono\", // change the font family to monospaced\n})\n\nconst sizes = {\n  md: defineStyle({\n    fontSize: \"sm\", // Change font size to sm (14px)\n  }),\n}\n\n// Defining a custom variant\nconst customVariant = defineStyle((props) => {\n  const { colorScheme: c } = props\n  return {\n    fontFamily: \"sans-serif\",\n    bg: \\`\\${c}.500\\`,\n    fontWeight: \"semibold\",\n    color: 'white',\n    borderRadius: '3xl',\n    transition: 'transform 0.15s ease-out, background 0.15s ease-out',\n    _dark: {\n      bg: \\`\\${c}.200\\`,\n      color: 'gray.800',\n    },\n\n    _hover: {\n      transform: \"scale(1.05, 1.05)\",\n      bg: \\`\\${c}.600\\`,\n\n      _dark: {\n        bg: \\`\\${c}.300\\`,\n      },\n    },\n\n    _active: {\n      bg: \\`\\${c}.700\\`,\n      transform: \"scale(1, 1)\",\n\n      _dark: {\n        bg: \\`\\${c}.400\\`,\n      }\n    },\n  }\n})\n\nexport const buttonTheme = defineStyleConfig({\n  baseStyle,\n  sizes,\n  variants: {\n    custom: customVariant,\n  },\n  defaultProps: {\n    colorScheme: \"purple\", // set the default color scheme to purple\n  },\n})`}});var z={};S(z,{default:()=>C,frontmatter:()=>B});var n=d(m()),i=d(p()),B={id:\"button\",scope:\"theming\"};function f(t){let e=Object.assign({p:\"p\",code:\"code\",blockquote:\"blockquote\",a:\"a\",h2:\"h2\",ul:\"ul\",li:\"li\",pre:\"pre\"},t.components),{SandpackEmbed:o}=e;return o||k(\"SandpackEmbed\",!0),(0,n.jsxs)(n.Fragment,{children:[(0,n.jsxs)(e.p,{children:[\"The \",(0,n.jsx)(e.code,{children:\"Button\"}),` component is a single part component. All of the styling is applied\ndirectly to the `,(0,n.jsx)(e.code,{children:\"button\"}),\" element.\"]}),`\n`,(0,n.jsxs)(e.blockquote,{children:[`\n`,(0,n.jsxs)(e.p,{children:[`To learn more about styling single part components, visit the\n`,(0,n.jsx)(e.a,{href:\"/docs/styled-system/component-style#styling-single-part-components\",children:\"Component Style\"}),`\npage.`]}),`\n`]}),`\n`,(0,n.jsx)(e.h2,{id:\"theming-properties\",children:\"Theming properties\"}),`\n`,(0,n.jsxs)(e.p,{children:[\"The properties that affect the theming of the \",(0,n.jsx)(e.code,{children:\"Button\"}),\" component are:\"]}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.code,{children:\"variant\"}),\": The visual variant of the button. Defaults to \",(0,n.jsx)(e.code,{children:\"solid\"}),\".\"]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.code,{children:\"colorScheme\"}),\": The color scheme of the button. Defaults to \",(0,n.jsx)(e.code,{children:\"gray\"}),\".\"]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.code,{children:\"size\"}),\": The size of the button. Defaults to \",(0,n.jsx)(e.code,{children:\"md\"}),\".\"]}),`\n`]}),`\n`,(0,n.jsx)(e.h2,{id:\"theming-utilities\",children:\"Theming utilities\"}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.code,{children:\"defineStyle\"}),\": a function used to create style objects.\"]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.code,{children:\"defineStyleConfig\"}),`: a function used to define the style configuration for a\nsingle part component.`]}),`\n`]}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-jsx\",live:\"false\",children:`import { defineStyle, defineStyleConfig } from '@incmix-ui/react'\n`})}),`\n`,(0,n.jsx)(e.h2,{id:\"customizing-the-default-theme\",children:\"Customizing the default theme\"}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-jsx\",live:\"false\",children:`import { defineStyle, defineStyleConfig } from '@incmix-ui/react'\n\nconst outline = defineStyle({\n  border: '2px dashed', // change the appearance of the border\n  borderRadius: 0, // remove the border radius\n  fontWeight: 'semibold', // change the font weight\n})\n\nexport const buttonTheme = defineStyleConfig({\n  variants: { outline },\n})\n`})}),`\n`,(0,n.jsxs)(e.p,{children:[`After customizing the button theme, we can import it in our theme file and add\nit in the `,(0,n.jsx)(e.code,{children:\"components\"}),\" property:\"]}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-jsx\",live:\"false\",children:`import { extendTheme } from '@incmix-ui/react'\nimport { buttonTheme } from './components/button.ts'\n\nexport const theme = extendTheme({\n  components: { Button: buttonTheme },\n})\n`})}),`\n`,(0,n.jsxs)(e.blockquote,{children:[`\n`,(0,n.jsx)(e.p,{children:`This is a crucial step to make sure that any changes that we make to the\nbutton theme are applied.`}),`\n`]}),`\n`,(0,n.jsx)(e.h2,{id:\"adding-a-custom-size\",children:\"Adding a custom size\"}),`\n`,(0,n.jsx)(e.p,{children:`Let's assume we want to include an extra large button size. Here's how we can do\nthat:`}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-jsx\",live:\"false\",children:`import { defineStyle, defineStyleConfig } from '@incmix-ui/react'\n\nconst xl = defineStyle({\n  fontSize: 'xl',\n  px: '6',\n  h: '16',\n  borderRadius: 'md',\n})\n\nexport const buttonTheme = defineStyleConfig({\n  sizes: { xl },\n})\n\n// Now we can use the new \\`xl\\` size\n<Button size=\"xl\">...</Button>\n`})}),`\n`,(0,n.jsxs)(e.p,{children:[`Every time you're adding anything new to the theme, you'd need to run the CLI\ncommand to get proper autocomplete in your IDE. You can learn more about the CLI\ntool `,(0,n.jsx)(e.a,{href:\"/docs/styled-system/cli\",children:\"here\"}),\".\"]}),`\n`,(0,n.jsx)(e.h2,{id:\"adding-a-custom-variant\",children:\"Adding a custom variant\"}),`\n`,(0,n.jsx)(e.p,{children:`Let's assume we want to include a custom branded variant. Here's how we can do\nthat:`}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-jsx\",live:\"false\",children:`import { defineStyle, defineStyleConfig } from '@incmix-ui/react'\n\nconst brandPrimary = defineStyle({\n  background: 'orange.500',\n  color: 'white',\n  fontFamily: 'serif',\n  fontWeight: 'normal',\n\n  // let's also provide dark mode alternatives\n  _dark: {\n    background: 'orange.300',\n    color: 'orange.800',\n  }\n})\n\nexport const buttonTheme = defineStyleConfig({\n  variants: { brandPrimary },\n})\n\n// Now we can use the new \\`brandPrimary\\` variant\n<Button variant=\"brandPrimary\">...</Button>\n`})}),`\n`,(0,n.jsx)(e.h2,{id:\"using-a-custom-color-scheme\",children:\"Using a custom color scheme\"}),`\n`,(0,n.jsx)(e.p,{children:`Let's assume we want to use our own custom color scale based on our brand. We'd\nneed to define the color scale first in the main theme file:`}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-jsx\",live:\"false\",children:`import { extendTheme } from '@incmix-ui/react'\n\nexport const theme = extendTheme({\n  colors: {\n    brand: {\n      50: '#f7fafc',\n      ...\n      500: '#718096',\n      ...\n      900: '#171923',\n    }\n  }\n})\n`})}),`\n`,(0,n.jsx)(e.p,{children:\"Then, we can use the custom color scale as the color scheme for the button:\"}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-jsx\",live:\"false\",children:`<Button colorScheme=\"brand\">...</Button>\n`})}),`\n`,(0,n.jsx)(e.h2,{id:\"changing-the-default-properties\",children:\"Changing the default properties\"}),`\n`,(0,n.jsx)(e.p,{children:`Let's assume we want to change the default size, variant or color scheme of\nevery button in our app. Here's how we can do that:`}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-jsx\",live:\"false\",children:`import { defineStyleConfig } from '@incmix-ui/react'\n\nexport const buttonTheme = defineStyleConfig({\n  defaultProps: {\n    size: 'lg',\n    variant: 'outline',\n    colorScheme: 'brand',\n  },\n})\n\n// This saves you time, instead of manually setting the size,\n// variant and color scheme every time you use a button:\n<Button size=\"lg\" variant=\"outline\" colorScheme=\"brand\">...</Button>\n`})}),`\n`,(0,n.jsx)(e.h2,{id:\"showcase\",children:\"Showcase\"}),`\n`,`\n`,(0,n.jsx)(o,{files:{\"/theme/components/Button.ts\":i.ButtonTheme,\"/App.tsx\":i.App,\"/index.tsx\":{code:i.Index,hidden:!0}},dependencies:{\"react-icons\":\"^4.4.0\"}})]})}function T(t={}){let{wrapper:e}=t.components||{};return e?(0,n.jsx)(e,Object.assign({},t,{children:(0,n.jsx)(f,t)})):f(t)}var C=T;function k(t,e){throw new Error(\"Expected \"+(e?\"component\":\"object\")+\" `\"+t+\"` to be defined: you likely forgot to import, pass, or provide it.\")}return w(z);})();\n;return Component;"
    },
    "_id": "docs/components/button/theming.mdx",
    "_raw": {
      "sourceFilePath": "docs/components/button/theming.mdx",
      "sourceFileName": "theming.mdx",
      "sourceFileDir": "docs/components/button",
      "contentType": "mdx",
      "flattenedPath": "docs/components/button/theming"
    },
    "type": "Doc",
    "slug": "/docs/components/button/theming",
    "frontMatter": {
      "slug": "/docs/components/button/theming",
      "editUrl": "https://github.com/incmix-ui/incmix-ui-docs/tree/main/content/docs/components/button/theming.mdx",
      "headings": [
        {
          "text": "Theming properties",
          "id": "theming-properties",
          "level": "h2"
        },
        {
          "text": "Theming utilities",
          "id": "theming-utilities",
          "level": "h2"
        },
        {
          "text": "Customizing the default theme",
          "id": "customizing-the-default-theme",
          "level": "h2"
        },
        {
          "text": "Adding a custom size",
          "id": "adding-a-custom-size",
          "level": "h2"
        },
        {
          "text": "Adding a custom variant",
          "id": "adding-a-custom-variant",
          "level": "h2"
        },
        {
          "text": "Using a custom color scheme",
          "id": "using-a-custom-color-scheme",
          "level": "h2"
        },
        {
          "text": "Changing the default properties",
          "id": "changing-the-default-properties",
          "level": "h2"
        },
        {
          "text": "Showcase",
          "id": "showcase",
          "level": "h2"
        }
      ]
    }
  },
  {
    "title": "Button",
    "package": "@incmix-ui/button",
    "description": "Button component is used to trigger an action or event, such as submitting a form, opening a Dialog, canceling an action, or performing a delete operation.",
    "id": "button",
    "scope": "usage",
    "category": "form",
    "body": {
      "raw": "\n## Import\n\n```js\nimport { Button, ButtonGroup } from '@incmix-ui/react'\n```\n\n- **Button:** The button component with support for custom icons, spinners, etc.\n- **ButtonGroup:** Used to group buttons whose actions are related, with an\n  option to flush them together.\n\n## Usage\n\n```jsx\n<Button colorScheme=\"blue\">Button</Button>\n```\n\n### Button Sizes\n\nUse the `size` prop to change the size of the button. You can set the value to\n`xs`, `sm`, `md`, or `lg`.\n\n```jsx\n<Stack spacing={4} direction=\"row\" align=\"center\">\n  <Button colorScheme=\"teal\" size=\"xs\">\n    Button\n  </Button>\n  <Button colorScheme=\"teal\" size=\"sm\">\n    Button\n  </Button>\n  <Button colorScheme=\"teal\" size=\"md\">\n    Button\n  </Button>\n  <Button colorScheme=\"teal\" size=\"lg\">\n    Button\n  </Button>\n</Stack>\n```\n\n### Button variants\n\nUse the `variant` prop to change the visual style of the Button. You can set the\nvalue to `solid`, `ghost`, `outline`, or `link`.\n\n```jsx\n<Stack direction=\"row\" spacing={4} align=\"center\">\n  <Button colorScheme=\"teal\" variant=\"solid\">\n    Button\n  </Button>\n  <Button colorScheme=\"teal\" variant=\"outline\">\n    Button\n  </Button>\n  <Button colorScheme=\"teal\" variant=\"ghost\">\n    Button\n  </Button>\n  <Button colorScheme=\"teal\" variant=\"link\">\n    Button\n  </Button>\n</Stack>\n```\n\n### Button Colors\n\nUse the colorScheme prop to change the color scheme of the Button. You can set\nthe value to any of the color scales from your design system, like `whiteAlpha`,\n`blackAlpha`, `gray`, `red`, `blue`, or your custom color scale.\n\n```jsx\n<Stack direction=\"column\">\n  <Box\n    display=\"flex\"\n    alignItems=\"center\"\n    justifyContent=\"center\"\n    width=\"100%\"\n    py={12}\n    bgImage=\"url('https://bit.ly/2Z4KKcF')\"\n    bgPosition=\"center\"\n    bgRepeat=\"no-repeat\"\n    mb={2}\n  >\n    <ButtonGroup gap=\"4\">\n      <Button colorScheme=\"whiteAlpha\">WhiteAlpha</Button>\n      <Button colorScheme=\"blackAlpha\">BlackAlpha</Button>\n    </ButtonGroup>\n  </Box>\n\n  <Wrap spacing={4}>\n    <WrapItem>\n      <Button colorScheme=\"gray\">Gray</Button>\n    </WrapItem>\n    <WrapItem>\n      <Button colorScheme=\"red\">Red</Button>\n    </WrapItem>\n    <WrapItem>\n      <Button colorScheme=\"orange\">Orange</Button>\n    </WrapItem>\n    <WrapItem>\n      <Button colorScheme=\"yellow\">Yellow</Button>\n    </WrapItem>\n    <WrapItem>\n      <Button colorScheme=\"green\">Green</Button>\n    </WrapItem>\n    <WrapItem>\n      <Button colorScheme=\"teal\">Teal</Button>\n    </WrapItem>\n    <WrapItem>\n      <Button colorScheme=\"blue\">Blue</Button>\n    </WrapItem>\n    <WrapItem>\n      <Button colorScheme=\"cyan\">Cyan</Button>\n    </WrapItem>\n    <WrapItem>\n      <Button colorScheme=\"purple\">Purple</Button>\n    </WrapItem>\n    <WrapItem>\n      <Button colorScheme=\"pink\">Pink</Button>\n    </WrapItem>\n    <WrapItem>\n      <Button colorScheme=\"linkedin\">Linkedin</Button>\n    </WrapItem>\n    <WrapItem>\n      <Button colorScheme=\"facebook\">Facebook</Button>\n    </WrapItem>\n    <WrapItem>\n      <Button colorScheme=\"messenger\">Messenger</Button>\n    </WrapItem>\n    <WrapItem>\n      <Button colorScheme=\"whatsapp\">Whatsapp</Button>\n    </WrapItem>\n    <WrapItem>\n      <Button colorScheme=\"twitter\">Twitter</Button>\n    </WrapItem>\n    <WrapItem>\n      <Button colorScheme=\"telegram\">Telegram</Button>\n    </WrapItem>\n  </Wrap>\n</Stack>\n```\n\n### Button with icon\n\nYou can add left and right icons to the Button component using the `leftIcon`\nand `rightIcon` props respectively.\n\n> Note: The `leftIcon` and `rightIcon` prop values should be react elements NOT\n> strings.\n\n```jsx\n<Stack direction=\"row\" spacing={4}>\n  <Button leftIcon={<EmailIcon />} colorScheme=\"teal\" variant=\"solid\">\n    Email\n  </Button>\n  <Button rightIcon={<ArrowForwardIcon />} colorScheme=\"teal\" variant=\"outline\">\n    Call us\n  </Button>\n</Stack>\n```\n\nYou can also use icons from popular libraries like\n[react-icons](https://react-icons.github.io/react-icons/) and pass it into the\nbutton.\n\n```jsx\n// import { MdBuild , MdCall } from \"react-icons/md\"\n\n<Stack direction=\"row\" spacing={4}>\n  <Button leftIcon={<MdBuild />} colorScheme=\"pink\" variant=\"solid\">\n    Settings\n  </Button>\n  <Button rightIcon={<MdCall />} colorScheme=\"blue\" variant=\"outline\">\n    Call us\n  </Button>\n</Stack>\n```\n\n### Button loading state\n\nPass the `isLoading` prop to show its loading state. By default, the button will\nshow a spinner and leave the button's width unchanged.\n\nYou can also pass the `loadingText` prop to show a spinner and the loading text.\n\n```jsx\n<Stack direction=\"row\" spacing={4}>\n  <Button isLoading colorScheme=\"teal\" variant=\"solid\">\n    Email\n  </Button>\n  <Button isLoading loadingText=\"Submitting\" colorScheme=\"teal\" variant=\"outline\">\n    Submit\n  </Button>\n</Stack>\n```\n\nYou can change the spinner element to use custom loaders as per your design\nrequirements. Pass the `spinner` prop and set it to a custom react element.\n\n```jsx\n<Button isLoading colorScheme=\"blue\" spinner={<BeatLoader size={8} color=\"white\" />}>\n  Click me\n</Button>\n```\n\nWhen a `loadingText` is present, you can change the placement of the spinner\nelement to either `start` or `end`. It is `start` by default.\n\n```jsx\n<Stack direction=\"row\" spacing={4} align=\"center\">\n  <Button isLoading loadingText=\"Loading\" colorScheme=\"teal\" variant=\"outline\" spinnerPlacement=\"start\">\n    Submit\n  </Button>\n  <Button isLoading loadingText=\"Loading\" colorScheme=\"teal\" variant=\"outline\" spinnerPlacement=\"end\">\n    Continue\n  </Button>\n</Stack>\n```\n\n### Social Buttons\n\nWe've included the colors for common social media platforms, and you can simply\nuse their buttons via the `colorScheme` prop.\n\n```jsx\n<HStack>\n  <Button colorScheme=\"facebook\" leftIcon={<FaFacebook />}>\n    Facebook\n  </Button>\n  <Button colorScheme=\"twitter\" leftIcon={<FaTwitter />}>\n    Twitter\n  </Button>\n</HStack>\n```\n\nThe Facebook and Twitter icons in the above example are available from\n[`react-icons`](https://react-icons.netlify.com/#/) as `FaFacebook` and\n`FaTwitter`, found in the `react-icons/fa` import.\n\n### Grouping Buttons\n\nYou can use the `Stack` or `ButtonGroup` component to group buttons. When you\nuse the `ButtonGroup` component, it allows you to:\n\n- Set the `size` and `variant` of all buttons within it.\n- Add `spacing` between the buttons.\n- Flush the buttons together by removing the border radius of their children as\n  needed.\n\n```jsx\n<ButtonGroup variant=\"outline\" spacing=\"6\">\n  <Button colorScheme=\"blue\">Save</Button>\n  <Button>Cancel</Button>\n</ButtonGroup>\n```\n\nTo flush the buttons, pass the `isAttached` prop.\n\n```jsx\n<ButtonGroup size=\"sm\" isAttached variant=\"outline\">\n  <Button>Save</Button>\n  <IconButton aria-label=\"Add to friends\" icon={<AddIcon />} />\n</ButtonGroup>\n```\n\n## Accessibility\n\n- Button has `role` of `button`.\n- When Button has focus, <kbd>Space</kbd> or <kbd>Enter</kbd> activates it.\n\n## Composition\n\nAll props you pass (`variant`, `colorScheme`, etc.) are converted to style\nprops. This means you can override any style of the Button via props.\n\n```jsx\n// The size prop affects the height of the button\n// It can still be overridden by passing a custom height\n<Button size=\"md\" height=\"48px\" width=\"200px\" border=\"2px\" borderColor=\"green.500\">\n  Button\n</Button>\n```\n\n---\n\n## Custom Button\n\nIn the event that you need to make your own custom button, you can leverage the\n`Box` component. It provides the `hover`, `focus`, `active` and `disabled` style\nprops to style the button.\n\n```jsx\n// Button from facebook.com\n<Box\n  as=\"button\"\n  height=\"24px\"\n  lineHeight=\"1.2\"\n  transition=\"all 0.2s cubic-bezier(.08,.52,.52,1)\"\n  border=\"1px\"\n  px=\"8px\"\n  borderRadius=\"2px\"\n  fontSize=\"14px\"\n  fontWeight=\"semibold\"\n  bg=\"#f5f6f7\"\n  borderColor=\"#ccd0d5\"\n  color=\"#4b4f56\"\n  _hover={{ bg: '#ebedf0' }}\n  _active={{\n    bg: '#dddfe2',\n    transform: 'scale(0.98)',\n    borderColor: '#bec3c9',\n  }}\n  _focus={{\n    boxShadow: '0 0 1px 2px rgba(88, 144, 255, .75), 0 1px 1px rgba(0, 0, 0, .15)',\n  }}\n>\n  Join Group\n</Box>\n```\n",
      "code": "var Component=(()=>{var s=Object.create;var r=Object.defineProperty;var u=Object.getOwnPropertyDescriptor;var p=Object.getOwnPropertyNames;var m=Object.getPrototypeOf,g=Object.prototype.hasOwnProperty;var B=(t,n)=>()=>(n||t((n={exports:{}}).exports,n),n.exports),b=(t,n)=>{for(var o in n)r(t,o,{get:n[o],enumerable:!0})},a=(t,n,o,i)=>{if(n&&typeof n==\"object\"||typeof n==\"function\")for(let c of p(n))!g.call(t,c)&&c!==o&&r(t,c,{get:()=>n[c],enumerable:!(i=u(n,c))||i.enumerable});return t};var S=(t,n,o)=>(o=t!=null?s(m(t)):{},a(n||!t||!t.__esModule?r(o,\"default\",{value:t,enumerable:!0}):o,t)),f=t=>a(r({},\"__esModule\",{value:!0}),t);var d=B((W,l)=>{l.exports=_jsx_runtime});var k={};b(k,{default:()=>v,frontmatter:()=>x});var e=S(d()),x={id:\"button\",category:\"form\",title:\"Button\",package:\"@incmix-ui/button\",description:\"Button component is used to trigger an action or event, such as submitting a form, opening a Dialog, canceling an action, or performing a delete operation.\"};function h(t){let n=Object.assign({h2:\"h2\",pre:\"pre\",code:\"code\",ul:\"ul\",li:\"li\",strong:\"strong\",h3:\"h3\",p:\"p\",blockquote:\"blockquote\",a:\"a\",hr:\"hr\"},t.components);return(0,e.jsxs)(e.Fragment,{children:[(0,e.jsx)(n.h2,{id:\"import\",children:\"Import\"}),`\n`,(0,e.jsx)(n.pre,{children:(0,e.jsx)(n.code,{className:\"language-js\",children:`import { Button, ButtonGroup } from '@incmix-ui/react'\n`})}),`\n`,(0,e.jsxs)(n.ul,{children:[`\n`,(0,e.jsxs)(n.li,{children:[(0,e.jsx)(n.strong,{children:\"Button:\"}),\" The button component with support for custom icons, spinners, etc.\"]}),`\n`,(0,e.jsxs)(n.li,{children:[(0,e.jsx)(n.strong,{children:\"ButtonGroup:\"}),` Used to group buttons whose actions are related, with an\noption to flush them together.`]}),`\n`]}),`\n`,(0,e.jsx)(n.h2,{id:\"usage\",children:\"Usage\"}),`\n`,(0,e.jsx)(n.pre,{children:(0,e.jsx)(n.code,{className:\"language-jsx\",children:`<Button colorScheme=\"blue\">Button</Button>\n`})}),`\n`,(0,e.jsx)(n.h3,{id:\"button-sizes\",children:\"Button Sizes\"}),`\n`,(0,e.jsxs)(n.p,{children:[\"Use the \",(0,e.jsx)(n.code,{children:\"size\"}),` prop to change the size of the button. You can set the value to\n`,(0,e.jsx)(n.code,{children:\"xs\"}),\", \",(0,e.jsx)(n.code,{children:\"sm\"}),\", \",(0,e.jsx)(n.code,{children:\"md\"}),\", or \",(0,e.jsx)(n.code,{children:\"lg\"}),\".\"]}),`\n`,(0,e.jsx)(n.pre,{children:(0,e.jsx)(n.code,{className:\"language-jsx\",children:`<Stack spacing={4} direction=\"row\" align=\"center\">\n  <Button colorScheme=\"teal\" size=\"xs\">\n    Button\n  </Button>\n  <Button colorScheme=\"teal\" size=\"sm\">\n    Button\n  </Button>\n  <Button colorScheme=\"teal\" size=\"md\">\n    Button\n  </Button>\n  <Button colorScheme=\"teal\" size=\"lg\">\n    Button\n  </Button>\n</Stack>\n`})}),`\n`,(0,e.jsx)(n.h3,{id:\"button-variants\",children:\"Button variants\"}),`\n`,(0,e.jsxs)(n.p,{children:[\"Use the \",(0,e.jsx)(n.code,{children:\"variant\"}),` prop to change the visual style of the Button. You can set the\nvalue to `,(0,e.jsx)(n.code,{children:\"solid\"}),\", \",(0,e.jsx)(n.code,{children:\"ghost\"}),\", \",(0,e.jsx)(n.code,{children:\"outline\"}),\", or \",(0,e.jsx)(n.code,{children:\"link\"}),\".\"]}),`\n`,(0,e.jsx)(n.pre,{children:(0,e.jsx)(n.code,{className:\"language-jsx\",children:`<Stack direction=\"row\" spacing={4} align=\"center\">\n  <Button colorScheme=\"teal\" variant=\"solid\">\n    Button\n  </Button>\n  <Button colorScheme=\"teal\" variant=\"outline\">\n    Button\n  </Button>\n  <Button colorScheme=\"teal\" variant=\"ghost\">\n    Button\n  </Button>\n  <Button colorScheme=\"teal\" variant=\"link\">\n    Button\n  </Button>\n</Stack>\n`})}),`\n`,(0,e.jsx)(n.h3,{id:\"button-colors\",children:\"Button Colors\"}),`\n`,(0,e.jsxs)(n.p,{children:[`Use the colorScheme prop to change the color scheme of the Button. You can set\nthe value to any of the color scales from your design system, like `,(0,e.jsx)(n.code,{children:\"whiteAlpha\"}),`,\n`,(0,e.jsx)(n.code,{children:\"blackAlpha\"}),\", \",(0,e.jsx)(n.code,{children:\"gray\"}),\", \",(0,e.jsx)(n.code,{children:\"red\"}),\", \",(0,e.jsx)(n.code,{children:\"blue\"}),\", or your custom color scale.\"]}),`\n`,(0,e.jsx)(n.pre,{children:(0,e.jsx)(n.code,{className:\"language-jsx\",children:`<Stack direction=\"column\">\n  <Box\n    display=\"flex\"\n    alignItems=\"center\"\n    justifyContent=\"center\"\n    width=\"100%\"\n    py={12}\n    bgImage=\"url('https://bit.ly/2Z4KKcF')\"\n    bgPosition=\"center\"\n    bgRepeat=\"no-repeat\"\n    mb={2}\n  >\n    <ButtonGroup gap=\"4\">\n      <Button colorScheme=\"whiteAlpha\">WhiteAlpha</Button>\n      <Button colorScheme=\"blackAlpha\">BlackAlpha</Button>\n    </ButtonGroup>\n  </Box>\n\n  <Wrap spacing={4}>\n    <WrapItem>\n      <Button colorScheme=\"gray\">Gray</Button>\n    </WrapItem>\n    <WrapItem>\n      <Button colorScheme=\"red\">Red</Button>\n    </WrapItem>\n    <WrapItem>\n      <Button colorScheme=\"orange\">Orange</Button>\n    </WrapItem>\n    <WrapItem>\n      <Button colorScheme=\"yellow\">Yellow</Button>\n    </WrapItem>\n    <WrapItem>\n      <Button colorScheme=\"green\">Green</Button>\n    </WrapItem>\n    <WrapItem>\n      <Button colorScheme=\"teal\">Teal</Button>\n    </WrapItem>\n    <WrapItem>\n      <Button colorScheme=\"blue\">Blue</Button>\n    </WrapItem>\n    <WrapItem>\n      <Button colorScheme=\"cyan\">Cyan</Button>\n    </WrapItem>\n    <WrapItem>\n      <Button colorScheme=\"purple\">Purple</Button>\n    </WrapItem>\n    <WrapItem>\n      <Button colorScheme=\"pink\">Pink</Button>\n    </WrapItem>\n    <WrapItem>\n      <Button colorScheme=\"linkedin\">Linkedin</Button>\n    </WrapItem>\n    <WrapItem>\n      <Button colorScheme=\"facebook\">Facebook</Button>\n    </WrapItem>\n    <WrapItem>\n      <Button colorScheme=\"messenger\">Messenger</Button>\n    </WrapItem>\n    <WrapItem>\n      <Button colorScheme=\"whatsapp\">Whatsapp</Button>\n    </WrapItem>\n    <WrapItem>\n      <Button colorScheme=\"twitter\">Twitter</Button>\n    </WrapItem>\n    <WrapItem>\n      <Button colorScheme=\"telegram\">Telegram</Button>\n    </WrapItem>\n  </Wrap>\n</Stack>\n`})}),`\n`,(0,e.jsx)(n.h3,{id:\"button-with-icon\",children:\"Button with icon\"}),`\n`,(0,e.jsxs)(n.p,{children:[\"You can add left and right icons to the Button component using the \",(0,e.jsx)(n.code,{children:\"leftIcon\"}),`\nand `,(0,e.jsx)(n.code,{children:\"rightIcon\"}),\" props respectively.\"]}),`\n`,(0,e.jsxs)(n.blockquote,{children:[`\n`,(0,e.jsxs)(n.p,{children:[\"Note: The \",(0,e.jsx)(n.code,{children:\"leftIcon\"}),\" and \",(0,e.jsx)(n.code,{children:\"rightIcon\"}),` prop values should be react elements NOT\nstrings.`]}),`\n`]}),`\n`,(0,e.jsx)(n.pre,{children:(0,e.jsx)(n.code,{className:\"language-jsx\",children:`<Stack direction=\"row\" spacing={4}>\n  <Button leftIcon={<EmailIcon />} colorScheme=\"teal\" variant=\"solid\">\n    Email\n  </Button>\n  <Button rightIcon={<ArrowForwardIcon />} colorScheme=\"teal\" variant=\"outline\">\n    Call us\n  </Button>\n</Stack>\n`})}),`\n`,(0,e.jsxs)(n.p,{children:[`You can also use icons from popular libraries like\n`,(0,e.jsx)(n.a,{href:\"https://react-icons.github.io/react-icons/\",children:\"react-icons\"}),` and pass it into the\nbutton.`]}),`\n`,(0,e.jsx)(n.pre,{children:(0,e.jsx)(n.code,{className:\"language-jsx\",children:`// import { MdBuild , MdCall } from \"react-icons/md\"\n\n<Stack direction=\"row\" spacing={4}>\n  <Button leftIcon={<MdBuild />} colorScheme=\"pink\" variant=\"solid\">\n    Settings\n  </Button>\n  <Button rightIcon={<MdCall />} colorScheme=\"blue\" variant=\"outline\">\n    Call us\n  </Button>\n</Stack>\n`})}),`\n`,(0,e.jsx)(n.h3,{id:\"button-loading-state\",children:\"Button loading state\"}),`\n`,(0,e.jsxs)(n.p,{children:[\"Pass the \",(0,e.jsx)(n.code,{children:\"isLoading\"}),` prop to show its loading state. By default, the button will\nshow a spinner and leave the button's width unchanged.`]}),`\n`,(0,e.jsxs)(n.p,{children:[\"You can also pass the \",(0,e.jsx)(n.code,{children:\"loadingText\"}),\" prop to show a spinner and the loading text.\"]}),`\n`,(0,e.jsx)(n.pre,{children:(0,e.jsx)(n.code,{className:\"language-jsx\",children:`<Stack direction=\"row\" spacing={4}>\n  <Button isLoading colorScheme=\"teal\" variant=\"solid\">\n    Email\n  </Button>\n  <Button isLoading loadingText=\"Submitting\" colorScheme=\"teal\" variant=\"outline\">\n    Submit\n  </Button>\n</Stack>\n`})}),`\n`,(0,e.jsxs)(n.p,{children:[`You can change the spinner element to use custom loaders as per your design\nrequirements. Pass the `,(0,e.jsx)(n.code,{children:\"spinner\"}),\" prop and set it to a custom react element.\"]}),`\n`,(0,e.jsx)(n.pre,{children:(0,e.jsx)(n.code,{className:\"language-jsx\",children:`<Button isLoading colorScheme=\"blue\" spinner={<BeatLoader size={8} color=\"white\" />}>\n  Click me\n</Button>\n`})}),`\n`,(0,e.jsxs)(n.p,{children:[\"When a \",(0,e.jsx)(n.code,{children:\"loadingText\"}),` is present, you can change the placement of the spinner\nelement to either `,(0,e.jsx)(n.code,{children:\"start\"}),\" or \",(0,e.jsx)(n.code,{children:\"end\"}),\". It is \",(0,e.jsx)(n.code,{children:\"start\"}),\" by default.\"]}),`\n`,(0,e.jsx)(n.pre,{children:(0,e.jsx)(n.code,{className:\"language-jsx\",children:`<Stack direction=\"row\" spacing={4} align=\"center\">\n  <Button isLoading loadingText=\"Loading\" colorScheme=\"teal\" variant=\"outline\" spinnerPlacement=\"start\">\n    Submit\n  </Button>\n  <Button isLoading loadingText=\"Loading\" colorScheme=\"teal\" variant=\"outline\" spinnerPlacement=\"end\">\n    Continue\n  </Button>\n</Stack>\n`})}),`\n`,(0,e.jsx)(n.h3,{id:\"social-buttons\",children:\"Social Buttons\"}),`\n`,(0,e.jsxs)(n.p,{children:[`We've included the colors for common social media platforms, and you can simply\nuse their buttons via the `,(0,e.jsx)(n.code,{children:\"colorScheme\"}),\" prop.\"]}),`\n`,(0,e.jsx)(n.pre,{children:(0,e.jsx)(n.code,{className:\"language-jsx\",children:`<HStack>\n  <Button colorScheme=\"facebook\" leftIcon={<FaFacebook />}>\n    Facebook\n  </Button>\n  <Button colorScheme=\"twitter\" leftIcon={<FaTwitter />}>\n    Twitter\n  </Button>\n</HStack>\n`})}),`\n`,(0,e.jsxs)(n.p,{children:[`The Facebook and Twitter icons in the above example are available from\n`,(0,e.jsx)(n.a,{href:\"https://react-icons.netlify.com/#/\",children:(0,e.jsx)(n.code,{children:\"react-icons\"})}),\" as \",(0,e.jsx)(n.code,{children:\"FaFacebook\"}),` and\n`,(0,e.jsx)(n.code,{children:\"FaTwitter\"}),\", found in the \",(0,e.jsx)(n.code,{children:\"react-icons/fa\"}),\" import.\"]}),`\n`,(0,e.jsx)(n.h3,{id:\"grouping-buttons\",children:\"Grouping Buttons\"}),`\n`,(0,e.jsxs)(n.p,{children:[\"You can use the \",(0,e.jsx)(n.code,{children:\"Stack\"}),\" or \",(0,e.jsx)(n.code,{children:\"ButtonGroup\"}),` component to group buttons. When you\nuse the `,(0,e.jsx)(n.code,{children:\"ButtonGroup\"}),\" component, it allows you to:\"]}),`\n`,(0,e.jsxs)(n.ul,{children:[`\n`,(0,e.jsxs)(n.li,{children:[\"Set the \",(0,e.jsx)(n.code,{children:\"size\"}),\" and \",(0,e.jsx)(n.code,{children:\"variant\"}),\" of all buttons within it.\"]}),`\n`,(0,e.jsxs)(n.li,{children:[\"Add \",(0,e.jsx)(n.code,{children:\"spacing\"}),\" between the buttons.\"]}),`\n`,(0,e.jsx)(n.li,{children:`Flush the buttons together by removing the border radius of their children as\nneeded.`}),`\n`]}),`\n`,(0,e.jsx)(n.pre,{children:(0,e.jsx)(n.code,{className:\"language-jsx\",children:`<ButtonGroup variant=\"outline\" spacing=\"6\">\n  <Button colorScheme=\"blue\">Save</Button>\n  <Button>Cancel</Button>\n</ButtonGroup>\n`})}),`\n`,(0,e.jsxs)(n.p,{children:[\"To flush the buttons, pass the \",(0,e.jsx)(n.code,{children:\"isAttached\"}),\" prop.\"]}),`\n`,(0,e.jsx)(n.pre,{children:(0,e.jsx)(n.code,{className:\"language-jsx\",children:`<ButtonGroup size=\"sm\" isAttached variant=\"outline\">\n  <Button>Save</Button>\n  <IconButton aria-label=\"Add to friends\" icon={<AddIcon />} />\n</ButtonGroup>\n`})}),`\n`,(0,e.jsx)(n.h2,{id:\"accessibility\",children:\"Accessibility\"}),`\n`,(0,e.jsxs)(n.ul,{children:[`\n`,(0,e.jsxs)(n.li,{children:[\"Button has \",(0,e.jsx)(n.code,{children:\"role\"}),\" of \",(0,e.jsx)(n.code,{children:\"button\"}),\".\"]}),`\n`,(0,e.jsxs)(n.li,{children:[\"When Button has focus, \",(0,e.jsx)(\"kbd\",{children:\"Space\"}),\" or \",(0,e.jsx)(\"kbd\",{children:\"Enter\"}),\" activates it.\"]}),`\n`]}),`\n`,(0,e.jsx)(n.h2,{id:\"composition\",children:\"Composition\"}),`\n`,(0,e.jsxs)(n.p,{children:[\"All props you pass (\",(0,e.jsx)(n.code,{children:\"variant\"}),\", \",(0,e.jsx)(n.code,{children:\"colorScheme\"}),`, etc.) are converted to style\nprops. This means you can override any style of the Button via props.`]}),`\n`,(0,e.jsx)(n.pre,{children:(0,e.jsx)(n.code,{className:\"language-jsx\",children:`// The size prop affects the height of the button\n// It can still be overridden by passing a custom height\n<Button size=\"md\" height=\"48px\" width=\"200px\" border=\"2px\" borderColor=\"green.500\">\n  Button\n</Button>\n`})}),`\n`,(0,e.jsx)(n.hr,{}),`\n`,(0,e.jsx)(n.h2,{id:\"custom-button\",children:\"Custom Button\"}),`\n`,(0,e.jsxs)(n.p,{children:[`In the event that you need to make your own custom button, you can leverage the\n`,(0,e.jsx)(n.code,{children:\"Box\"}),\" component. It provides the \",(0,e.jsx)(n.code,{children:\"hover\"}),\", \",(0,e.jsx)(n.code,{children:\"focus\"}),\", \",(0,e.jsx)(n.code,{children:\"active\"}),\" and \",(0,e.jsx)(n.code,{children:\"disabled\"}),` style\nprops to style the button.`]}),`\n`,(0,e.jsx)(n.pre,{children:(0,e.jsx)(n.code,{className:\"language-jsx\",children:`// Button from facebook.com\n<Box\n  as=\"button\"\n  height=\"24px\"\n  lineHeight=\"1.2\"\n  transition=\"all 0.2s cubic-bezier(.08,.52,.52,1)\"\n  border=\"1px\"\n  px=\"8px\"\n  borderRadius=\"2px\"\n  fontSize=\"14px\"\n  fontWeight=\"semibold\"\n  bg=\"#f5f6f7\"\n  borderColor=\"#ccd0d5\"\n  color=\"#4b4f56\"\n  _hover={{ bg: '#ebedf0' }}\n  _active={{\n    bg: '#dddfe2',\n    transform: 'scale(0.98)',\n    borderColor: '#bec3c9',\n  }}\n  _focus={{\n    boxShadow: '0 0 1px 2px rgba(88, 144, 255, .75), 0 1px 1px rgba(0, 0, 0, .15)',\n  }}\n>\n  Join Group\n</Box>\n`})})]})}function I(t={}){let{wrapper:n}=t.components||{};return n?(0,e.jsx)(n,Object.assign({},t,{children:(0,e.jsx)(h,t)})):h(t)}var v=I;return f(k);})();\n;return Component;"
    },
    "_id": "docs/components/button/usage.mdx",
    "_raw": {
      "sourceFilePath": "docs/components/button/usage.mdx",
      "sourceFileName": "usage.mdx",
      "sourceFileDir": "docs/components/button",
      "contentType": "mdx",
      "flattenedPath": "docs/components/button/usage"
    },
    "type": "Doc",
    "slug": "/docs/components/button/usage",
    "frontMatter": {
      "title": "Button",
      "package": "@incmix-ui/button",
      "description": "Button component is used to trigger an action or event, such as submitting a form, opening a Dialog, canceling an action, or performing a delete operation.",
      "slug": "/docs/components/button/usage",
      "editUrl": "https://github.com/incmix-ui/incmix-ui-docs/tree/main/content/docs/components/button/usage.mdx",
      "headings": [
        {
          "text": "Import",
          "id": "import",
          "level": "h2"
        },
        {
          "text": "Usage",
          "id": "usage",
          "level": "h2"
        },
        {
          "text": "Button Sizes",
          "id": "button-sizes",
          "level": "h3"
        },
        {
          "text": "Button variants",
          "id": "button-variants",
          "level": "h3"
        },
        {
          "text": "Button Colors",
          "id": "button-colors",
          "level": "h3"
        },
        {
          "text": "Button with icon",
          "id": "button-with-icon",
          "level": "h3"
        },
        {
          "text": "Button loading state",
          "id": "button-loading-state",
          "level": "h3"
        },
        {
          "text": "Social Buttons",
          "id": "social-buttons",
          "level": "h3"
        },
        {
          "text": "Grouping Buttons",
          "id": "grouping-buttons",
          "level": "h3"
        },
        {
          "text": "Accessibility",
          "id": "accessibility",
          "level": "h2"
        },
        {
          "text": "Composition",
          "id": "composition",
          "level": "h2"
        },
        {
          "text": "Custom Button",
          "id": "custom-button",
          "level": "h2"
        }
      ]
    }
  },
  {
    "id": "icon",
    "scope": "props",
    "body": {
      "raw": "\n## Props\n\n### `Icon` props\n\n| Name        | Type                  | Default        | Description                                                                          |\n| ----------- | --------------------- | -------------- | ------------------------------------------------------------------------------------ |\n| `viewBox`   | `string`              | `0 0 24 24`    | The viewBox of the icon.                                                             |\n| `boxSize`   | `string`              | `1em`          | The size (width and height) of the icon.                                             |\n| `color`     | `string`              | `currentColor` | The color of the icon.                                                               |\n| `focusable` | `boolean`             | `false`        | Denotes that the icon is not an interactive element, and only used for presentation. |\n| `role`      | `presentation`, `img` |                | The html role of the icon.                                                           |\n| `children`  | `React.ReactNode`     |                | The Path or Group of the icon                                                        |\n\n## `createIcon` options\n\n<PropsTable of=\"createIcon\" />\n",
      "code": "var Component=(()=>{var a=Object.create;var r=Object.defineProperty;var p=Object.getOwnPropertyDescriptor;var f=Object.getOwnPropertyNames;var m=Object.getPrototypeOf,b=Object.prototype.hasOwnProperty;var u=(n,e)=>()=>(e||n((e={exports:{}}).exports,e),e.exports),x=(n,e)=>{for(var t in e)r(n,t,{get:e[t],enumerable:!0})},i=(n,e,t,o)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let c of f(e))!b.call(n,c)&&c!==t&&r(n,c,{get:()=>e[c],enumerable:!(o=p(e,c))||o.enumerable});return n};var g=(n,e,t)=>(t=n!=null?a(m(n)):{},i(e||!n||!n.__esModule?r(t,\"default\",{value:n,enumerable:!0}):t,n)),j=n=>i(r({},\"__esModule\",{value:!0}),n);var l=u((M,h)=>{h.exports=_jsx_runtime});var D={};x(D,{default:()=>_,frontmatter:()=>y});var d=g(l()),y={id:\"icon\",scope:\"props\"};function s(n){let e=Object.assign({h2:\"h2\",h3:\"h3\",code:\"code\",table:\"table\",thead:\"thead\",tr:\"tr\",th:\"th\",tbody:\"tbody\",td:\"td\"},n.components),{PropsTable:t}=e;return t||w(\"PropsTable\",!0),(0,d.jsxs)(d.Fragment,{children:[(0,d.jsx)(e.h2,{id:\"props\",children:\"Props\"}),`\n`,(0,d.jsxs)(e.h3,{id:\"icon-props\",children:[(0,d.jsx)(e.code,{children:\"Icon\"}),\" props\"]}),`\n`,(0,d.jsxs)(e.table,{children:[(0,d.jsx)(e.thead,{children:(0,d.jsxs)(e.tr,{children:[(0,d.jsx)(e.th,{children:\"Name\"}),(0,d.jsx)(e.th,{children:\"Type\"}),(0,d.jsx)(e.th,{children:\"Default\"}),(0,d.jsx)(e.th,{children:\"Description\"})]})}),(0,d.jsxs)(e.tbody,{children:[(0,d.jsxs)(e.tr,{children:[(0,d.jsx)(e.td,{children:(0,d.jsx)(e.code,{children:\"viewBox\"})}),(0,d.jsx)(e.td,{children:(0,d.jsx)(e.code,{children:\"string\"})}),(0,d.jsx)(e.td,{children:(0,d.jsx)(e.code,{children:\"0 0 24 24\"})}),(0,d.jsx)(e.td,{children:\"The viewBox of the icon.\"})]}),(0,d.jsxs)(e.tr,{children:[(0,d.jsx)(e.td,{children:(0,d.jsx)(e.code,{children:\"boxSize\"})}),(0,d.jsx)(e.td,{children:(0,d.jsx)(e.code,{children:\"string\"})}),(0,d.jsx)(e.td,{children:(0,d.jsx)(e.code,{children:\"1em\"})}),(0,d.jsx)(e.td,{children:\"The size (width and height) of the icon.\"})]}),(0,d.jsxs)(e.tr,{children:[(0,d.jsx)(e.td,{children:(0,d.jsx)(e.code,{children:\"color\"})}),(0,d.jsx)(e.td,{children:(0,d.jsx)(e.code,{children:\"string\"})}),(0,d.jsx)(e.td,{children:(0,d.jsx)(e.code,{children:\"currentColor\"})}),(0,d.jsx)(e.td,{children:\"The color of the icon.\"})]}),(0,d.jsxs)(e.tr,{children:[(0,d.jsx)(e.td,{children:(0,d.jsx)(e.code,{children:\"focusable\"})}),(0,d.jsx)(e.td,{children:(0,d.jsx)(e.code,{children:\"boolean\"})}),(0,d.jsx)(e.td,{children:(0,d.jsx)(e.code,{children:\"false\"})}),(0,d.jsx)(e.td,{children:\"Denotes that the icon is not an interactive element, and only used for presentation.\"})]}),(0,d.jsxs)(e.tr,{children:[(0,d.jsx)(e.td,{children:(0,d.jsx)(e.code,{children:\"role\"})}),(0,d.jsxs)(e.td,{children:[(0,d.jsx)(e.code,{children:\"presentation\"}),\", \",(0,d.jsx)(e.code,{children:\"img\"})]}),(0,d.jsx)(e.td,{}),(0,d.jsx)(e.td,{children:\"The html role of the icon.\"})]}),(0,d.jsxs)(e.tr,{children:[(0,d.jsx)(e.td,{children:(0,d.jsx)(e.code,{children:\"children\"})}),(0,d.jsx)(e.td,{children:(0,d.jsx)(e.code,{children:\"React.ReactNode\"})}),(0,d.jsx)(e.td,{}),(0,d.jsx)(e.td,{children:\"The Path or Group of the icon\"})]})]})]}),`\n`,(0,d.jsxs)(e.h2,{id:\"createicon-options\",children:[(0,d.jsx)(e.code,{children:\"createIcon\"}),\" options\"]}),`\n`,(0,d.jsx)(t,{of:\"createIcon\"})]})}function T(n={}){let{wrapper:e}=n.components||{};return e?(0,d.jsx)(e,Object.assign({},n,{children:(0,d.jsx)(s,n)})):s(n)}var _=T;function w(n,e){throw new Error(\"Expected \"+(e?\"component\":\"object\")+\" `\"+n+\"` to be defined: you likely forgot to import, pass, or provide it.\")}return j(D);})();\n;return Component;"
    },
    "_id": "docs/components/icon/props.mdx",
    "_raw": {
      "sourceFilePath": "docs/components/icon/props.mdx",
      "sourceFileName": "props.mdx",
      "sourceFileDir": "docs/components/icon",
      "contentType": "mdx",
      "flattenedPath": "docs/components/icon/props"
    },
    "type": "Doc",
    "slug": "/docs/components/icon/props",
    "frontMatter": {
      "slug": "/docs/components/icon/props",
      "editUrl": "https://github.com/incmix-ui/incmix-ui-docs/tree/main/content/docs/components/icon/props.mdx",
      "headings": [
        {
          "text": "Props",
          "id": "props",
          "level": "h2"
        },
        {
          "text": "`Icon` props",
          "id": "icon-props",
          "level": "h3"
        },
        {
          "text": "`createIcon` options",
          "id": "createicon-options",
          "level": "h2"
        }
      ]
    }
  },
  {
    "title": "Icon",
    "package": "@incmix-ui/icon",
    "description": "Incmix provides a set of commonly used interface icons you can use in your project",
    "id": "icon",
    "scope": "usage",
    "category": "media-and-icons",
    "body": {
      "raw": "\n## Installation\n\nIncmix provides a set of commonly used interface icons you can use them in your\nproject.\n\nThese icons are published into a separate package that is not part of\n`@incmix-ui/react` by default.\n\n```bash\nnpm i @incmix-ui/icons\n# or\nyarn add @incmix-ui/icons\n```\n\n## Usage\n\nIncmix provides multiple ways to use icons in your project:\n\n- [Using Incmix UI icon library](#using-incmix-ui-icons)\n- [Using a third-party icon library](#using-a-third-party-icon-library)\n- [Creating your own icons](#creating-your-custom-icons)\n\n> 🚨 Avoid passing `onClick` handlers to icon components. If you need a\n> clickable icon, use the [IconButton](/docs/components/form/icon-button)\n> instead.\n\n```jsx live=false\nimport { PhoneIcon, AddIcon, WarningIcon } from '@incmix-ui/icons'\n\n// The default icon size is 1em (16px)\n<PhoneIcon />\n\n// Use the `boxSize` prop to change the icon size\n<AddIcon w={6} h={6} />\n\n// Use the `color` prop to change the icon color\n<WarningIcon w={8} h={8} color=\"red.500\" />\n```\n\n### All icons\n\nBelow is a list of all of the icons in the library, along with the corresponding\ncomponent names:\n\n<Box mt={5}>\n  <IconsList />\n</Box>\n\n## Using a third-party icon library\n\nTo use third-party icon libraries like\n[`react-icons`](https://react-icons.github.io/react-icons/), here are the steps:\n\n1. Import the `Icon` component from `@incmix-ui/react`\n2. Pass the desired third party icon into the `as` prop\n\n```jsx live=false\n// 1. Import\nimport { Icon } from '@incmix-ui/react'\nimport { MdSettings } from 'react-icons/md'\n\n// 2. Use the `as` prop\nfunction Example() {\n  return <Icon as={MdSettings} />\n}\n```\n\n### Some examples\n\n```jsx\n<HStack>\n  {/* The default icon size is 1em (16px) */}\n  <Icon as={MdSettings} />\n\n  {/* Use the `boxSize` prop to change the icon size */}\n  <Icon as={MdReceipt} w={6} h={6} />\n\n  {/* Use the `color` prop to change the icon color */}\n  <Icon as={MdGroupWork} w={8} h={8} color=\"red.500\" />\n</HStack>\n```\n\n## Creating your custom icons\n\nIncmix provides two methods for creating your custom icons:\n\n- Using the [Icon](#using-the-icon-component) component\n- Using the [createIcon](#using-the-createicon-function) function\n\nThey can be imported from `@incmix-ui/react`:\n\n```jsx live=false\nimport { Icon, createIcon } from '@incmix-ui/react'\n```\n\nBoth `Icon` and `createIcon` enable you to style the icon using\n[style props](/docs/styled-system/style-props).\n\n### Using the `Icon` component\n\nThe `Icon` component renders as an `svg` element.\n\n```jsx\n<Icon viewBox=\"0 0 200 200\" color=\"red.500\">\n  <path fill=\"currentColor\" d=\"M 100, 100 m -75, 0 a 75,75 0 1,0 150,0 a 75,75 0 1,0 -150,0\" />\n</Icon>\n```\n\nThis enables you to define your own custom icon components:\n\n```jsx live=false\nconst CircleIcon = props => (\n  <Icon viewBox=\"0 0 200 200\" {...props}>\n    <path fill=\"currentColor\" d=\"M 100, 100 m -75, 0 a 75,75 0 1,0 150,0 a 75,75 0 1,0 -150,0\" />\n  </Icon>\n)\n```\n\nAnd style them with style props:\n\n```jsx\n<HStack>\n  {/* The default icon size is 1em (16px) */}\n  <CircleIcon />\n\n  {/* Use the `boxSize` prop to change the icon size */}\n  <CircleIcon boxSize={6} />\n\n  {/* Use the `color` prop to change the icon color */}\n  <CircleIcon boxSize={8} color=\"red.500\" />\n</HStack>\n```\n\n### Using the `createIcon` function\n\nThe `createIcon` function is a convenience wrapper around the process of\ngenerating icons with `Icon`, allowing you to achieve the same functionality\nwith less effort.\n\n```jsx live=false\nimport { createIcon } from '@incmix-ui/icons'\n\n// using `path`\nexport const UpDownIcon = createIcon({\n  displayName: 'UpDownIcon',\n  viewBox: '0 0 200 200',\n  // path can also be an array of elements, if you have multiple paths, lines, shapes, etc.\n  path: <path fill=\"currentColor\" d=\"M 100, 100 m -75, 0 a 75,75 0 1,0 150,0 a 75,75 0 1,0 -150,0\" />,\n})\n\n// OR using the `d` value of a path (the path definition) directly\nexport const UpDownIcon = createIcon({\n  displayName: 'UpDownIcon',\n  viewBox: '0 0 200 200',\n  d: 'M 100, 100 m -75, 0 a 75,75 0 1,0 150,0 a 75,75 0 1,0 -150,0',\n})\n```\n\n### Tips for generating your own icons\n\n- Export icons as `svg` from [Figma](https://www.figma.com/),\n  [Sketch](https://www.sketch.com/), etc.\n- Use a tool like [SvgOmg](https://jakearchibald.github.io/svgomg/) to reduce\n  the size and minify the markup.\n\n## Fallback Icon\n\nWhen `children` is not provided, the `Icon` component renders a fallback icon.\n\n```jsx\n<Icon />\n```\n",
      "code": "var Component=(()=>{var p=Object.create;var t=Object.defineProperty;var m=Object.getOwnPropertyDescriptor;var u=Object.getOwnPropertyNames;var g=Object.getPrototypeOf,f=Object.prototype.hasOwnProperty;var x=(o,n)=>()=>(n||o((n={exports:{}}).exports,n),n.exports),I=(o,n)=>{for(var i in n)t(o,i,{get:n[i],enumerable:!0})},a=(o,n,i,c)=>{if(n&&typeof n==\"object\"||typeof n==\"function\")for(let r of u(n))!f.call(o,r)&&r!==i&&t(o,r,{get:()=>n[r],enumerable:!(c=m(n,r))||c.enumerable});return o};var y=(o,n,i)=>(i=o!=null?p(g(o)):{},a(n||!o||!o.__esModule?t(i,\"default\",{value:o,enumerable:!0}):i,o)),b=o=>a(t({},\"__esModule\",{value:!0}),o);var s=x((S,l)=>{l.exports=_jsx_runtime});var j={};I(j,{default:()=>k,frontmatter:()=>w});var e=y(s()),w={id:\"icon\",category:\"media-and-icons\",title:\"Icon\",package:\"@incmix-ui/icon\",description:\"Incmix provides a set of commonly used interface icons you can use in your project\"};function h(o){let n=Object.assign({h2:\"h2\",p:\"p\",code:\"code\",pre:\"pre\",ul:\"ul\",li:\"li\",a:\"a\",blockquote:\"blockquote\",h3:\"h3\",ol:\"ol\"},o.components),{Box:i,IconsList:c}=n;return i||d(\"Box\",!0),c||d(\"IconsList\",!0),(0,e.jsxs)(e.Fragment,{children:[(0,e.jsx)(n.h2,{id:\"installation\",children:\"Installation\"}),`\n`,(0,e.jsx)(n.p,{children:`Incmix provides a set of commonly used interface icons you can use them in your\nproject.`}),`\n`,(0,e.jsxs)(n.p,{children:[`These icons are published into a separate package that is not part of\n`,(0,e.jsx)(n.code,{children:\"@incmix-ui/react\"}),\" by default.\"]}),`\n`,(0,e.jsx)(n.pre,{children:(0,e.jsx)(n.code,{className:\"language-bash\",children:`npm i @incmix-ui/icons\n# or\nyarn add @incmix-ui/icons\n`})}),`\n`,(0,e.jsx)(n.h2,{id:\"usage\",children:\"Usage\"}),`\n`,(0,e.jsx)(n.p,{children:\"Incmix provides multiple ways to use icons in your project:\"}),`\n`,(0,e.jsxs)(n.ul,{children:[`\n`,(0,e.jsx)(n.li,{children:(0,e.jsx)(n.a,{href:\"#using-incmix-ui-icons\",children:\"Using Incmix UI icon library\"})}),`\n`,(0,e.jsx)(n.li,{children:(0,e.jsx)(n.a,{href:\"#using-a-third-party-icon-library\",children:\"Using a third-party icon library\"})}),`\n`,(0,e.jsx)(n.li,{children:(0,e.jsx)(n.a,{href:\"#creating-your-custom-icons\",children:\"Creating your own icons\"})}),`\n`]}),`\n`,(0,e.jsxs)(n.blockquote,{children:[`\n`,(0,e.jsxs)(n.p,{children:[\"\\u{1F6A8} Avoid passing \",(0,e.jsx)(n.code,{children:\"onClick\"}),` handlers to icon components. If you need a\nclickable icon, use the `,(0,e.jsx)(n.a,{href:\"/docs/components/form/icon-button\",children:\"IconButton\"}),`\ninstead.`]}),`\n`]}),`\n`,(0,e.jsx)(n.pre,{children:(0,e.jsx)(n.code,{className:\"language-jsx\",live:\"false\",children:`import { PhoneIcon, AddIcon, WarningIcon } from '@incmix-ui/icons'\n\n// The default icon size is 1em (16px)\n<PhoneIcon />\n\n// Use the \\`boxSize\\` prop to change the icon size\n<AddIcon w={6} h={6} />\n\n// Use the \\`color\\` prop to change the icon color\n<WarningIcon w={8} h={8} color=\"red.500\" />\n`})}),`\n`,(0,e.jsx)(n.h3,{id:\"all-icons\",children:\"All icons\"}),`\n`,(0,e.jsx)(n.p,{children:`Below is a list of all of the icons in the library, along with the corresponding\ncomponent names:`}),`\n`,(0,e.jsx)(i,{mt:5,children:(0,e.jsx)(c,{})}),`\n`,(0,e.jsx)(n.h2,{id:\"using-a-third-party-icon-library\",children:\"Using a third-party icon library\"}),`\n`,(0,e.jsxs)(n.p,{children:[`To use third-party icon libraries like\n`,(0,e.jsx)(n.a,{href:\"https://react-icons.github.io/react-icons/\",children:(0,e.jsx)(n.code,{children:\"react-icons\"})}),\", here are the steps:\"]}),`\n`,(0,e.jsxs)(n.ol,{children:[`\n`,(0,e.jsxs)(n.li,{children:[\"Import the \",(0,e.jsx)(n.code,{children:\"Icon\"}),\" component from \",(0,e.jsx)(n.code,{children:\"@incmix-ui/react\"})]}),`\n`,(0,e.jsxs)(n.li,{children:[\"Pass the desired third party icon into the \",(0,e.jsx)(n.code,{children:\"as\"}),\" prop\"]}),`\n`]}),`\n`,(0,e.jsx)(n.pre,{children:(0,e.jsx)(n.code,{className:\"language-jsx\",live:\"false\",children:`// 1. Import\nimport { Icon } from '@incmix-ui/react'\nimport { MdSettings } from 'react-icons/md'\n\n// 2. Use the \\`as\\` prop\nfunction Example() {\n  return <Icon as={MdSettings} />\n}\n`})}),`\n`,(0,e.jsx)(n.h3,{id:\"some-examples\",children:\"Some examples\"}),`\n`,(0,e.jsx)(n.pre,{children:(0,e.jsx)(n.code,{className:\"language-jsx\",children:`<HStack>\n  {/* The default icon size is 1em (16px) */}\n  <Icon as={MdSettings} />\n\n  {/* Use the \\`boxSize\\` prop to change the icon size */}\n  <Icon as={MdReceipt} w={6} h={6} />\n\n  {/* Use the \\`color\\` prop to change the icon color */}\n  <Icon as={MdGroupWork} w={8} h={8} color=\"red.500\" />\n</HStack>\n`})}),`\n`,(0,e.jsx)(n.h2,{id:\"creating-your-custom-icons\",children:\"Creating your custom icons\"}),`\n`,(0,e.jsx)(n.p,{children:\"Incmix provides two methods for creating your custom icons:\"}),`\n`,(0,e.jsxs)(n.ul,{children:[`\n`,(0,e.jsxs)(n.li,{children:[\"Using the \",(0,e.jsx)(n.a,{href:\"#using-the-icon-component\",children:\"Icon\"}),\" component\"]}),`\n`,(0,e.jsxs)(n.li,{children:[\"Using the \",(0,e.jsx)(n.a,{href:\"#using-the-createicon-function\",children:\"createIcon\"}),\" function\"]}),`\n`]}),`\n`,(0,e.jsxs)(n.p,{children:[\"They can be imported from \",(0,e.jsx)(n.code,{children:\"@incmix-ui/react\"}),\":\"]}),`\n`,(0,e.jsx)(n.pre,{children:(0,e.jsx)(n.code,{className:\"language-jsx\",live:\"false\",children:`import { Icon, createIcon } from '@incmix-ui/react'\n`})}),`\n`,(0,e.jsxs)(n.p,{children:[\"Both \",(0,e.jsx)(n.code,{children:\"Icon\"}),\" and \",(0,e.jsx)(n.code,{children:\"createIcon\"}),` enable you to style the icon using\n`,(0,e.jsx)(n.a,{href:\"/docs/styled-system/style-props\",children:\"style props\"}),\".\"]}),`\n`,(0,e.jsxs)(n.h3,{id:\"using-the-icon-component\",children:[\"Using the \",(0,e.jsx)(n.code,{children:\"Icon\"}),\" component\"]}),`\n`,(0,e.jsxs)(n.p,{children:[\"The \",(0,e.jsx)(n.code,{children:\"Icon\"}),\" component renders as an \",(0,e.jsx)(n.code,{children:\"svg\"}),\" element.\"]}),`\n`,(0,e.jsx)(n.pre,{children:(0,e.jsx)(n.code,{className:\"language-jsx\",children:`<Icon viewBox=\"0 0 200 200\" color=\"red.500\">\n  <path fill=\"currentColor\" d=\"M 100, 100 m -75, 0 a 75,75 0 1,0 150,0 a 75,75 0 1,0 -150,0\" />\n</Icon>\n`})}),`\n`,(0,e.jsx)(n.p,{children:\"This enables you to define your own custom icon components:\"}),`\n`,(0,e.jsx)(n.pre,{children:(0,e.jsx)(n.code,{className:\"language-jsx\",live:\"false\",children:`const CircleIcon = props => (\n  <Icon viewBox=\"0 0 200 200\" {...props}>\n    <path fill=\"currentColor\" d=\"M 100, 100 m -75, 0 a 75,75 0 1,0 150,0 a 75,75 0 1,0 -150,0\" />\n  </Icon>\n)\n`})}),`\n`,(0,e.jsx)(n.p,{children:\"And style them with style props:\"}),`\n`,(0,e.jsx)(n.pre,{children:(0,e.jsx)(n.code,{className:\"language-jsx\",children:`<HStack>\n  {/* The default icon size is 1em (16px) */}\n  <CircleIcon />\n\n  {/* Use the \\`boxSize\\` prop to change the icon size */}\n  <CircleIcon boxSize={6} />\n\n  {/* Use the \\`color\\` prop to change the icon color */}\n  <CircleIcon boxSize={8} color=\"red.500\" />\n</HStack>\n`})}),`\n`,(0,e.jsxs)(n.h3,{id:\"using-the-createicon-function\",children:[\"Using the \",(0,e.jsx)(n.code,{children:\"createIcon\"}),\" function\"]}),`\n`,(0,e.jsxs)(n.p,{children:[\"The \",(0,e.jsx)(n.code,{children:\"createIcon\"}),` function is a convenience wrapper around the process of\ngenerating icons with `,(0,e.jsx)(n.code,{children:\"Icon\"}),`, allowing you to achieve the same functionality\nwith less effort.`]}),`\n`,(0,e.jsx)(n.pre,{children:(0,e.jsx)(n.code,{className:\"language-jsx\",live:\"false\",children:`import { createIcon } from '@incmix-ui/icons'\n\n// using \\`path\\`\nexport const UpDownIcon = createIcon({\n  displayName: 'UpDownIcon',\n  viewBox: '0 0 200 200',\n  // path can also be an array of elements, if you have multiple paths, lines, shapes, etc.\n  path: <path fill=\"currentColor\" d=\"M 100, 100 m -75, 0 a 75,75 0 1,0 150,0 a 75,75 0 1,0 -150,0\" />,\n})\n\n// OR using the \\`d\\` value of a path (the path definition) directly\nexport const UpDownIcon = createIcon({\n  displayName: 'UpDownIcon',\n  viewBox: '0 0 200 200',\n  d: 'M 100, 100 m -75, 0 a 75,75 0 1,0 150,0 a 75,75 0 1,0 -150,0',\n})\n`})}),`\n`,(0,e.jsx)(n.h3,{id:\"tips-for-generating-your-own-icons\",children:\"Tips for generating your own icons\"}),`\n`,(0,e.jsxs)(n.ul,{children:[`\n`,(0,e.jsxs)(n.li,{children:[\"Export icons as \",(0,e.jsx)(n.code,{children:\"svg\"}),\" from \",(0,e.jsx)(n.a,{href:\"https://www.figma.com/\",children:\"Figma\"}),`,\n`,(0,e.jsx)(n.a,{href:\"https://www.sketch.com/\",children:\"Sketch\"}),\", etc.\"]}),`\n`,(0,e.jsxs)(n.li,{children:[\"Use a tool like \",(0,e.jsx)(n.a,{href:\"https://jakearchibald.github.io/svgomg/\",children:\"SvgOmg\"}),` to reduce\nthe size and minify the markup.`]}),`\n`]}),`\n`,(0,e.jsx)(n.h2,{id:\"fallback-icon\",children:\"Fallback Icon\"}),`\n`,(0,e.jsxs)(n.p,{children:[\"When \",(0,e.jsx)(n.code,{children:\"children\"}),\" is not provided, the \",(0,e.jsx)(n.code,{children:\"Icon\"}),\" component renders a fallback icon.\"]}),`\n`,(0,e.jsx)(n.pre,{children:(0,e.jsx)(n.code,{className:\"language-jsx\",children:`<Icon />\n`})})]})}function v(o={}){let{wrapper:n}=o.components||{};return n?(0,e.jsx)(n,Object.assign({},o,{children:(0,e.jsx)(h,o)})):h(o)}var k=v;function d(o,n){throw new Error(\"Expected \"+(n?\"component\":\"object\")+\" `\"+o+\"` to be defined: you likely forgot to import, pass, or provide it.\")}return b(j);})();\n;return Component;"
    },
    "_id": "docs/components/icon/usage.mdx",
    "_raw": {
      "sourceFilePath": "docs/components/icon/usage.mdx",
      "sourceFileName": "usage.mdx",
      "sourceFileDir": "docs/components/icon",
      "contentType": "mdx",
      "flattenedPath": "docs/components/icon/usage"
    },
    "type": "Doc",
    "slug": "/docs/components/icon/usage",
    "frontMatter": {
      "title": "Icon",
      "package": "@incmix-ui/icon",
      "description": "Incmix provides a set of commonly used interface icons you can use in your project",
      "slug": "/docs/components/icon/usage",
      "editUrl": "https://github.com/incmix-ui/incmix-ui-docs/tree/main/content/docs/components/icon/usage.mdx",
      "headings": [
        {
          "text": "Installation",
          "id": "installation",
          "level": "h2"
        },
        {
          "text": "Usage",
          "id": "usage",
          "level": "h2"
        },
        {
          "text": "All icons",
          "id": "all-icons",
          "level": "h3"
        },
        {
          "text": "Using a third-party icon library",
          "id": "using-a-third-party-icon-library",
          "level": "h2"
        },
        {
          "text": "Some examples",
          "id": "some-examples",
          "level": "h3"
        },
        {
          "text": "Creating your custom icons",
          "id": "creating-your-custom-icons",
          "level": "h2"
        },
        {
          "text": "Using the `Icon` component",
          "id": "using-the-icon-component",
          "level": "h3"
        },
        {
          "text": "Using the `createIcon` function",
          "id": "using-the-createicon-function",
          "level": "h3"
        },
        {
          "text": "Tips for generating your own icons",
          "id": "tips-for-generating-your-own-icons",
          "level": "h3"
        },
        {
          "text": "Fallback Icon",
          "id": "fallback-icon",
          "level": "h2"
        }
      ]
    }
  },
  {
    "id": "icon-button",
    "scope": "props",
    "body": {
      "raw": "\n## Props\n\n<PropsTable of=\"IconButton\" />\n",
      "code": "var Component=(()=>{var m=Object.create;var s=Object.defineProperty;var u=Object.getOwnPropertyDescriptor;var f=Object.getOwnPropertyNames;var x=Object.getPrototypeOf,j=Object.prototype.hasOwnProperty;var l=(t,o)=>()=>(o||t((o={exports:{}}).exports,o),o.exports),_=(t,o)=>{for(var e in o)s(t,e,{get:o[e],enumerable:!0})},i=(t,o,e,c)=>{if(o&&typeof o==\"object\"||typeof o==\"function\")for(let r of f(o))!j.call(t,r)&&r!==e&&s(t,r,{get:()=>o[r],enumerable:!(c=u(o,r))||c.enumerable});return t};var b=(t,o,e)=>(e=t!=null?m(x(t)):{},i(o||!t||!t.__esModule?s(e,\"default\",{value:t,enumerable:!0}):e,t)),h=t=>i(s({},\"__esModule\",{value:!0}),t);var a=l((D,p)=>{p.exports=_jsx_runtime});var P={};_(P,{default:()=>w,frontmatter:()=>g});var n=b(a()),g={id:\"icon-button\",scope:\"props\"};function d(t){let o=Object.assign({h2:\"h2\"},t.components),{PropsTable:e}=o;return e||y(\"PropsTable\",!0),(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(o.h2,{id:\"props\",children:\"Props\"}),`\n`,(0,n.jsx)(e,{of:\"IconButton\"})]})}function M(t={}){let{wrapper:o}=t.components||{};return o?(0,n.jsx)(o,Object.assign({},t,{children:(0,n.jsx)(d,t)})):d(t)}var w=M;function y(t,o){throw new Error(\"Expected \"+(o?\"component\":\"object\")+\" `\"+t+\"` to be defined: you likely forgot to import, pass, or provide it.\")}return h(P);})();\n;return Component;"
    },
    "_id": "docs/components/icon-button/props.mdx",
    "_raw": {
      "sourceFilePath": "docs/components/icon-button/props.mdx",
      "sourceFileName": "props.mdx",
      "sourceFileDir": "docs/components/icon-button",
      "contentType": "mdx",
      "flattenedPath": "docs/components/icon-button/props"
    },
    "type": "Doc",
    "slug": "/docs/components/icon-button/props",
    "frontMatter": {
      "slug": "/docs/components/icon-button/props",
      "editUrl": "https://github.com/incmix-ui/incmix-ui-docs/tree/main/content/docs/components/icon-button/props.mdx",
      "headings": [
        {
          "text": "Props",
          "id": "props",
          "level": "h2"
        }
      ]
    }
  },
  {
    "id": "icon-button",
    "scope": "theming",
    "body": {
      "raw": "",
      "code": "var Component=(()=>{var x=Object.create;var a=Object.defineProperty;var f=Object.getOwnPropertyDescriptor;var _=Object.getOwnPropertyNames;var d=Object.getPrototypeOf,g=Object.prototype.hasOwnProperty;var j=(t,n)=>()=>(n||t((n={exports:{}}).exports,n),n.exports),p=(t,n)=>{for(var e in n)a(t,e,{get:n[e],enumerable:!0})},s=(t,n,e,c)=>{if(n&&typeof n==\"object\"||typeof n==\"function\")for(let r of _(n))!g.call(t,r)&&r!==e&&a(t,r,{get:()=>n[r],enumerable:!(c=f(n,r))||c.enumerable});return t};var M=(t,n,e)=>(e=t!=null?x(d(t)):{},s(n||!t||!t.__esModule?a(e,\"default\",{value:t,enumerable:!0}):e,t)),b=t=>s(a({},\"__esModule\",{value:!0}),t);var m=j((X,i)=>{i.exports=_jsx_runtime});var D={};p(D,{default:()=>C,frontmatter:()=>h});var o=M(m()),h={id:\"icon-button\",scope:\"theming\"};function u(t){return(0,o.jsx)(o.Fragment,{})}function l(t={}){let{wrapper:n}=t.components||{};return n?(0,o.jsx)(n,Object.assign({},t,{children:(0,o.jsx)(u,t)})):u(t)}var C=l;return b(D);})();\n;return Component;"
    },
    "_id": "docs/components/icon-button/theming.mdx",
    "_raw": {
      "sourceFilePath": "docs/components/icon-button/theming.mdx",
      "sourceFileName": "theming.mdx",
      "sourceFileDir": "docs/components/icon-button",
      "contentType": "mdx",
      "flattenedPath": "docs/components/icon-button/theming"
    },
    "type": "Doc",
    "slug": "/docs/components/icon-button/theming",
    "frontMatter": {
      "slug": "/docs/components/icon-button/theming",
      "editUrl": "https://github.com/incmix-ui/incmix-ui-docs/tree/main/content/docs/components/icon-button/theming.mdx",
      "headings": []
    }
  },
  {
    "title": "Icon Button",
    "package": "@incmix-ui/button",
    "description": "Icon button renders an icon within in a button.",
    "id": "icon-button",
    "scope": "usage",
    "category": "form",
    "body": {
      "raw": "\n## Import\n\n```js\nimport { IconButton } from '@incmix-ui/react'\n```\n\n## Usage\n\nIconButton composes the `Button` component except that it renders only an icon.\nSince `IconButton` only renders an icon, you must pass the `aria-label` prop, so\nscreen readers can give meaning to the button.\n\n```jsx\n<IconButton aria-label=\"Search database\" icon={<SearchIcon />} />\n```\n\n### Button Colors\n\nThe `IconButton` component accepts most of the props from the `Button`\ncomponent, so we can use `colorScheme` prop to change the color of the button.\n\n```jsx\n<IconButton colorScheme=\"blue\" aria-label=\"Search database\" icon={<SearchIcon />} />\n```\n\n### Button Sizes\n\nLike the `Button component`, pass the `size` prop to change the size of the\nbutton.\n\n```jsx\n<IconButton colorScheme=\"teal\" aria-label=\"Call Segun\" size=\"lg\" icon={<PhoneIcon />} />\n```\n\n### Button Variants\n\nLike the `Button` component, pass the `variant` prop to change the style of the\nbutton.\n\n```jsx\n<IconButton variant=\"outline\" colorScheme=\"teal\" aria-label=\"Send email\" icon={<EmailIcon />} />\n```\n\n### With custom icon\n\nYou can also use icons from popular libraries like\n[react-icons](https://react-icons.github.io/react-icons/) and just pass it into\nthe button.\n\n```jsx\n<IconButton variant=\"outline\" colorScheme=\"teal\" aria-label=\"Call Sage\" fontSize=\"20px\" icon={<MdPhone />} />\n```\n",
      "code": "var Component=(()=>{var d=Object.create;var a=Object.defineProperty;var u=Object.getOwnPropertyDescriptor;var p=Object.getOwnPropertyNames;var m=Object.getPrototypeOf,g=Object.prototype.hasOwnProperty;var b=(o,n)=>()=>(n||o((n={exports:{}}).exports,n),n.exports),x=(o,n)=>{for(var t in n)a(o,t,{get:n[t],enumerable:!0})},r=(o,n,t,i)=>{if(n&&typeof n==\"object\"||typeof n==\"function\")for(let c of p(n))!g.call(o,c)&&c!==t&&a(o,c,{get:()=>n[c],enumerable:!(i=u(n,c))||i.enumerable});return o};var B=(o,n,t)=>(t=o!=null?d(m(o)):{},r(n||!o||!o.__esModule?a(t,\"default\",{value:o,enumerable:!0}):t,o)),I=o=>r(a({},\"__esModule\",{value:!0}),o);var s=b((z,l)=>{l.exports=_jsx_runtime});var _={};x(_,{default:()=>j,frontmatter:()=>f});var e=B(s()),f={id:\"icon-button\",category:\"form\",title:\"Icon Button\",package:\"@incmix-ui/button\",description:\"Icon button renders an icon within in a button.\"};function h(o){let n=Object.assign({h2:\"h2\",pre:\"pre\",code:\"code\",p:\"p\",h3:\"h3\",a:\"a\"},o.components);return(0,e.jsxs)(e.Fragment,{children:[(0,e.jsx)(n.h2,{id:\"import\",children:\"Import\"}),`\n`,(0,e.jsx)(n.pre,{children:(0,e.jsx)(n.code,{className:\"language-js\",children:`import { IconButton } from '@incmix-ui/react'\n`})}),`\n`,(0,e.jsx)(n.h2,{id:\"usage\",children:\"Usage\"}),`\n`,(0,e.jsxs)(n.p,{children:[\"IconButton composes the \",(0,e.jsx)(n.code,{children:\"Button\"}),` component except that it renders only an icon.\nSince `,(0,e.jsx)(n.code,{children:\"IconButton\"}),\" only renders an icon, you must pass the \",(0,e.jsx)(n.code,{children:\"aria-label\"}),` prop, so\nscreen readers can give meaning to the button.`]}),`\n`,(0,e.jsx)(n.pre,{children:(0,e.jsx)(n.code,{className:\"language-jsx\",children:`<IconButton aria-label=\"Search database\" icon={<SearchIcon />} />\n`})}),`\n`,(0,e.jsx)(n.h3,{id:\"button-colors\",children:\"Button Colors\"}),`\n`,(0,e.jsxs)(n.p,{children:[\"The \",(0,e.jsx)(n.code,{children:\"IconButton\"}),\" component accepts most of the props from the \",(0,e.jsx)(n.code,{children:\"Button\"}),`\ncomponent, so we can use `,(0,e.jsx)(n.code,{children:\"colorScheme\"}),\" prop to change the color of the button.\"]}),`\n`,(0,e.jsx)(n.pre,{children:(0,e.jsx)(n.code,{className:\"language-jsx\",children:`<IconButton colorScheme=\"blue\" aria-label=\"Search database\" icon={<SearchIcon />} />\n`})}),`\n`,(0,e.jsx)(n.h3,{id:\"button-sizes\",children:\"Button Sizes\"}),`\n`,(0,e.jsxs)(n.p,{children:[\"Like the \",(0,e.jsx)(n.code,{children:\"Button component\"}),\", pass the \",(0,e.jsx)(n.code,{children:\"size\"}),` prop to change the size of the\nbutton.`]}),`\n`,(0,e.jsx)(n.pre,{children:(0,e.jsx)(n.code,{className:\"language-jsx\",children:`<IconButton colorScheme=\"teal\" aria-label=\"Call Segun\" size=\"lg\" icon={<PhoneIcon />} />\n`})}),`\n`,(0,e.jsx)(n.h3,{id:\"button-variants\",children:\"Button Variants\"}),`\n`,(0,e.jsxs)(n.p,{children:[\"Like the \",(0,e.jsx)(n.code,{children:\"Button\"}),\" component, pass the \",(0,e.jsx)(n.code,{children:\"variant\"}),` prop to change the style of the\nbutton.`]}),`\n`,(0,e.jsx)(n.pre,{children:(0,e.jsx)(n.code,{className:\"language-jsx\",children:`<IconButton variant=\"outline\" colorScheme=\"teal\" aria-label=\"Send email\" icon={<EmailIcon />} />\n`})}),`\n`,(0,e.jsx)(n.h3,{id:\"with-custom-icon\",children:\"With custom icon\"}),`\n`,(0,e.jsxs)(n.p,{children:[`You can also use icons from popular libraries like\n`,(0,e.jsx)(n.a,{href:\"https://react-icons.github.io/react-icons/\",children:\"react-icons\"}),` and just pass it into\nthe button.`]}),`\n`,(0,e.jsx)(n.pre,{children:(0,e.jsx)(n.code,{className:\"language-jsx\",children:`<IconButton variant=\"outline\" colorScheme=\"teal\" aria-label=\"Call Sage\" fontSize=\"20px\" icon={<MdPhone />} />\n`})})]})}function S(o={}){let{wrapper:n}=o.components||{};return n?(0,e.jsx)(n,Object.assign({},o,{children:(0,e.jsx)(h,o)})):h(o)}var j=S;return I(_);})();\n;return Component;"
    },
    "_id": "docs/components/icon-button/usage.mdx",
    "_raw": {
      "sourceFilePath": "docs/components/icon-button/usage.mdx",
      "sourceFileName": "usage.mdx",
      "sourceFileDir": "docs/components/icon-button",
      "contentType": "mdx",
      "flattenedPath": "docs/components/icon-button/usage"
    },
    "type": "Doc",
    "slug": "/docs/components/icon-button/usage",
    "frontMatter": {
      "title": "Icon Button",
      "package": "@incmix-ui/button",
      "description": "Icon button renders an icon within in a button.",
      "slug": "/docs/components/icon-button/usage",
      "editUrl": "https://github.com/incmix-ui/incmix-ui-docs/tree/main/content/docs/components/icon-button/usage.mdx",
      "headings": [
        {
          "text": "Import",
          "id": "import",
          "level": "h2"
        },
        {
          "text": "Usage",
          "id": "usage",
          "level": "h2"
        },
        {
          "text": "Button Colors",
          "id": "button-colors",
          "level": "h3"
        },
        {
          "text": "Button Sizes",
          "id": "button-sizes",
          "level": "h3"
        },
        {
          "text": "Button Variants",
          "id": "button-variants",
          "level": "h3"
        },
        {
          "text": "With custom icon",
          "id": "with-custom-icon",
          "level": "h3"
        }
      ]
    }
  },
  {
    "id": "skip-nav",
    "scope": "props",
    "body": {
      "raw": "\n## Props\n\nThe `SkipNavLink` component composes the `Box` component and renders an `a`.\n\nThe `SkipNavContent` component composes the `Box` component and renders a `div`.\n",
      "code": "var Component=(()=>{var h=Object.create;var r=Object.defineProperty;var m=Object.getOwnPropertyDescriptor;var l=Object.getOwnPropertyNames;var x=Object.getPrototypeOf,j=Object.prototype.hasOwnProperty;var u=(n,e)=>()=>(e||n((e={exports:{}}).exports,e),e.exports),_=(n,e)=>{for(var c in e)r(n,c,{get:e[c],enumerable:!0})},d=(n,e,c,s)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let t of l(e))!j.call(n,t)&&t!==c&&r(n,t,{get:()=>e[t],enumerable:!(s=m(e,t))||s.enumerable});return n};var f=(n,e,c)=>(c=n!=null?h(x(n)):{},d(e||!n||!n.__esModule?r(c,\"default\",{value:n,enumerable:!0}):c,n)),g=n=>d(r({},\"__esModule\",{value:!0}),n);var p=u((B,i)=>{i.exports=_jsx_runtime});var M={};_(M,{default:()=>C,frontmatter:()=>k});var o=f(p()),k={id:\"skip-nav\",scope:\"props\"};function a(n){let e=Object.assign({h2:\"h2\",p:\"p\",code:\"code\"},n.components);return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(e.h2,{id:\"props\",children:\"Props\"}),`\n`,(0,o.jsxs)(e.p,{children:[\"The \",(0,o.jsx)(e.code,{children:\"SkipNavLink\"}),\" component composes the \",(0,o.jsx)(e.code,{children:\"Box\"}),\" component and renders an \",(0,o.jsx)(e.code,{children:\"a\"}),\".\"]}),`\n`,(0,o.jsxs)(e.p,{children:[\"The \",(0,o.jsx)(e.code,{children:\"SkipNavContent\"}),\" component composes the \",(0,o.jsx)(e.code,{children:\"Box\"}),\" component and renders a \",(0,o.jsx)(e.code,{children:\"div\"}),\".\"]})]})}function v(n={}){let{wrapper:e}=n.components||{};return e?(0,o.jsx)(e,Object.assign({},n,{children:(0,o.jsx)(a,n)})):a(n)}var C=v;return g(M);})();\n;return Component;"
    },
    "_id": "docs/components/skip-nav/props.mdx",
    "_raw": {
      "sourceFilePath": "docs/components/skip-nav/props.mdx",
      "sourceFileName": "props.mdx",
      "sourceFileDir": "docs/components/skip-nav",
      "contentType": "mdx",
      "flattenedPath": "docs/components/skip-nav/props"
    },
    "type": "Doc",
    "slug": "/docs/components/skip-nav/props",
    "frontMatter": {
      "slug": "/docs/components/skip-nav/props",
      "editUrl": "https://github.com/incmix-ui/incmix-ui-docs/tree/main/content/docs/components/skip-nav/props.mdx",
      "headings": [
        {
          "text": "Props",
          "id": "props",
          "level": "h2"
        }
      ]
    }
  },
  {
    "id": "skip-nav",
    "scope": "theming",
    "body": {
      "raw": "",
      "code": "var Component=(()=>{var x=Object.create;var a=Object.defineProperty;var f=Object.getOwnPropertyDescriptor;var p=Object.getOwnPropertyNames;var _=Object.getPrototypeOf,d=Object.prototype.hasOwnProperty;var g=(t,n)=>()=>(n||t((n={exports:{}}).exports,n),n.exports),j=(t,n)=>{for(var e in n)a(t,e,{get:n[e],enumerable:!0})},c=(t,n,e,s)=>{if(n&&typeof n==\"object\"||typeof n==\"function\")for(let o of p(n))!d.call(t,o)&&o!==e&&a(t,o,{get:()=>n[o],enumerable:!(s=f(n,o))||s.enumerable});return t};var M=(t,n,e)=>(e=t!=null?x(_(t)):{},c(n||!t||!t.__esModule?a(e,\"default\",{value:t,enumerable:!0}):e,t)),h=t=>c(a({},\"__esModule\",{value:!0}),t);var m=g((b,i)=>{i.exports=_jsx_runtime});var F={};j(F,{default:()=>D,frontmatter:()=>l});var r=M(m()),l={id:\"skip-nav\",scope:\"theming\"};function u(t){return(0,r.jsx)(r.Fragment,{})}function C(t={}){let{wrapper:n}=t.components||{};return n?(0,r.jsx)(n,Object.assign({},t,{children:(0,r.jsx)(u,t)})):u(t)}var D=C;return h(F);})();\n;return Component;"
    },
    "_id": "docs/components/skip-nav/theming.mdx",
    "_raw": {
      "sourceFilePath": "docs/components/skip-nav/theming.mdx",
      "sourceFileName": "theming.mdx",
      "sourceFileDir": "docs/components/skip-nav",
      "contentType": "mdx",
      "flattenedPath": "docs/components/skip-nav/theming"
    },
    "type": "Doc",
    "slug": "/docs/components/skip-nav/theming",
    "frontMatter": {
      "slug": "/docs/components/skip-nav/theming",
      "editUrl": "https://github.com/incmix-ui/incmix-ui-docs/tree/main/content/docs/components/skip-nav/theming.mdx",
      "headings": []
    }
  },
  {
    "title": "Skip Nav",
    "package": "@incmix-ui/skip-nav",
    "description": "Skip Nav Link allows keyboard users to skip to the main content of the page.",
    "id": "skip-nav",
    "scope": "usage",
    "category": "navigation",
    "body": {
      "raw": "\nSkip Navigation link and destination container for screen readers and keyboard\nusers.\n\nPer WebAim.org on\n[WCAG 2.4.1 (Bypass Blocks - Level A)](https://webaim.org/standards/wcag/checklist#sc2.4.1),\nbecause the main content is not always the first section that the user\nencounters on a page, it is strongly recommended to include a skip link for\nusers to be able to bypass content that is present on multiple pages. Navigation\nlinks are the most common skipped.\n\n> A user with a screen reader or specialized software could skip content via the\n> headings or `main` region, but this is not sufficiant enough for sighted users\n> who primarily us\n\n## Imports\n\n```js\nimport { SkipNavLink, SkipNavContent } from '@incmix-ui/skip-nav'\n```\n\n## Usage\n\nThe `SkipNavLink` component ideally needs to be one of the first items a user\nencounters when they begin navigating a page after load. Therefore, it is\nrecommended to place it as high as possible in the app.\n\nIt renders an `a` tag and automatically creates a link with an `href` attribute\nthat will point to `SkipNavContent`.\n\nThe `SkipNavContent` component is used as a target for the link to place\nkeyboard focus on the first piece on main content. It renders a `div` and can\neither be a self-closing component, or wrap the main content.\n\n> You can supply a custom id value using the prop `id` but you will have to use\n> this prop and value in both components, or they will not match. For Example:\n> `id=\"custom-id\"` renders `href=\"#custom-id\"` in `SkipNavLink` and\n> `id=\"custom-id\"` in `SkipNavContent`.\n\n```jsx live=false\n<>\n  // If you want to make it the first element the user encounters\n  <SkipNavLink>Skip to content</SkipNavLink>\n  <App />\n</>\n\n// And inside another component, like App\n<div>\n  <SkipNavContent />\n  // The main content below\n</div>\n```\n\n## In Action\n\nYou can see these components in action on this page!\n\n1. Place your cursor in the browser's address bar.\n2. Remove any id queries from the url. (i.e. `/skip-nav#usage`)\n3. Hit `Enter` to reload the page, then hit `Tab`. The Skip Nav link will appear\n   in the upper left.\n4. Hitting `Enter` on the link will take you to the top of the docs content.\n",
      "code": "var Component=(()=>{var h=Object.create;var a=Object.defineProperty;var p=Object.getOwnPropertyDescriptor;var u=Object.getOwnPropertyNames;var m=Object.getPrototypeOf,k=Object.prototype.hasOwnProperty;var g=(i,e)=>()=>(e||i((e={exports:{}}).exports,e),e.exports),f=(i,e)=>{for(var t in e)a(i,t,{get:e[t],enumerable:!0})},c=(i,e,t,r)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let o of u(e))!k.call(i,o)&&o!==t&&a(i,o,{get:()=>e[o],enumerable:!(r=p(e,o))||r.enumerable});return i};var v=(i,e,t)=>(t=i!=null?h(m(i)):{},c(e||!i||!i.__esModule?a(t,\"default\",{value:i,enumerable:!0}):t,i)),b=i=>c(a({},\"__esModule\",{value:!0}),i);var d=g((j,s)=>{s.exports=_jsx_runtime});var S={};f(S,{default:()=>N,frontmatter:()=>y});var n=v(d()),y={id:\"skip-nav\",category:\"navigation\",title:\"Skip Nav\",package:\"@incmix-ui/skip-nav\",description:\"Skip Nav Link allows keyboard users to skip to the main content of the page.\"};function l(i){let e=Object.assign({p:\"p\",a:\"a\",blockquote:\"blockquote\",code:\"code\",h2:\"h2\",pre:\"pre\",ol:\"ol\",li:\"li\"},i.components);return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(e.p,{children:`Skip Navigation link and destination container for screen readers and keyboard\nusers.`}),`\n`,(0,n.jsxs)(e.p,{children:[`Per WebAim.org on\n`,(0,n.jsx)(e.a,{href:\"https://webaim.org/standards/wcag/checklist#sc2.4.1\",children:\"WCAG 2.4.1 (Bypass Blocks - Level A)\"}),`,\nbecause the main content is not always the first section that the user\nencounters on a page, it is strongly recommended to include a skip link for\nusers to be able to bypass content that is present on multiple pages. Navigation\nlinks are the most common skipped.`]}),`\n`,(0,n.jsxs)(e.blockquote,{children:[`\n`,(0,n.jsxs)(e.p,{children:[`A user with a screen reader or specialized software could skip content via the\nheadings or `,(0,n.jsx)(e.code,{children:\"main\"}),` region, but this is not sufficiant enough for sighted users\nwho primarily us`]}),`\n`]}),`\n`,(0,n.jsx)(e.h2,{id:\"imports\",children:\"Imports\"}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-js\",children:`import { SkipNavLink, SkipNavContent } from '@incmix-ui/skip-nav'\n`})}),`\n`,(0,n.jsx)(e.h2,{id:\"usage\",children:\"Usage\"}),`\n`,(0,n.jsxs)(e.p,{children:[\"The \",(0,n.jsx)(e.code,{children:\"SkipNavLink\"}),` component ideally needs to be one of the first items a user\nencounters when they begin navigating a page after load. Therefore, it is\nrecommended to place it as high as possible in the app.`]}),`\n`,(0,n.jsxs)(e.p,{children:[\"It renders an \",(0,n.jsx)(e.code,{children:\"a\"}),\" tag and automatically creates a link with an \",(0,n.jsx)(e.code,{children:\"href\"}),` attribute\nthat will point to `,(0,n.jsx)(e.code,{children:\"SkipNavContent\"}),\".\"]}),`\n`,(0,n.jsxs)(e.p,{children:[\"The \",(0,n.jsx)(e.code,{children:\"SkipNavContent\"}),` component is used as a target for the link to place\nkeyboard focus on the first piece on main content. It renders a `,(0,n.jsx)(e.code,{children:\"div\"}),` and can\neither be a self-closing component, or wrap the main content.`]}),`\n`,(0,n.jsxs)(e.blockquote,{children:[`\n`,(0,n.jsxs)(e.p,{children:[\"You can supply a custom id value using the prop \",(0,n.jsx)(e.code,{children:\"id\"}),` but you will have to use\nthis prop and value in both components, or they will not match. For Example:\n`,(0,n.jsx)(e.code,{children:'id=\"custom-id\"'}),\" renders \",(0,n.jsx)(e.code,{children:'href=\"#custom-id\"'}),\" in \",(0,n.jsx)(e.code,{children:\"SkipNavLink\"}),` and\n`,(0,n.jsx)(e.code,{children:'id=\"custom-id\"'}),\" in \",(0,n.jsx)(e.code,{children:\"SkipNavContent\"}),\".\"]}),`\n`]}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-jsx\",live:\"false\",children:`<>\n  // If you want to make it the first element the user encounters\n  <SkipNavLink>Skip to content</SkipNavLink>\n  <App />\n</>\n\n// And inside another component, like App\n<div>\n  <SkipNavContent />\n  // The main content below\n</div>\n`})}),`\n`,(0,n.jsx)(e.h2,{id:\"in-action\",children:\"In Action\"}),`\n`,(0,n.jsx)(e.p,{children:\"You can see these components in action on this page!\"}),`\n`,(0,n.jsxs)(e.ol,{children:[`\n`,(0,n.jsx)(e.li,{children:\"Place your cursor in the browser's address bar.\"}),`\n`,(0,n.jsxs)(e.li,{children:[\"Remove any id queries from the url. (i.e. \",(0,n.jsx)(e.code,{children:\"/skip-nav#usage\"}),\")\"]}),`\n`,(0,n.jsxs)(e.li,{children:[\"Hit \",(0,n.jsx)(e.code,{children:\"Enter\"}),\" to reload the page, then hit \",(0,n.jsx)(e.code,{children:\"Tab\"}),`. The Skip Nav link will appear\nin the upper left.`]}),`\n`,(0,n.jsxs)(e.li,{children:[\"Hitting \",(0,n.jsx)(e.code,{children:\"Enter\"}),\" on the link will take you to the top of the docs content.\"]}),`\n`]})]})}function w(i={}){let{wrapper:e}=i.components||{};return e?(0,n.jsx)(e,Object.assign({},i,{children:(0,n.jsx)(l,i)})):l(i)}var N=w;return b(S);})();\n;return Component;"
    },
    "_id": "docs/components/skip-nav/usage.mdx",
    "_raw": {
      "sourceFilePath": "docs/components/skip-nav/usage.mdx",
      "sourceFileName": "usage.mdx",
      "sourceFileDir": "docs/components/skip-nav",
      "contentType": "mdx",
      "flattenedPath": "docs/components/skip-nav/usage"
    },
    "type": "Doc",
    "slug": "/docs/components/skip-nav/usage",
    "frontMatter": {
      "title": "Skip Nav",
      "package": "@incmix-ui/skip-nav",
      "description": "Skip Nav Link allows keyboard users to skip to the main content of the page.",
      "slug": "/docs/components/skip-nav/usage",
      "editUrl": "https://github.com/incmix-ui/incmix-ui-docs/tree/main/content/docs/components/skip-nav/usage.mdx",
      "headings": [
        {
          "text": "Imports",
          "id": "imports",
          "level": "h2"
        },
        {
          "text": "Usage",
          "id": "usage",
          "level": "h2"
        },
        {
          "text": "In Action",
          "id": "in-action",
          "level": "h2"
        }
      ]
    }
  },
  {
    "title": "JsonEditor",
    "package": "@incmix/ui",
    "description": "The JsonEditor Component Provides a JSON Editor.",
    "id": "json-editor",
    "scope": "usage",
    "category": "form",
    "body": {
      "raw": "\n## Import\n\n```js\nimport { JsonEditor } from '@incmix/ui'\n```\n\n## Usage\n\nHere's a basic usage example of the `JsonEditor` component:\n\n```tsx\nconst usedJsonString = useJsonString({})\n<JsonEditor placeholder=\"Basic usage\" usedJsonString={usedJsonString} />\n```\n",
      "code": "var Component=(()=>{var l=Object.create;var s=Object.defineProperty;var p=Object.getOwnPropertyDescriptor;var g=Object.getOwnPropertyNames;var u=Object.getPrototypeOf,h=Object.prototype.hasOwnProperty;var x=(n,e)=>()=>(e||n((e={exports:{}}).exports,e),e.exports),J=(n,e)=>{for(var t in e)s(n,t,{get:e[t],enumerable:!0})},c=(n,e,t,i)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let r of g(e))!h.call(n,r)&&r!==t&&s(n,r,{get:()=>e[r],enumerable:!(i=p(e,r))||i.enumerable});return n};var j=(n,e,t)=>(t=n!=null?l(u(n)):{},c(e||!n||!n.__esModule?s(t,\"default\",{value:n,enumerable:!0}):t,n)),f=n=>c(s({},\"__esModule\",{value:!0}),n);var d=x((M,a)=>{a.exports=_jsx_runtime});var b={};J(b,{default:()=>S,frontmatter:()=>_});var o=j(d()),_={id:\"json-editor\",category:\"form\",title:\"JsonEditor\",package:\"@incmix/ui\",description:\"The JsonEditor Component Provides a JSON Editor.\"};function m(n){let e=Object.assign({h2:\"h2\",pre:\"pre\",code:\"code\",p:\"p\"},n.components);return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(e.h2,{id:\"import\",children:\"Import\"}),`\n`,(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:\"language-js\",children:`import { JsonEditor } from '@incmix/ui'\n`})}),`\n`,(0,o.jsx)(e.h2,{id:\"usage\",children:\"Usage\"}),`\n`,(0,o.jsxs)(e.p,{children:[\"Here's a basic usage example of the \",(0,o.jsx)(e.code,{children:\"JsonEditor\"}),\" component:\"]}),`\n`,(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:\"language-tsx\",children:`const usedJsonString = useJsonString({})\n<JsonEditor placeholder=\"Basic usage\" usedJsonString={usedJsonString} />\n`})})]})}function E(n={}){let{wrapper:e}=n.components||{};return e?(0,o.jsx)(e,Object.assign({},n,{children:(0,o.jsx)(m,n)})):m(n)}var S=E;return f(b);})();\n;return Component;"
    },
    "_id": "docs/components/json-editor/usage.mdx",
    "_raw": {
      "sourceFilePath": "docs/components/json-editor/usage.mdx",
      "sourceFileName": "usage.mdx",
      "sourceFileDir": "docs/components/json-editor",
      "contentType": "mdx",
      "flattenedPath": "docs/components/json-editor/usage"
    },
    "type": "Doc",
    "slug": "/docs/components/json-editor/usage",
    "frontMatter": {
      "title": "JsonEditor",
      "package": "@incmix/ui",
      "description": "The JsonEditor Component Provides a JSON Editor.",
      "slug": "/docs/components/json-editor/usage",
      "editUrl": "https://github.com/incmix-ui/incmix-ui-docs/tree/main/content/docs/components/json-editor/usage.mdx",
      "headings": [
        {
          "text": "Import",
          "id": "import",
          "level": "h2"
        },
        {
          "text": "Usage",
          "id": "usage",
          "level": "h2"
        }
      ]
    }
  }
]
