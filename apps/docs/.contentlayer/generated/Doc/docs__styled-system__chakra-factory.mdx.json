{
  "title": "Incmix Factory",
  "package": "@incmix-ui/system",
  "description": "Using the incmix factory and elements",
  "scope": "usage",
  "category": "features",
  "body": {
    "raw": "\nIncmix factory serves as an **object of incmix enabled JSX elements**, and also\n**a function that can be used to enable custom component** receive incmix's\nstyle props.\n\n```bash\nimport { incmix } from \"@incmix-ui/react\"\n```\n\n## Incmix JSX Elements\n\nCreate base html elements with theme-aware style props using `incmix.<element>`\nnotation. For example, if you want a plain html button with ability to pass\nincmix styles, you can write `<incmix.button />`.\n\n```jsx\n<incmix.button px=\"3\" py=\"2\" bg=\"green.200\" rounded=\"md\" _hover={{ bg: 'green.300' }}>\n  Click me\n</incmix.button>\n```\n\nThis reduces the need to create custom component wrappers and name them. This\nsyntax is available for common html elements. See the reference for the full\n[list of elements](https://github.com/incmix-ui/incmix-ui/blob/main/packages/system/src/system.utils.ts#L9)\nsupported.\n\n```jsx live=false\n<incmix.h1 fontSize=\"lg\"> Heading </incmix.h1>\n```\n\n## Incmix factory function\n\nThis is a function that converts **non-incmix components** or **jsx element** to\nincmix-enabled components so you can pass style props to them.\n\nConsider a package called `react-input-autoresize`, let's use the incmix factory\nfunction to make possible to pass style props.\n\nThe function will infer the prop types from the wrapped component and also add\nincmix style props.\n\n```jsx live=false\nimport { incmix } from '@incmix-ui/react'\nimport Textarea from 'react-input-autoresize'\n\nconst AutoResizeInput = incmix(Textarea)\n\nfunction Example() {\n  return <AutoResizeInput bg=\"red.200\" fontSize=\"12px\" />\n}\n```\n\n> Considering that Incmix uses `emotion` under the hood, ensure the non-incmix\n> component accepts `className` as props for this to work correctly\n\n### Attaching styles\n\nIn some instances, you might need to attach specific styles to the component\nwrapped in the incmix factory\n\n```jsx live=false\nconst AutoResizeInput = incmix(AutoResizeInput, {\n  baseStyle: {\n    bg: 'papayawhip',\n    color: 'red.500',\n  },\n})\n```\n\nYou can also use the incmix factory on jsx elements as well.\n\n```jsx live=false\nconst Card = incmix('div', {\n  baseStyle: {\n    shadow: 'lg',\n    rounded: 'lg',\n    bg: 'white',\n  },\n})\n```\n\n### Allowing custom props to be forwarded\n\nBy default, the `incmix` factory only filters incmix related style props from\ngetting to the DOM. For more fine-grained control of how and what prop should be\nforwarded, pass the `shouldForwardProp` option.\n\nHere's a simple example that allows all props (including incmix's style props)\nto pass through except the `sample` prop.\n\n```jsx live=false\nconst Div = incmix('div', {\n  shouldForwardProp: prop => !['sample'].includes(prop),\n})\n```\n\nAnother example that combines the default `shouldForwardProp` from Incmix UI\nwith custom logic.\n\n```jsx live=false\nimport { incmix, shouldForwardProp } from '@incmix-ui/react'\n\nconst Div = incmix('div', {\n  shouldForwardProp: prop => {\n    // don't forward Incmix's props\n    const isIncmixProp = !shouldForwardProp(prop)\n    if (isIncmixProp) return false\n\n    // else, only forward `sample` prop\n    return ['sample'].includes(prop)\n  },\n})\n```\n\nTo filter non-HTML attributes, you can leverage\n[@emotion/is-prop-valid](https://github.com/emotion-js/emotion/tree/master/packages/is-prop-valid)\npackage.\n\n```jsx live=false\nimport isValidHTMLProp from '@emotion/is-prop-valid'\nimport { incmix, shouldForwardProp } from '@incmix-ui/react'\n\nconst Div = incmix('div', {\n  shouldForwardProp: prop => {\n    // don't forward Incmix's props\n    const isIncmixProp = !shouldForwardProp(prop)\n    if (isIncmixProp) return false\n\n    // forward valid HTML props\n    const isValidProp = isValidHTMLProp(prop)\n    if (isValidProp) return true\n\n    // else, only forward `sample` prop\n    return ['sample'].includes(prop)\n  },\n})\n```\n",
    "code": "var Component=(()=>{var d=Object.create;var t=Object.defineProperty;var m=Object.getOwnPropertyDescriptor;var h=Object.getOwnPropertyNames;var u=Object.getPrototypeOf,x=Object.prototype.hasOwnProperty;var f=(o,n)=>()=>(n||o((n={exports:{}}).exports,n),n.exports),g=(o,n)=>{for(var i in n)t(o,i,{get:n[i],enumerable:!0})},c=(o,n,i,s)=>{if(n&&typeof n==\"object\"||typeof n==\"function\")for(let r of h(n))!x.call(o,r)&&r!==i&&t(o,r,{get:()=>n[r],enumerable:!(s=m(n,r))||s.enumerable});return o};var y=(o,n,i)=>(i=o!=null?d(u(o)):{},c(n||!o||!o.__esModule?t(i,\"default\",{value:o,enumerable:!0}):i,o)),w=o=>c(t({},\"__esModule\",{value:!0}),o);var l=f((F,a)=>{a.exports=_jsx_runtime});var I={};g(I,{default:()=>j,frontmatter:()=>b});var e=y(l()),b={title:\"Incmix Factory\",package:\"@incmix-ui/system\",description:\"Using the incmix factory and elements\",category:\"features\"};function p(o){let n=Object.assign({p:\"p\",strong:\"strong\",pre:\"pre\",code:\"code\",h2:\"h2\",a:\"a\",blockquote:\"blockquote\",h3:\"h3\"},o.components);return(0,e.jsxs)(e.Fragment,{children:[(0,e.jsxs)(n.p,{children:[\"Incmix factory serves as an \",(0,e.jsx)(n.strong,{children:\"object of incmix enabled JSX elements\"}),`, and also\n`,(0,e.jsx)(n.strong,{children:\"a function that can be used to enable custom component\"}),` receive incmix's\nstyle props.`]}),`\n`,(0,e.jsx)(n.pre,{children:(0,e.jsx)(n.code,{className:\"language-bash\",children:`import { incmix } from \"@incmix-ui/react\"\n`})}),`\n`,(0,e.jsx)(n.h2,{id:\"incmix-jsx-elements\",children:\"Incmix JSX Elements\"}),`\n`,(0,e.jsxs)(n.p,{children:[\"Create base html elements with theme-aware style props using \",(0,e.jsx)(n.code,{children:\"incmix.<element>\"}),`\nnotation. For example, if you want a plain html button with ability to pass\nincmix styles, you can write `,(0,e.jsx)(n.code,{children:\"<incmix.button />\"}),\".\"]}),`\n`,(0,e.jsx)(n.pre,{children:(0,e.jsx)(n.code,{className:\"language-jsx\",children:`<incmix.button px=\"3\" py=\"2\" bg=\"green.200\" rounded=\"md\" _hover={{ bg: 'green.300' }}>\n  Click me\n</incmix.button>\n`})}),`\n`,(0,e.jsxs)(n.p,{children:[`This reduces the need to create custom component wrappers and name them. This\nsyntax is available for common html elements. See the reference for the full\n`,(0,e.jsx)(n.a,{href:\"https://github.com/incmix-ui/incmix-ui/blob/main/packages/system/src/system.utils.ts#L9\",children:\"list of elements\"}),`\nsupported.`]}),`\n`,(0,e.jsx)(n.pre,{children:(0,e.jsx)(n.code,{className:\"language-jsx\",live:\"false\",children:`<incmix.h1 fontSize=\"lg\"> Heading </incmix.h1>\n`})}),`\n`,(0,e.jsx)(n.h2,{id:\"incmix-factory-function\",children:\"Incmix factory function\"}),`\n`,(0,e.jsxs)(n.p,{children:[\"This is a function that converts \",(0,e.jsx)(n.strong,{children:\"non-incmix components\"}),\" or \",(0,e.jsx)(n.strong,{children:\"jsx element\"}),` to\nincmix-enabled components so you can pass style props to them.`]}),`\n`,(0,e.jsxs)(n.p,{children:[\"Consider a package called \",(0,e.jsx)(n.code,{children:\"react-input-autoresize\"}),`, let's use the incmix factory\nfunction to make possible to pass style props.`]}),`\n`,(0,e.jsx)(n.p,{children:`The function will infer the prop types from the wrapped component and also add\nincmix style props.`}),`\n`,(0,e.jsx)(n.pre,{children:(0,e.jsx)(n.code,{className:\"language-jsx\",live:\"false\",children:`import { incmix } from '@incmix-ui/react'\nimport Textarea from 'react-input-autoresize'\n\nconst AutoResizeInput = incmix(Textarea)\n\nfunction Example() {\n  return <AutoResizeInput bg=\"red.200\" fontSize=\"12px\" />\n}\n`})}),`\n`,(0,e.jsxs)(n.blockquote,{children:[`\n`,(0,e.jsxs)(n.p,{children:[\"Considering that Incmix uses \",(0,e.jsx)(n.code,{children:\"emotion\"}),` under the hood, ensure the non-incmix\ncomponent accepts `,(0,e.jsx)(n.code,{children:\"className\"}),\" as props for this to work correctly\"]}),`\n`]}),`\n`,(0,e.jsx)(n.h3,{id:\"attaching-styles\",children:\"Attaching styles\"}),`\n`,(0,e.jsx)(n.p,{children:`In some instances, you might need to attach specific styles to the component\nwrapped in the incmix factory`}),`\n`,(0,e.jsx)(n.pre,{children:(0,e.jsx)(n.code,{className:\"language-jsx\",live:\"false\",children:`const AutoResizeInput = incmix(AutoResizeInput, {\n  baseStyle: {\n    bg: 'papayawhip',\n    color: 'red.500',\n  },\n})\n`})}),`\n`,(0,e.jsx)(n.p,{children:\"You can also use the incmix factory on jsx elements as well.\"}),`\n`,(0,e.jsx)(n.pre,{children:(0,e.jsx)(n.code,{className:\"language-jsx\",live:\"false\",children:`const Card = incmix('div', {\n  baseStyle: {\n    shadow: 'lg',\n    rounded: 'lg',\n    bg: 'white',\n  },\n})\n`})}),`\n`,(0,e.jsx)(n.h3,{id:\"allowing-custom-props-to-be-forwarded\",children:\"Allowing custom props to be forwarded\"}),`\n`,(0,e.jsxs)(n.p,{children:[\"By default, the \",(0,e.jsx)(n.code,{children:\"incmix\"}),` factory only filters incmix related style props from\ngetting to the DOM. For more fine-grained control of how and what prop should be\nforwarded, pass the `,(0,e.jsx)(n.code,{children:\"shouldForwardProp\"}),\" option.\"]}),`\n`,(0,e.jsxs)(n.p,{children:[`Here's a simple example that allows all props (including incmix's style props)\nto pass through except the `,(0,e.jsx)(n.code,{children:\"sample\"}),\" prop.\"]}),`\n`,(0,e.jsx)(n.pre,{children:(0,e.jsx)(n.code,{className:\"language-jsx\",live:\"false\",children:`const Div = incmix('div', {\n  shouldForwardProp: prop => !['sample'].includes(prop),\n})\n`})}),`\n`,(0,e.jsxs)(n.p,{children:[\"Another example that combines the default \",(0,e.jsx)(n.code,{children:\"shouldForwardProp\"}),` from Incmix UI\nwith custom logic.`]}),`\n`,(0,e.jsx)(n.pre,{children:(0,e.jsx)(n.code,{className:\"language-jsx\",live:\"false\",children:`import { incmix, shouldForwardProp } from '@incmix-ui/react'\n\nconst Div = incmix('div', {\n  shouldForwardProp: prop => {\n    // don't forward Incmix's props\n    const isIncmixProp = !shouldForwardProp(prop)\n    if (isIncmixProp) return false\n\n    // else, only forward \\`sample\\` prop\n    return ['sample'].includes(prop)\n  },\n})\n`})}),`\n`,(0,e.jsxs)(n.p,{children:[`To filter non-HTML attributes, you can leverage\n`,(0,e.jsx)(n.a,{href:\"https://github.com/emotion-js/emotion/tree/master/packages/is-prop-valid\",children:\"@emotion/is-prop-valid\"}),`\npackage.`]}),`\n`,(0,e.jsx)(n.pre,{children:(0,e.jsx)(n.code,{className:\"language-jsx\",live:\"false\",children:`import isValidHTMLProp from '@emotion/is-prop-valid'\nimport { incmix, shouldForwardProp } from '@incmix-ui/react'\n\nconst Div = incmix('div', {\n  shouldForwardProp: prop => {\n    // don't forward Incmix's props\n    const isIncmixProp = !shouldForwardProp(prop)\n    if (isIncmixProp) return false\n\n    // forward valid HTML props\n    const isValidProp = isValidHTMLProp(prop)\n    if (isValidProp) return true\n\n    // else, only forward \\`sample\\` prop\n    return ['sample'].includes(prop)\n  },\n})\n`})})]})}function v(o={}){let{wrapper:n}=o.components||{};return n?(0,e.jsx)(n,Object.assign({},o,{children:(0,e.jsx)(p,o)})):p(o)}var j=v;return w(I);})();\n;return Component;"
  },
  "_id": "docs/styled-system/chakra-factory.mdx",
  "_raw": {
    "sourceFilePath": "docs/styled-system/chakra-factory.mdx",
    "sourceFileName": "chakra-factory.mdx",
    "sourceFileDir": "docs/styled-system",
    "contentType": "mdx",
    "flattenedPath": "docs/styled-system/chakra-factory"
  },
  "type": "Doc",
  "slug": "/docs/styled-system/chakra-factory",
  "frontMatter": {
    "title": "Incmix Factory",
    "package": "@incmix-ui/system",
    "description": "Using the incmix factory and elements",
    "slug": "/docs/styled-system/chakra-factory",
    "editUrl": "https://github.com/incmix-ui/incmix-ui-docs/tree/main/content/docs/styled-system/chakra-factory.mdx",
    "headings": [
      {
        "text": "Incmix JSX Elements",
        "id": "incmix-jsx-elements",
        "level": "h2"
      },
      {
        "text": "Incmix factory function",
        "id": "incmix-factory-function",
        "level": "h2"
      },
      {
        "text": "Attaching styles",
        "id": "attaching-styles",
        "level": "h3"
      },
      {
        "text": "Allowing custom props to be forwarded",
        "id": "allowing-custom-props-to-be-forwarded",
        "level": "h3"
      }
    ]
  }
}
