{
  "title": "useOutsideClick",
  "package": "@incmix-ui/hooks",
  "description": "React hook to detect clicks outside of a specified element.",
  "scope": "usage",
  "body": {
    "raw": "\n`useOutsideClick` is a custom hook that handles click events outside a specific\nDOM element, like a `div`. A handler is invoked when a click or touch event\nhappens outside the referenced element.\n\n> This hook is compatible with mouse and touch events.\n\n## Import\n\n```js\nimport { useOutsideClick } from '@incmix-ui/react'\n```\n\n## Usage\n\n```jsx\nfunction Example() {\n  const ref = React.useRef()\n  const [isModalOpen, setIsModalOpen] = React.useState(false)\n  useOutsideClick({\n    ref: ref,\n    handler: () => setIsModalOpen(false),\n  })\n\n  return (\n    <>\n      {isModalOpen ? (\n        <div ref={ref}>ðŸ‘‹ Hey, I'm a modal. Click anywhere outside of me to close.</div>\n      ) : (\n        <button onClick={() => setIsModalOpen(true)}>Open Modal</button>\n      )}\n    </>\n  )\n}\n```\n\n## Parameters\n\nThe `useOutsideClick` hook accepts an object with the following properties:\n\n<PropsTable of=\"useOutsideClick\" />\n",
    "code": "var Component=(()=>{var u=Object.create;var s=Object.defineProperty;var h=Object.getOwnPropertyDescriptor;var p=Object.getOwnPropertyNames;var m=Object.getPrototypeOf,f=Object.prototype.hasOwnProperty;var k=(n,e)=>()=>(e||n((e={exports:{}}).exports,e),e.exports),b=(n,e)=>{for(var o in e)s(n,o,{get:e[o],enumerable:!0})},r=(n,e,o,c)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let i of p(e))!f.call(n,i)&&i!==o&&s(n,i,{get:()=>e[i],enumerable:!(c=h(e,i))||c.enumerable});return n};var x=(n,e,o)=>(o=n!=null?u(m(n)):{},r(e||!n||!n.__esModule?s(o,\"default\",{value:n,enumerable:!0}):o,n)),O=n=>r(s({},\"__esModule\",{value:!0}),n);var d=k((w,a)=>{a.exports=_jsx_runtime});var C={};b(C,{default:()=>_,frontmatter:()=>g});var t=x(d()),g={title:\"useOutsideClick\",package:\"@incmix-ui/hooks\",description:\"React hook to detect clicks outside of a specified element.\"};function l(n){let e=Object.assign({p:\"p\",code:\"code\",blockquote:\"blockquote\",h2:\"h2\",pre:\"pre\"},n.components),{PropsTable:o}=e;return o||M(\"PropsTable\",!0,\"46:1-46:36\"),(0,t.jsxs)(t.Fragment,{children:[(0,t.jsxs)(e.p,{children:[(0,t.jsx)(e.code,{children:\"useOutsideClick\"}),` is a custom hook that handles click events outside a specific\nDOM element, like a `,(0,t.jsx)(e.code,{children:\"div\"}),`. A handler is invoked when a click or touch event\nhappens outside the referenced element.`]}),`\n`,(0,t.jsxs)(e.blockquote,{children:[`\n`,(0,t.jsx)(e.p,{children:\"This hook is compatible with mouse and touch events.\"}),`\n`]}),`\n`,(0,t.jsx)(e.h2,{id:\"import\",children:\"Import\"}),`\n`,(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:\"language-js\",children:`import { useOutsideClick } from '@incmix-ui/react'\n`})}),`\n`,(0,t.jsx)(e.h2,{id:\"usage\",children:\"Usage\"}),`\n`,(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:\"language-jsx\",children:`function Example() {\n  const ref = React.useRef()\n  const [isModalOpen, setIsModalOpen] = React.useState(false)\n  useOutsideClick({\n    ref: ref,\n    handler: () => setIsModalOpen(false),\n  })\n\n  return (\n    <>\n      {isModalOpen ? (\n        <div ref={ref}>\\u{1F44B} Hey, I'm a modal. Click anywhere outside of me to close.</div>\n      ) : (\n        <button onClick={() => setIsModalOpen(true)}>Open Modal</button>\n      )}\n    </>\n  )\n}\n`})}),`\n`,(0,t.jsx)(e.h2,{id:\"parameters\",children:\"Parameters\"}),`\n`,(0,t.jsxs)(e.p,{children:[\"The \",(0,t.jsx)(e.code,{children:\"useOutsideClick\"}),\" hook accepts an object with the following properties:\"]}),`\n`,(0,t.jsx)(o,{of:\"useOutsideClick\"})]})}function j(n={}){let{wrapper:e}=n.components||{};return e?(0,t.jsx)(e,Object.assign({},n,{children:(0,t.jsx)(l,n)})):l(n)}var _=j;function M(n,e,o){throw new Error(\"Expected \"+(e?\"component\":\"object\")+\" `\"+n+\"` to be defined: you likely forgot to import, pass, or provide it.\"+(o?\"\\nIt\\u2019s referenced in your code at `\"+o+\"` in `/Users/uma.krishnan/projects/incmixlabs/incmix-ui/apps/docs/content/_mdx_bundler_entry_point-370297e1-e09b-49a9-b104-1449c16a6b5b.mdx`\":\"\"))}return O(C);})();\n;return Component;"
  },
  "_id": "docs/hooks/use-outside-click.mdx",
  "_raw": {
    "sourceFilePath": "docs/hooks/use-outside-click.mdx",
    "sourceFileName": "use-outside-click.mdx",
    "sourceFileDir": "docs/hooks",
    "contentType": "mdx",
    "flattenedPath": "docs/hooks/use-outside-click"
  },
  "type": "Doc",
  "slug": "/docs/hooks/use-outside-click",
  "frontMatter": {
    "title": "useOutsideClick",
    "package": "@incmix-ui/hooks",
    "description": "React hook to detect clicks outside of a specified element.",
    "slug": "/docs/hooks/use-outside-click",
    "editUrl": "https://github.com/incmix-ui/incmix-ui-docs/tree/main/content/docs/hooks/use-outside-click.mdx",
    "headings": [
      {
        "text": "Import",
        "id": "import",
        "level": "h2"
      },
      {
        "text": "Usage",
        "id": "usage",
        "level": "h2"
      },
      {
        "text": "Parameters",
        "id": "parameters",
        "level": "h2"
      }
    ]
  }
}
