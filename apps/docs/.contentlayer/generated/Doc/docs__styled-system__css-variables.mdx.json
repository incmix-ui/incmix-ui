{
  "title": "CSS Variables",
  "description": "Working with color mode (light and dark mode) in Incmix UI",
  "scope": "usage",
  "category": "features",
  "body": {
    "raw": "\nIncmix UI now converts theme tokens (colors, font sizes, etc) to CSS Custom\nProperties (also known as \"CSS variables\").\n\nCSS variables are now supported in all modern browsers, and we think they are\nuseful to:\n\n- avoid prop interpolations;\n- avoid classname regeneration from\n  [emotion](https://emotion.sh/docs/introduction);\n- reduce runtime evaluation of token values in Theme context;\n- use theme token outside Incmix's component (embedded forms, markdown content,\n  etc.)\n\n## Overview\n\nThere are three main components you should know about when using CSS variables:\n\n- How Incmix converts tokens to custom properties\n- How to consume them in and outside Incmix's component\n- Where we attach the custom properties to\n\n## Converting theme tokens to CSS variables\n\nBy default, Incmix UI converts theme tokens defined in your theme (or our\ndefault theme) to CSS variables internally so you don't have to.\n\nGiven a theme object that looks like this:\n\n```jsx live=false\nconst theme = {\n  fontSizes: {\n    lg: '18px',\n  },\n  colors: {\n    gray: {\n      100: '#fafafa',\n      200: '#f7f7f7',\n    },\n  },\n}\n```\n\nWhen you pass this theme to the `IncmixProvider`, we'll automatically generate\nCSS variables that look like:\n\n```css\n:root {\n  --incmix-fontSizes-lg: '18px';\n  --incmix-colors-gray-100: '#fafafa';\n  --incmix-colors-gray-200: '#f7f7f7';\n}\n```\n\n> Note: **The generated custom properties are prefixed with `incmix-*`** to\n> avoid conflicts with third party CSS.\n\n## Consuming CSS Variables\n\nWhen using Incmix's components, we manage the conversion of theme tokens to\ntheir respective css variable.\n\n```jsx live=false\n// You type this\n<Box color=\"gray.100\" />\n\n// Incmix generates something like\n.css-box {\n   color: \"var(--incmix-colors-gray-100)\"\n}\n```\n\n> Note: We do this automatically when you pass style props or use the `sx` prop.\n\n### Styling non-incmix components\n\nIn certain scenarios, you might need to style components that are not managed by\nIncmix. In this case, you can use the raw CSS variable values.\n\n```jsx live=false\n// let's say you have an embedded form\n<FormiumForm />\n```\n\nYou can write custom CSS to style the components\n\n```css\n.formium-form {\n  color: var(--incmix-colors-gray-700);\n  background-color: var(--incmix-colors-gray-50);\n}\n```\n\nor wrap the component in `<Box/>` and style it with convenience.\n\n```jsx live=false\n<Box sx={{ '.formium': { bg: 'gray.50', color: 'gray.700' } }}>\n  <FormiumForm />\n</Box>\n```\n\n## Attaching the CSS variables\n\nBy default, Incmix attaches the generated CSS variables to the `:root` element.\n\n> The :root pseudo-class represents the top level of the HTML document.\n\nTo change the root element that Incmix attaches the CSS variables to, pass the\n`cssVarsRoot` prop to `IncmixProvider` and set its value to the css selector of\nthe element you want.\n\n```jsx live=false\n<IncmixProvider cssVarsRoot=\"#app\">\n  <App />\n</IncmixProvider>\n```\n\n## Creating scoped, theme-aware CSS variables\n\n> This is experimental and might be removed in future versions\n\nWhen using the `sx` prop or the `incmix(...)` factory, you can create variables\nthat reference theme tokens. This makes it possible to change property values\nbased on breakpoint, or light/dark mode with ease.\n\n```jsx live=false\n<Box\n  sx={{\n    // \"colors.gray.100\" is shorthand for `var(--incmix-colors-gray.100)`\n    '--banner-color': 'colors.gray.100',\n    '.external-banner': {\n      bg: 'var(--banner-color)',\n      '.button': {\n        borderColor: 'var(--banner-color)',\n      },\n    },\n  }}\n>\n  <ExternalBanner />\n</Box>\n```\n",
    "code": "var Component=(()=>{var d=Object.create;var i=Object.defineProperty;var m=Object.getOwnPropertyDescriptor;var p=Object.getOwnPropertyNames;var u=Object.getPrototypeOf,g=Object.prototype.hasOwnProperty;var v=(o,e)=>()=>(e||o((e={exports:{}}).exports,e),e.exports),x=(o,e)=>{for(var r in e)i(o,r,{get:e[r],enumerable:!0})},c=(o,e,r,a)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let t of p(e))!g.call(o,t)&&t!==r&&i(o,t,{get:()=>e[t],enumerable:!(a=m(e,t))||a.enumerable});return o};var f=(o,e,r)=>(r=o!=null?d(u(o)):{},c(e||!o||!o.__esModule?i(r,\"default\",{value:o,enumerable:!0}):r,o)),b=o=>c(i({},\"__esModule\",{value:!0}),o);var l=v((I,s)=>{s.exports=_jsx_runtime});var w={};x(w,{default:()=>k,frontmatter:()=>y});var n=f(l()),y={title:\"CSS Variables\",description:\"Working with color mode (light and dark mode) in Incmix UI\",category:\"features\"};function h(o){let e=Object.assign({p:\"p\",ul:\"ul\",li:\"li\",a:\"a\",h2:\"h2\",pre:\"pre\",code:\"code\",blockquote:\"blockquote\",strong:\"strong\",h3:\"h3\"},o.components);return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(e.p,{children:`Incmix UI now converts theme tokens (colors, font sizes, etc) to CSS Custom\nProperties (also known as \"CSS variables\").`}),`\n`,(0,n.jsx)(e.p,{children:`CSS variables are now supported in all modern browsers, and we think they are\nuseful to:`}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsx)(e.li,{children:\"avoid prop interpolations;\"}),`\n`,(0,n.jsxs)(e.li,{children:[`avoid classname regeneration from\n`,(0,n.jsx)(e.a,{href:\"https://emotion.sh/docs/introduction\",children:\"emotion\"}),\";\"]}),`\n`,(0,n.jsx)(e.li,{children:\"reduce runtime evaluation of token values in Theme context;\"}),`\n`,(0,n.jsx)(e.li,{children:`use theme token outside Incmix's component (embedded forms, markdown content,\netc.)`}),`\n`]}),`\n`,(0,n.jsx)(e.h2,{id:\"overview\",children:\"Overview\"}),`\n`,(0,n.jsx)(e.p,{children:\"There are three main components you should know about when using CSS variables:\"}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsx)(e.li,{children:\"How Incmix converts tokens to custom properties\"}),`\n`,(0,n.jsx)(e.li,{children:\"How to consume them in and outside Incmix's component\"}),`\n`,(0,n.jsx)(e.li,{children:\"Where we attach the custom properties to\"}),`\n`]}),`\n`,(0,n.jsx)(e.h2,{id:\"converting-theme-tokens-to-css-variables\",children:\"Converting theme tokens to CSS variables\"}),`\n`,(0,n.jsx)(e.p,{children:`By default, Incmix UI converts theme tokens defined in your theme (or our\ndefault theme) to CSS variables internally so you don't have to.`}),`\n`,(0,n.jsx)(e.p,{children:\"Given a theme object that looks like this:\"}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-jsx\",live:\"false\",children:`const theme = {\n  fontSizes: {\n    lg: '18px',\n  },\n  colors: {\n    gray: {\n      100: '#fafafa',\n      200: '#f7f7f7',\n    },\n  },\n}\n`})}),`\n`,(0,n.jsxs)(e.p,{children:[\"When you pass this theme to the \",(0,n.jsx)(e.code,{children:\"IncmixProvider\"}),`, we'll automatically generate\nCSS variables that look like:`]}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-css\",children:`:root {\n  --incmix-fontSizes-lg: '18px';\n  --incmix-colors-gray-100: '#fafafa';\n  --incmix-colors-gray-200: '#f7f7f7';\n}\n`})}),`\n`,(0,n.jsxs)(e.blockquote,{children:[`\n`,(0,n.jsxs)(e.p,{children:[\"Note: \",(0,n.jsxs)(e.strong,{children:[\"The generated custom properties are prefixed with \",(0,n.jsx)(e.code,{children:\"incmix-*\"})]}),` to\navoid conflicts with third party CSS.`]}),`\n`]}),`\n`,(0,n.jsx)(e.h2,{id:\"consuming-css-variables\",children:\"Consuming CSS Variables\"}),`\n`,(0,n.jsx)(e.p,{children:`When using Incmix's components, we manage the conversion of theme tokens to\ntheir respective css variable.`}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-jsx\",live:\"false\",children:`// You type this\n<Box color=\"gray.100\" />\n\n// Incmix generates something like\n.css-box {\n   color: \"var(--incmix-colors-gray-100)\"\n}\n`})}),`\n`,(0,n.jsxs)(e.blockquote,{children:[`\n`,(0,n.jsxs)(e.p,{children:[\"Note: We do this automatically when you pass style props or use the \",(0,n.jsx)(e.code,{children:\"sx\"}),\" prop.\"]}),`\n`]}),`\n`,(0,n.jsx)(e.h3,{id:\"styling-non-incmix-components\",children:\"Styling non-incmix components\"}),`\n`,(0,n.jsx)(e.p,{children:`In certain scenarios, you might need to style components that are not managed by\nIncmix. In this case, you can use the raw CSS variable values.`}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-jsx\",live:\"false\",children:`// let's say you have an embedded form\n<FormiumForm />\n`})}),`\n`,(0,n.jsx)(e.p,{children:\"You can write custom CSS to style the components\"}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-css\",children:`.formium-form {\n  color: var(--incmix-colors-gray-700);\n  background-color: var(--incmix-colors-gray-50);\n}\n`})}),`\n`,(0,n.jsxs)(e.p,{children:[\"or wrap the component in \",(0,n.jsx)(e.code,{children:\"<Box/>\"}),\" and style it with convenience.\"]}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-jsx\",live:\"false\",children:`<Box sx={{ '.formium': { bg: 'gray.50', color: 'gray.700' } }}>\n  <FormiumForm />\n</Box>\n`})}),`\n`,(0,n.jsx)(e.h2,{id:\"attaching-the-css-variables\",children:\"Attaching the CSS variables\"}),`\n`,(0,n.jsxs)(e.p,{children:[\"By default, Incmix attaches the generated CSS variables to the \",(0,n.jsx)(e.code,{children:\":root\"}),\" element.\"]}),`\n`,(0,n.jsxs)(e.blockquote,{children:[`\n`,(0,n.jsx)(e.p,{children:\"The :root pseudo-class represents the top level of the HTML document.\"}),`\n`]}),`\n`,(0,n.jsxs)(e.p,{children:[`To change the root element that Incmix attaches the CSS variables to, pass the\n`,(0,n.jsx)(e.code,{children:\"cssVarsRoot\"}),\" prop to \",(0,n.jsx)(e.code,{children:\"IncmixProvider\"}),` and set its value to the css selector of\nthe element you want.`]}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-jsx\",live:\"false\",children:`<IncmixProvider cssVarsRoot=\"#app\">\n  <App />\n</IncmixProvider>\n`})}),`\n`,(0,n.jsx)(e.h2,{id:\"creating-scoped-theme-aware-css-variables\",children:\"Creating scoped, theme-aware CSS variables\"}),`\n`,(0,n.jsxs)(e.blockquote,{children:[`\n`,(0,n.jsx)(e.p,{children:\"This is experimental and might be removed in future versions\"}),`\n`]}),`\n`,(0,n.jsxs)(e.p,{children:[\"When using the \",(0,n.jsx)(e.code,{children:\"sx\"}),\" prop or the \",(0,n.jsx)(e.code,{children:\"incmix(...)\"}),` factory, you can create variables\nthat reference theme tokens. This makes it possible to change property values\nbased on breakpoint, or light/dark mode with ease.`]}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-jsx\",live:\"false\",children:`<Box\n  sx={{\n    // \"colors.gray.100\" is shorthand for \\`var(--incmix-colors-gray.100)\\`\n    '--banner-color': 'colors.gray.100',\n    '.external-banner': {\n      bg: 'var(--banner-color)',\n      '.button': {\n        borderColor: 'var(--banner-color)',\n      },\n    },\n  }}\n>\n  <ExternalBanner />\n</Box>\n`})})]})}function S(o={}){let{wrapper:e}=o.components||{};return e?(0,n.jsx)(e,Object.assign({},o,{children:(0,n.jsx)(h,o)})):h(o)}var k=S;return b(w);})();\n;return Component;"
  },
  "_id": "docs/styled-system/css-variables.mdx",
  "_raw": {
    "sourceFilePath": "docs/styled-system/css-variables.mdx",
    "sourceFileName": "css-variables.mdx",
    "sourceFileDir": "docs/styled-system",
    "contentType": "mdx",
    "flattenedPath": "docs/styled-system/css-variables"
  },
  "type": "Doc",
  "slug": "/docs/styled-system/css-variables",
  "frontMatter": {
    "title": "CSS Variables",
    "description": "Working with color mode (light and dark mode) in Incmix UI",
    "slug": "/docs/styled-system/css-variables",
    "editUrl": "https://github.com/incmix-ui/incmix-ui-docs/tree/main/content/docs/styled-system/css-variables.mdx",
    "headings": [
      {
        "text": "Overview",
        "id": "overview",
        "level": "h2"
      },
      {
        "text": "Converting theme tokens to CSS variables",
        "id": "converting-theme-tokens-to-css-variables",
        "level": "h2"
      },
      {
        "text": "Consuming CSS Variables",
        "id": "consuming-css-variables",
        "level": "h2"
      },
      {
        "text": "Styling non-incmix components",
        "id": "styling-non-incmix-components",
        "level": "h3"
      },
      {
        "text": "Attaching the CSS variables",
        "id": "attaching-the-css-variables",
        "level": "h2"
      },
      {
        "text": "Creating scoped, theme-aware CSS variables",
        "id": "creating-scoped-theme-aware-css-variables",
        "level": "h2"
      }
    ]
  }
}
