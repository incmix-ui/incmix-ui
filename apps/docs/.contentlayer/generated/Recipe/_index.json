[
  {
    "title": "Advanced Formik integration",
    "description": "Advanced customization and integration of Incmix UI and Formik.",
    "tags": ["formik", "form", "integration"],
    "author": "aacevski",
    "body": {
      "raw": "\nIncmix UI can be coupled smoothly with [Formik](https://formik.org/), by the end\nof the example up ahead, you will be proficient at Incmix & Formik.\n\nIn the `ImageRadio` component, we will utilize the `useRadio` hook from Incmix\nUI to get the necessary props and the `isChecked` boolean. `isChecked` will be\nused for validation in Formik's `useField` hook.\n\nTo finalize, we will need to render our content and pass `getInputProps` and\n`getCheckedProps` from Incmix UI.\n\nimport {\n  App as AppValidation,\n  Index as IndexValidation,\n  ImageRadio as ImageRadioValidation,\n  RadioGroup as RadioGroupValidation,\n  Input as InputValidation,\n} from 'configs/sandpack-contents/advanced-formik-integration/image-radio-buttons'\n\n<SandpackEmbed\n  dependencies={{\n    formik: '2.2.9',\n  }}\n  files={{\n    '/App.tsx': AppValidation,\n    '/index.tsx': IndexValidation,\n    '/image-radio.tsx': ImageRadioValidation,\n    '/radio-group.tsx': RadioGroupValidation,\n    '/input.tsx': InputValidation,\n  }}\n/>\n\nIn the example above, there are 2 more components:\n\n- `Radio Group` - which renders multiple radio buttons\n- `Input` - where we will enter our value of choice\n\nUpon submitting the form, in the CodeSandbox console, you should see the result\nof which radio you've selected but also the value of the input.\n\n> If you have any questions, or need help around an advanced usage, don't\n> hesitate to reach out in our [Discord server](https://discord.gg/incmix-ui).\n",
      "code": "var Component=(()=>{var g=Object.create;var a=Object.defineProperty;var x=Object.getOwnPropertyDescriptor;var I=Object.getOwnPropertyNames;var R=Object.getPrototypeOf,k=Object.prototype.hasOwnProperty;var d=(i,e)=>()=>(e||i((e={exports:{}}).exports,e),e.exports),b=(i,e)=>{for(var r in e)a(i,r,{get:e[r],enumerable:!0})},m=(i,e,r,p)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let t of I(e))!k.call(i,t)&&t!==r&&a(i,t,{get:()=>e[t],enumerable:!(p=x(e,t))||p.enumerable});return i};var s=(i,e,r)=>(r=i!=null?g(R(i)):{},m(e||!i||!i.__esModule?a(r,\"default\",{value:i,enumerable:!0}):r,i)),P=i=>m(a({},\"__esModule\",{value:!0}),i);var u=d((G,c)=>{c.exports=_jsx_runtime});var h=d((V,l)=>{l.exports={ImageRadio:`import { useField } from \"formik\";\nimport {\n  Box,\n  Image,\n  UseRadioProps,\n  useRadio,\n  ImageProps,\n  incmix,\n  useRadioGroupContext,\n} from \"@incmix-ui/react\";\nimport * as React from \"react\";\n\ntype Props = UseRadioProps &\n  ImageProps & {\n    image: string,\n  };\n\nconst ImageRadio = React.forwardRef((props: Props, ref) => {\n  const { image, name, ...radioProps } = props;\n  const group = useRadioGroupContext();\n\n  let isChecked = group.value.toString() === props.value.toString();\n\n  const [{ checked, ...field }] = useField({\n    name,\n    type: \"radio\",\n    value: radioProps.value.toString(),\n    checked: isChecked,\n  });\n\n  const { state, getInputProps, getCheckboxProps, htmlProps, getLabelProps } =\n    useRadio({\n      isChecked: isChecked,\n      ...field,\n    });\n\n  return (\n    <incmix.label {...htmlProps} cursor=\"pointer\">\n      <input {...getInputProps({}, ref)} hidden />\n      <Box\n        {...getCheckboxProps()}\n        bg={state.isChecked ? \"green.200\" : \"transparent\"}\n        w={12}\n        p={1}\n        rounded=\"full\"\n      >\n        <Image src={image} rounded=\"full\" {...getLabelProps()} />\n      </Box>\n    </incmix.label>\n  );\n});\n\nexport default ImageRadio;`,RadioGroup:`import { useField } from \"formik\";\nimport {\n  RadioGroup as IncmixRadioGroup,\n  RadioGroupProps as IncmixRadioGroupProps,\n} from \"@incmix-ui/react\";\nimport * as React from \"react\";\n\ntype Props = IncmixRadioGroupProps;\n\nconst RadioGroup = ({ name, children, ...props }: Props) => {\n  const [field, , { setValue }] = useField({ name, value: props.value });\n\n  const namedChildren = React.Children.map(children, (child) => {\n    if (!React.isValidElement(child)) return;\n\n    return React.cloneElement(child, {\n      name,\n    });\n  });\n\n  return (\n    <IncmixRadioGroup\n      {...props}\n      {...field}\n      onChange={setValue}\n      children={namedChildren}\n    />\n  );\n};\n\nexport default RadioGroup;`,Input:`import { FieldHookConfig, useField } from \"formik\";\nimport {\n  Input as IncmixInput,\n  InputProps as IncmixInputProps,\n} from \"@incmix-ui/react\";\n\ntype Props = IncmixInputProps & FieldHookConfig<\"input\">;\n\nconst Input = ({ name, ...props }: Props) => {\n  const [field] = useField(name);\n  return <IncmixInput {...props} {...field} />;\n};\n\nexport default Input;`,App:`import { Box, Button } from \"@incmix-ui/react\";\nimport { Formik, FormikProps } from \"formik\";\n\nimport Input from \"./input\";\nimport RadioGroup from \"./radio-group\";\nimport ImageRadio from \"./image-radio\";\n\nconst AVATARS = [\n  { name: \"Kat\", image: \"https://randomuser.me/api/portraits/women/44.jpg\" },\n  { name: \"Kevin\", image: \"https://randomuser.me/api/portraits/men/86.jpg\" },\n  { name: \"Andy\", image: \"https://randomuser.me/api/portraits/men/29.jpg\" },\n  { name: \"Jess\", image: \"https://randomuser.me/api/portraits/women/95.jpg\" }\n];\n\ntype Values = {\n  email: string;\n  avatar: string;\n};\n\nexport default function App() {\n  return (\n    <Box p={24}>\n      <Formik\n        initialValues={{ email: \"\", avatar: AVATARS[0].name }}\n        onSubmit={console.log}\n      >\n        {(props: FormikProps<Values>) => (\n          <form onSubmit={props.handleSubmit}>\n            <Input name=\"email\" />\n            <RadioGroup name=\"avatar\" py={2} display=\"flex\" gridColumnGap={2}>\n              {AVATARS.map(({ name, image }) => {\n                console.log(\"App line 32 ~ name: \", name)\n                return (\n                <ImageRadio key={image} image={image} value={name} />\n              )})}\n            </RadioGroup>\n            <Button type=\"submit\">Submit</Button>\n          </form>\n        )}\n      </Formik>\n    </Box>\n  );\n}`,Index:`import * as React from \"react\";\nimport { createRoot } from \"react-dom/client\";\nimport { IncmixProvider } from \"@incmix-ui/react\";\n\nimport App from \"./App\";\n\nconst container = document.getElementById(\"root\");\nconst root = createRoot(container!);\nroot.render(\n  <IncmixProvider>\n    <App />\n  </IncmixProvider>\n);`}});var F={};b(F,{default:()=>C,frontmatter:()=>v});var o=s(u()),n=s(h()),v={title:\"Advanced Formik integration\",description:\"Advanced customization and integration of Incmix UI and Formik.\",tags:[\"formik\",\"form\",\"integration\"],author:\"aacevski\"};function f(i){let e=Object.assign({p:\"p\",a:\"a\",code:\"code\",ul:\"ul\",li:\"li\",blockquote:\"blockquote\"},i.components),{SandpackEmbed:r}=e;return r||A(\"SandpackEmbed\",!0,\"26:1-37:3\"),(0,o.jsxs)(o.Fragment,{children:[(0,o.jsxs)(e.p,{children:[\"Incmix UI can be coupled smoothly with \",(0,o.jsx)(e.a,{href:\"https://formik.org/\",children:\"Formik\"}),`, by the end\nof the example up ahead, you will be proficient at Incmix & Formik.`]}),`\n`,(0,o.jsxs)(e.p,{children:[\"In the \",(0,o.jsx)(e.code,{children:\"ImageRadio\"}),\" component, we will utilize the \",(0,o.jsx)(e.code,{children:\"useRadio\"}),` hook from Incmix\nUI to get the necessary props and the `,(0,o.jsx)(e.code,{children:\"isChecked\"}),\" boolean. \",(0,o.jsx)(e.code,{children:\"isChecked\"}),` will be\nused for validation in Formik's `,(0,o.jsx)(e.code,{children:\"useField\"}),\" hook.\"]}),`\n`,(0,o.jsxs)(e.p,{children:[\"To finalize, we will need to render our content and pass \",(0,o.jsx)(e.code,{children:\"getInputProps\"}),` and\n`,(0,o.jsx)(e.code,{children:\"getCheckedProps\"}),\" from Incmix UI.\"]}),`\n`,`\n`,(0,o.jsx)(r,{dependencies:{formik:\"2.2.9\"},files:{\"/App.tsx\":n.App,\"/index.tsx\":n.Index,\"/image-radio.tsx\":n.ImageRadio,\"/radio-group.tsx\":n.RadioGroup,\"/input.tsx\":n.Input}}),`\n`,(0,o.jsx)(e.p,{children:\"In the example above, there are 2 more components:\"}),`\n`,(0,o.jsxs)(e.ul,{children:[`\n`,(0,o.jsxs)(e.li,{children:[(0,o.jsx)(e.code,{children:\"Radio Group\"}),\" - which renders multiple radio buttons\"]}),`\n`,(0,o.jsxs)(e.li,{children:[(0,o.jsx)(e.code,{children:\"Input\"}),\" - where we will enter our value of choice\"]}),`\n`]}),`\n`,(0,o.jsx)(e.p,{children:`Upon submitting the form, in the CodeSandbox console, you should see the result\nof which radio you've selected but also the value of the input.`}),`\n`,(0,o.jsxs)(e.blockquote,{children:[`\n`,(0,o.jsxs)(e.p,{children:[`If you have any questions, or need help around an advanced usage, don't\nhesitate to reach out in our `,(0,o.jsx)(e.a,{href:\"https://discord.gg/incmix-ui\",children:\"Discord server\"}),\".\"]}),`\n`]})]})}function y(i={}){let{wrapper:e}=i.components||{};return e?(0,o.jsx)(e,Object.assign({},i,{children:(0,o.jsx)(f,i)})):f(i)}var C=y;function A(i,e,r){throw new Error(\"Expected \"+(e?\"component\":\"object\")+\" `\"+i+\"` to be defined: you likely forgot to import, pass, or provide it.\"+(r?\"\\nIt\\u2019s referenced in your code at `\"+r+\"` in `/Users/uma.krishnan/projects/incmixlabs/incmix-ui/apps/docs/content/_mdx_bundler_entry_point-be8ba9f1-ba9c-4f5b-96c8-1201ef0a9404.mdx`\":\"\"))}return P(F);})();\n;return Component;"
    },
    "_id": "community/recipes/advanced-formik-integration.mdx",
    "_raw": {
      "sourceFilePath": "community/recipes/advanced-formik-integration.mdx",
      "sourceFileName": "advanced-formik-integration.mdx",
      "sourceFileDir": "community/recipes",
      "contentType": "mdx",
      "flattenedPath": "community/recipes/advanced-formik-integration"
    },
    "type": "Recipe",
    "slug": "/community/recipes/advanced-formik-integration",
    "frontMatter": {
      "title": "Advanced Formik integration",
      "description": "Advanced customization and integration of Incmix UI and Formik.",
      "tags": ["formik", "form", "integration"],
      "author": "aacevski",
      "slug": "/community/community/recipes/advanced-formik-integration",
      "editUrl": "https://github.com/incmix-ui/incmix-ui-docs/tree/main/content/community/recipes/advanced-formik-integration.mdx",
      "headings": []
    }
  },
  {
    "title": "The as prop and Custom component",
    "description": "How to get the as prop working properly for your custom components",
    "author": "segunadebayo",
    "body": {
      "raw": "\nBy default, all Incmix components work with the `as` prop. There might be some\ncases where you need to create smaller components with pre-defined styles, and\nneed the `as` prop to work as well.\n\nFor example, let's say you create a `Card` component with pre-defined styles\nlike this:\n\n```tsx live=false\nconst Card = (props: BoxProps) => <Box px=\"4\" py=\"5\" rounded=\"sm\" shadow=\"lg\" {...props} />\n```\n\nand you need to consume this component in a way that works with the `as` prop,\nlike this:\n\n```jsx live=false\nconst Usage = () => <Card as=\"button\">This is a card</Card>\n```\n\nYou might run into type errors like this:\n\n```sh\nType '{ children: string; as: string; }' is not assignable to type 'IntrinsicAttributes & BoxProps'.\n  Property 'as' does not exist on type 'IntrinsicAttributes & BoxProps'.\n```\n\nTo resolve this, you have 3 options\n\n## Option 1: Using `forwardRef` from `@incmix-ui/react`\n\nThis is the recommended approach as it ensures your components forwards their\nreference properly.\n\n> Note 🚨: You need to use forwardRef from incmix-ui not react.\n\n```tsx live=false\nimport { forwardRef, Box, BoxProps } from '@incmix-ui/react'\n\nconst Card = forwardRef<BoxProps, 'div'>((props, ref) => <Box px=\"4\" py=\"5\" rounded=\"sm\" shadow=\"lg\" ref={ref} {...props} />)\n```\n\n## Option 2: Cast the component as a `IncmixComponent`\n\nThe `IncmixComponent` is a type we use internally to mark specific components as\nIncmix components rather than using `React.PropsWithChildren`.\n\nThis is because a `IncmixComponent` gets its props from the React component or\nelement type, and adds incmix specific style props.\n\n`IncmixComponent` takes 2 type generic, the element type (like \"div\", \"button\",\netc), and any custom props (like `isOpen`, `isDisabled`, etc)\n\n```tsx live=false\nimport { IncmixComponent, Box, BoxProps } from '@incmix-ui/react'\n\ntype DivComponent = IncmixComponent<'div', {}>\n\nconst Card = ((props: BoxProps) => <Box px=\"4\" py=\"5\" rounded=\"sm\" shadow=\"lg\" {...props} />) as DivComponent\n```\n\n## Option 3: Use the `incmix` factory function\n\nThe Incmix factory function is still a work in progress but it can be useful in\nthis case as well. It can also be used to convert a non-incmix component into a\nIncmix enabled component.\n\nWhat you need to do is to call the `incmix` function and pass it any element or\ncomponent type.\n\n```jsx live=false\nimport { incmix } from '@incmix-ui/react'\n\nconst Card = incmix('div', {\n  // attach style props\n  baseStyle: {\n    px: '4',\n    py: '5',\n    rounded: 'sm',\n    shadow: 'lg',\n  },\n})\n```\n\nThese are the cases you can get the `as` prop working with custom components. At\nleast for now.\n",
      "code": "var Component=(()=>{var l=Object.create;var r=Object.defineProperty;var h=Object.getOwnPropertyDescriptor;var m=Object.getOwnPropertyNames;var u=Object.getPrototypeOf,x=Object.prototype.hasOwnProperty;var f=(o,e)=>()=>(e||o((e={exports:{}}).exports,e),e.exports),y=(o,e)=>{for(var t in e)r(o,t,{get:e[t],enumerable:!0})},s=(o,e,t,c)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let i of m(e))!x.call(o,i)&&i!==t&&r(o,i,{get:()=>e[i],enumerable:!(c=h(e,i))||c.enumerable});return o};var g=(o,e,t)=>(t=o!=null?l(u(o)):{},s(e||!o||!o.__esModule?r(t,\"default\",{value:o,enumerable:!0}):t,o)),w=o=>s(r({},\"__esModule\",{value:!0}),o);var d=f((I,a)=>{a.exports=_jsx_runtime});var v={};y(v,{default:()=>k,frontmatter:()=>C});var n=g(d()),C={title:\"The as prop and Custom component\",description:\"How to get the as prop working properly for your custom components\",author:\"segunadebayo\"};function p(o){let e=Object.assign({p:\"p\",code:\"code\",pre:\"pre\",h2:\"h2\",blockquote:\"blockquote\"},o.components);return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsxs)(e.p,{children:[\"By default, all Incmix components work with the \",(0,n.jsx)(e.code,{children:\"as\"}),` prop. There might be some\ncases where you need to create smaller components with pre-defined styles, and\nneed the `,(0,n.jsx)(e.code,{children:\"as\"}),\" prop to work as well.\"]}),`\n`,(0,n.jsxs)(e.p,{children:[\"For example, let's say you create a \",(0,n.jsx)(e.code,{children:\"Card\"}),` component with pre-defined styles\nlike this:`]}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-tsx\",live:\"false\",children:`const Card = (props: BoxProps) => <Box px=\"4\" py=\"5\" rounded=\"sm\" shadow=\"lg\" {...props} />\n`})}),`\n`,(0,n.jsxs)(e.p,{children:[\"and you need to consume this component in a way that works with the \",(0,n.jsx)(e.code,{children:\"as\"}),` prop,\nlike this:`]}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-jsx\",live:\"false\",children:`const Usage = () => <Card as=\"button\">This is a card</Card>\n`})}),`\n`,(0,n.jsx)(e.p,{children:\"You might run into type errors like this:\"}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-sh\",children:`Type '{ children: string; as: string; }' is not assignable to type 'IntrinsicAttributes & BoxProps'.\n  Property 'as' does not exist on type 'IntrinsicAttributes & BoxProps'.\n`})}),`\n`,(0,n.jsx)(e.p,{children:\"To resolve this, you have 3 options\"}),`\n`,(0,n.jsxs)(e.h2,{id:\"option-1-using-forwardref-from-incmix-uireact\",children:[\"Option 1: Using \",(0,n.jsx)(e.code,{children:\"forwardRef\"}),\" from \",(0,n.jsx)(e.code,{children:\"@incmix-ui/react\"})]}),`\n`,(0,n.jsx)(e.p,{children:`This is the recommended approach as it ensures your components forwards their\nreference properly.`}),`\n`,(0,n.jsxs)(e.blockquote,{children:[`\n`,(0,n.jsx)(e.p,{children:\"Note \\u{1F6A8}: You need to use forwardRef from incmix-ui not react.\"}),`\n`]}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-tsx\",live:\"false\",children:`import { forwardRef, Box, BoxProps } from '@incmix-ui/react'\n\nconst Card = forwardRef<BoxProps, 'div'>((props, ref) => <Box px=\"4\" py=\"5\" rounded=\"sm\" shadow=\"lg\" ref={ref} {...props} />)\n`})}),`\n`,(0,n.jsxs)(e.h2,{id:\"option-2-cast-the-component-as-a-incmixcomponent\",children:[\"Option 2: Cast the component as a \",(0,n.jsx)(e.code,{children:\"IncmixComponent\"})]}),`\n`,(0,n.jsxs)(e.p,{children:[\"The \",(0,n.jsx)(e.code,{children:\"IncmixComponent\"}),` is a type we use internally to mark specific components as\nIncmix components rather than using `,(0,n.jsx)(e.code,{children:\"React.PropsWithChildren\"}),\".\"]}),`\n`,(0,n.jsxs)(e.p,{children:[\"This is because a \",(0,n.jsx)(e.code,{children:\"IncmixComponent\"}),` gets its props from the React component or\nelement type, and adds incmix specific style props.`]}),`\n`,(0,n.jsxs)(e.p,{children:[(0,n.jsx)(e.code,{children:\"IncmixComponent\"}),` takes 2 type generic, the element type (like \"div\", \"button\",\netc), and any custom props (like `,(0,n.jsx)(e.code,{children:\"isOpen\"}),\", \",(0,n.jsx)(e.code,{children:\"isDisabled\"}),\", etc)\"]}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-tsx\",live:\"false\",children:`import { IncmixComponent, Box, BoxProps } from '@incmix-ui/react'\n\ntype DivComponent = IncmixComponent<'div', {}>\n\nconst Card = ((props: BoxProps) => <Box px=\"4\" py=\"5\" rounded=\"sm\" shadow=\"lg\" {...props} />) as DivComponent\n`})}),`\n`,(0,n.jsxs)(e.h2,{id:\"option-3-use-the-incmix-factory-function\",children:[\"Option 3: Use the \",(0,n.jsx)(e.code,{children:\"incmix\"}),\" factory function\"]}),`\n`,(0,n.jsx)(e.p,{children:`The Incmix factory function is still a work in progress but it can be useful in\nthis case as well. It can also be used to convert a non-incmix component into a\nIncmix enabled component.`}),`\n`,(0,n.jsxs)(e.p,{children:[\"What you need to do is to call the \",(0,n.jsx)(e.code,{children:\"incmix\"}),` function and pass it any element or\ncomponent type.`]}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-jsx\",live:\"false\",children:`import { incmix } from '@incmix-ui/react'\n\nconst Card = incmix('div', {\n  // attach style props\n  baseStyle: {\n    px: '4',\n    py: '5',\n    rounded: 'sm',\n    shadow: 'lg',\n  },\n})\n`})}),`\n`,(0,n.jsxs)(e.p,{children:[\"These are the cases you can get the \",(0,n.jsx)(e.code,{children:\"as\"}),` prop working with custom components. At\nleast for now.`]})]})}function b(o={}){let{wrapper:e}=o.components||{};return e?(0,n.jsx)(e,Object.assign({},o,{children:(0,n.jsx)(p,o)})):p(o)}var k=b;return w(v);})();\n;return Component;"
    },
    "_id": "community/recipes/as-prop.mdx",
    "_raw": {
      "sourceFilePath": "community/recipes/as-prop.mdx",
      "sourceFileName": "as-prop.mdx",
      "sourceFileDir": "community/recipes",
      "contentType": "mdx",
      "flattenedPath": "community/recipes/as-prop"
    },
    "type": "Recipe",
    "slug": "/community/recipes/as-prop",
    "frontMatter": {
      "title": "The as prop and Custom component",
      "description": "How to get the as prop working properly for your custom components",
      "author": "segunadebayo",
      "slug": "/community/community/recipes/as-prop",
      "editUrl": "https://github.com/incmix-ui/incmix-ui-docs/tree/main/content/community/recipes/as-prop.mdx",
      "headings": [
        {
          "text": "Option 1: Using `forwardRef` from `@incmix-ui/react`",
          "id": "option-1-using-forwardref-from-incmix-uireact",
          "level": "h2"
        },
        {
          "text": "Option 2: Cast the component as a `IncmixComponent`",
          "id": "option-2-cast-the-component-as-a-incmixcomponent",
          "level": "h2"
        },
        {
          "text": "Option 3: Use the `incmix` factory function",
          "id": "option-3-use-the-incmix-factory-function",
          "level": "h2"
        }
      ]
    }
  },
  {
    "title": "Atlaskit editable",
    "description": "A well styled editable inspired by the Atlaskit inline edit component",
    "tags": ["editable", "inline-edit", "component"],
    "author": "Jacob Marshall (github.com/jacobhq)",
    "body": {
      "raw": "\nThis example features a tweaked UI, a hover color with dark mode support, and a tooltip. As you can see, we can change the input by setting the `as` prop. This design is inspired by the [Atlassian inline edit](https://atlassian.design/components/inline-edit/examples) component. Read more about the editable [here](/docs/form/editable).\n\nHere are the imports required:\n\n```js live=false\nimport {\n  EditablePreview,\n  Box,\n  useColorModeValue,\n  IconButton,\n  Input,\n  useDisclosure,\n  useEditableControls,\n  ButtonGroup,\n  SlideFade,\n  Editable,\n  Tooltip,\n  EditableInput,\n} from '@incmix-ui/react'\nimport { CheckIcon, CloseIcon } from '@incmix-ui/icons'\n```\n\n```jsx\nfunction App() {\n  /* Here's a custom control */\n  function EditableControls() {\n    const { isEditing, getSubmitButtonProps, getCancelButtonProps, getEditButtonProps } = useEditableControls()\n\n    return isEditing ? (\n      <ButtonGroup justifyContent=\"end\" size=\"sm\" w=\"full\" spacing={2} mt={2}>\n        <IconButton icon={<CheckIcon />} {...getSubmitButtonProps()} />\n        <IconButton icon={<CloseIcon boxSize={3} />} {...getCancelButtonProps()} />\n      </ButtonGroup>\n    ) : null\n  }\n\n  return (\n    <Editable defaultValue=\"Rasengan ⚡️\" isPreviewFocusable={true} selectAllOnFocus={false}>\n      <Tooltip label=\"Click to edit\">\n        <EditablePreview\n          py={2}\n          px={4}\n          _hover={{\n            background: useColorModeValue('gray.100', 'gray.700'),\n          }}\n        />\n      </Tooltip>\n      <Input py={2} px={4} as={EditableInput} />\n      <EditableControls />\n    </Editable>\n  )\n}\n```\n",
      "code": "var Component=(()=>{var u=Object.create;var a=Object.defineProperty;var p=Object.getOwnPropertyDescriptor;var h=Object.getOwnPropertyNames;var m=Object.getPrototypeOf,b=Object.prototype.hasOwnProperty;var g=(n,e)=>()=>(e||n((e={exports:{}}).exports,e),e.exports),f=(n,e)=>{for(var o in e)a(n,o,{get:e[o],enumerable:!0})},l=(n,e,o,s)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let i of h(e))!b.call(n,i)&&i!==o&&a(n,i,{get:()=>e[i],enumerable:!(s=p(e,i))||s.enumerable});return n};var x=(n,e,o)=>(o=n!=null?u(m(n)):{},l(e||!n||!n.__esModule?a(o,\"default\",{value:n,enumerable:!0}):o,n)),C=n=>l(a({},\"__esModule\",{value:!0}),n);var c=g((w,r)=>{r.exports=_jsx_runtime});var j={};f(j,{default:()=>I,frontmatter:()=>E});var t=x(c()),E={title:\"Atlaskit editable\",description:\"A well styled editable inspired by the Atlaskit inline edit component\",tags:[\"editable\",\"inline-edit\",\"component\"],author:\"Jacob Marshall (github.com/jacobhq)\"};function d(n){let e=Object.assign({p:\"p\",code:\"code\",a:\"a\",pre:\"pre\"},n.components);return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsxs)(e.p,{children:[\"This example features a tweaked UI, a hover color with dark mode support, and a tooltip. As you can see, we can change the input by setting the \",(0,t.jsx)(e.code,{children:\"as\"}),\" prop. This design is inspired by the \",(0,t.jsx)(e.a,{href:\"https://atlassian.design/components/inline-edit/examples\",children:\"Atlassian inline edit\"}),\" component. Read more about the editable \",(0,t.jsx)(e.a,{href:\"/docs/form/editable\",children:\"here\"}),\".\"]}),`\n`,(0,t.jsx)(e.p,{children:\"Here are the imports required:\"}),`\n`,(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:\"language-js\",live:\"false\",children:`import {\n  EditablePreview,\n  Box,\n  useColorModeValue,\n  IconButton,\n  Input,\n  useDisclosure,\n  useEditableControls,\n  ButtonGroup,\n  SlideFade,\n  Editable,\n  Tooltip,\n  EditableInput,\n} from '@incmix-ui/react'\nimport { CheckIcon, CloseIcon } from '@incmix-ui/icons'\n`})}),`\n`,(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:\"language-jsx\",children:`function App() {\n  /* Here's a custom control */\n  function EditableControls() {\n    const { isEditing, getSubmitButtonProps, getCancelButtonProps, getEditButtonProps } = useEditableControls()\n\n    return isEditing ? (\n      <ButtonGroup justifyContent=\"end\" size=\"sm\" w=\"full\" spacing={2} mt={2}>\n        <IconButton icon={<CheckIcon />} {...getSubmitButtonProps()} />\n        <IconButton icon={<CloseIcon boxSize={3} />} {...getCancelButtonProps()} />\n      </ButtonGroup>\n    ) : null\n  }\n\n  return (\n    <Editable defaultValue=\"Rasengan \\u26A1\\uFE0F\" isPreviewFocusable={true} selectAllOnFocus={false}>\n      <Tooltip label=\"Click to edit\">\n        <EditablePreview\n          py={2}\n          px={4}\n          _hover={{\n            background: useColorModeValue('gray.100', 'gray.700'),\n          }}\n        />\n      </Tooltip>\n      <Input py={2} px={4} as={EditableInput} />\n      <EditableControls />\n    </Editable>\n  )\n}\n`})})]})}function B(n={}){let{wrapper:e}=n.components||{};return e?(0,t.jsx)(e,Object.assign({},n,{children:(0,t.jsx)(d,n)})):d(n)}var I=B;return C(j);})();\n;return Component;"
    },
    "_id": "community/recipes/atlaskit-editable.mdx",
    "_raw": {
      "sourceFilePath": "community/recipes/atlaskit-editable.mdx",
      "sourceFileName": "atlaskit-editable.mdx",
      "sourceFileDir": "community/recipes",
      "contentType": "mdx",
      "flattenedPath": "community/recipes/atlaskit-editable"
    },
    "type": "Recipe",
    "slug": "/community/recipes/atlaskit-editable",
    "frontMatter": {
      "title": "Atlaskit editable",
      "description": "A well styled editable inspired by the Atlaskit inline edit component",
      "tags": ["editable", "inline-edit", "component"],
      "author": "Jacob Marshall (github.com/jacobhq)",
      "slug": "/community/community/recipes/atlaskit-editable",
      "editUrl": "https://github.com/incmix-ui/incmix-ui-docs/tree/main/content/community/recipes/atlaskit-editable.mdx",
      "headings": []
    }
  },
  {
    "title": "Floating Labels",
    "description": "How to implement floating labels in Incmix UI",
    "author": "Patrick-Ullrich",
    "body": {
      "raw": "\nWhile Incmix UI doesn't enforce a specific style or design system, it makes it\neasy to implement what ever style you want yourself. One popular style are the\nuse of `floating labels`.\n\nThis is one way to implement floating labels in your project, it doesn't mean\nthis is the only way to achieve this.\n\nBelow is the gist to achieve floating labels.\n\nimport {\n  App as AppFloatingLabel,\n  Index as IndexFloatingLabel,\n} from 'configs/sandpack-contents/floating-labels/floating-labels.js'\n\n<SandpackEmbed\n  files={{\n    '/App.tsx': AppFloatingLabel,\n    '/index.tsx': IndexFloatingLabel,\n  }}\n/>\n",
      "code": "var Component=(()=>{var u=Object.create;var i=Object.defineProperty;var b=Object.getOwnPropertyDescriptor;var g=Object.getOwnPropertyNames;var y=Object.getPrototypeOf,F=Object.prototype.hasOwnProperty;var l=(t,e)=>()=>(e||t((e={exports:{}}).exports,e),e.exports),I=(t,e)=>{for(var o in e)i(t,o,{get:e[o],enumerable:!0})},c=(t,e,o,s)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let r of g(e))!F.call(t,r)&&r!==o&&i(t,r,{get:()=>e[r],enumerable:!(s=b(e,r))||s.enumerable});return t};var m=(t,e,o)=>(o=t!=null?u(y(t)):{},c(e||!t||!t.__esModule?i(o,\"default\",{value:t,enumerable:!0}):o,t)),v=t=>c(i({},\"__esModule\",{value:!0}),t);var d=l((k,p)=>{p.exports=_jsx_runtime});var f=l((C,x)=>{x.exports={App:`import {\n  IncmixProvider,\n  FormControl,\n  FormErrorMessage,\n  FormHelperText,\n  FormLabel,\n  Input,\n  extendTheme,\n  Box\n} from \"@incmix-ui/react\";\nconst activeLabelStyles = {\n  transform: \"scale(0.85) translateY(-24px)\"\n};\nexport const theme = extendTheme({\n  components: {\n    Form: {\n      variants: {\n        floating: {\n          container: {\n            _focusWithin: {\n              label: {\n                ...activeLabelStyles\n              }\n            },\n            \"input:not(:placeholder-shown) + label, .incmix-select__wrapper + label, textarea:not(:placeholder-shown) ~ label\": {\n              ...activeLabelStyles\n            },\n            label: {\n              top: 0,\n              left: 0,\n              zIndex: 2,\n              position: \"absolute\",\n              backgroundColor: \"white\",\n              pointerEvents: \"none\",\n              mx: 3,\n              px: 1,\n              my: 2,\n              transformOrigin: \"left top\"\n            }\n          }\n        }\n      }\n    }\n  }\n});\n\nexport default function App() {\n  return (\n    <IncmixProvider theme={theme}>\n      <Box p={8}>\n        <FormControl variant=\"floating\" id=\"first-name\" isRequired isInvalid>\n          <Input placeholder=\" \" />\n          {/* It is important that the Label comes after the Control due to css selectors */}\n          <FormLabel>First name</FormLabel>\n          <FormHelperText>Keep it very short and sweet!</FormHelperText>\n          <FormErrorMessage>Your First name is invalid</FormErrorMessage>\n        </FormControl>\n      </Box>\n    </IncmixProvider>\n  );\n}\n`,Index:`import * as React from \"react\";\nimport { createRoot } from \"react-dom/client\";\nimport { IncmixProvider } from \"@incmix-ui/react\";\n\nimport App from \"./App\";\n\nconst container = document.getElementById(\"root\");\nconst root = createRoot(container!);\nroot.render(\n  <IncmixProvider>\n    <App />\n  </IncmixProvider>\n);\n`}});var E={};I(E,{default:()=>L,frontmatter:()=>_});var n=m(d()),a=m(f()),_={title:\"Floating Labels\",description:\"How to implement floating labels in Incmix UI\",author:\"Patrick-Ullrich\"};function h(t){let e=Object.assign({p:\"p\",code:\"code\"},t.components),{SandpackEmbed:o}=e;return o||j(\"SandpackEmbed\",!0,\"21:1-26:3\"),(0,n.jsxs)(n.Fragment,{children:[(0,n.jsxs)(e.p,{children:[`While Incmix UI doesn't enforce a specific style or design system, it makes it\neasy to implement what ever style you want yourself. One popular style are the\nuse of `,(0,n.jsx)(e.code,{children:\"floating labels\"}),\".\"]}),`\n`,(0,n.jsx)(e.p,{children:`This is one way to implement floating labels in your project, it doesn't mean\nthis is the only way to achieve this.`}),`\n`,(0,n.jsx)(e.p,{children:\"Below is the gist to achieve floating labels.\"}),`\n`,`\n`,(0,n.jsx)(o,{files:{\"/App.tsx\":a.App,\"/index.tsx\":a.Index}})]})}function w(t={}){let{wrapper:e}=t.components||{};return e?(0,n.jsx)(e,Object.assign({},t,{children:(0,n.jsx)(h,t)})):h(t)}var L=w;function j(t,e,o){throw new Error(\"Expected \"+(e?\"component\":\"object\")+\" `\"+t+\"` to be defined: you likely forgot to import, pass, or provide it.\"+(o?\"\\nIt\\u2019s referenced in your code at `\"+o+\"` in `/Users/uma.krishnan/projects/incmixlabs/incmix-ui/apps/docs/content/_mdx_bundler_entry_point-06e8c544-bea1-48ca-bf96-6ad5f5c6c254.mdx`\":\"\"))}return v(E);})();\n;return Component;"
    },
    "_id": "community/recipes/floating-labels.mdx",
    "_raw": {
      "sourceFilePath": "community/recipes/floating-labels.mdx",
      "sourceFileName": "floating-labels.mdx",
      "sourceFileDir": "community/recipes",
      "contentType": "mdx",
      "flattenedPath": "community/recipes/floating-labels"
    },
    "type": "Recipe",
    "slug": "/community/recipes/floating-labels",
    "frontMatter": {
      "title": "Floating Labels",
      "description": "How to implement floating labels in Incmix UI",
      "author": "Patrick-Ullrich",
      "slug": "/community/community/recipes/floating-labels",
      "editUrl": "https://github.com/incmix-ui/incmix-ui-docs/tree/main/content/community/recipes/floating-labels.mdx",
      "headings": []
    }
  },
  {
    "title": "Horizontal Collapse",
    "description": "How to support horizontal version of the default collapse component in Incmix UI",
    "author": "segunadebayo",
    "body": {
      "raw": "\nThe default `Collapse` component in Incmix UI works for vertical orientation.\n\nIn some cases, you might need the horizontal orientation (e.g when you're\nbuilding a side panel) and you cannot use the `Drawer` component.\n\nHere's a code snippet to help you achieve that while ensuring the offscreen\ncontent stays hidden from screen readers and keyboard (via tabbing) when closed.\n\n> This recipe was inspired by\n> [#2791](https://github.com/incmix-ui/incmix-ui/issues/2791)\n\n```jsx live=false\nimport { useDisclosure } from '@incmix-ui/react'\nimport { motion } from 'framer-motion'\nimport { useState } from 'react'\n\nexport default function App() {\n  const { getButtonProps, getDisclosureProps, isOpen } = useDisclosure()\n  const [hidden, setHidden] = useState(!isOpen)\n\n  return (\n    <div>\n      <button {...getButtonProps()}>Toggle</button>\n      <motion.div\n        {...getDisclosureProps()}\n        hidden={hidden}\n        initial={false}\n        onAnimationStart={() => setHidden(false)}\n        onAnimationComplete={() => setHidden(!isOpen)}\n        animate={{ width: isOpen ? 500 : 0 }}\n        style={{\n          background: 'red',\n          overflow: 'hidden',\n          whiteSpace: 'nowrap',\n          position: 'absolute',\n          right: '0',\n          height: '100vh',\n          top: '0',\n        }}\n      >\n        welcome home\n      </motion.div>\n    </div>\n  )\n}\n```\n\n[Explore on Code Sandbox](https://codesandbox.io/s/horizontal-collapse-fmq66)\n",
      "code": "var Component=(()=>{var p=Object.create;var r=Object.defineProperty;var h=Object.getOwnPropertyDescriptor;var u=Object.getOwnPropertyNames;var m=Object.getPrototypeOf,f=Object.prototype.hasOwnProperty;var g=(e,n)=>()=>(n||e((n={exports:{}}).exports,n),n.exports),x=(e,n)=>{for(var t in n)r(e,t,{get:n[t],enumerable:!0})},a=(e,n,t,s)=>{if(n&&typeof n==\"object\"||typeof n==\"function\")for(let i of u(n))!f.call(e,i)&&i!==t&&r(e,i,{get:()=>n[i],enumerable:!(s=h(n,i))||s.enumerable});return e};var b=(e,n,t)=>(t=e!=null?p(m(e)):{},a(n||!e||!e.__esModule?r(t,\"default\",{value:e,enumerable:!0}):t,e)),w=e=>a(r({},\"__esModule\",{value:!0}),e);var d=g((k,c)=>{c.exports=_jsx_runtime});var D={};x(D,{default:()=>j,frontmatter:()=>v});var o=b(d()),v={title:\"Horizontal Collapse\",description:\"How to support horizontal version of the default collapse component in Incmix UI\",author:\"segunadebayo\"};function l(e){let n=Object.assign({p:\"p\",code:\"code\",blockquote:\"blockquote\",a:\"a\",pre:\"pre\"},e.components);return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsxs)(n.p,{children:[\"The default \",(0,o.jsx)(n.code,{children:\"Collapse\"}),\" component in Incmix UI works for vertical orientation.\"]}),`\n`,(0,o.jsxs)(n.p,{children:[`In some cases, you might need the horizontal orientation (e.g when you're\nbuilding a side panel) and you cannot use the `,(0,o.jsx)(n.code,{children:\"Drawer\"}),\" component.\"]}),`\n`,(0,o.jsx)(n.p,{children:`Here's a code snippet to help you achieve that while ensuring the offscreen\ncontent stays hidden from screen readers and keyboard (via tabbing) when closed.`}),`\n`,(0,o.jsxs)(n.blockquote,{children:[`\n`,(0,o.jsxs)(n.p,{children:[`This recipe was inspired by\n`,(0,o.jsx)(n.a,{href:\"https://github.com/incmix-ui/incmix-ui/issues/2791\",children:\"#2791\"})]}),`\n`]}),`\n`,(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:\"language-jsx\",live:\"false\",children:`import { useDisclosure } from '@incmix-ui/react'\nimport { motion } from 'framer-motion'\nimport { useState } from 'react'\n\nexport default function App() {\n  const { getButtonProps, getDisclosureProps, isOpen } = useDisclosure()\n  const [hidden, setHidden] = useState(!isOpen)\n\n  return (\n    <div>\n      <button {...getButtonProps()}>Toggle</button>\n      <motion.div\n        {...getDisclosureProps()}\n        hidden={hidden}\n        initial={false}\n        onAnimationStart={() => setHidden(false)}\n        onAnimationComplete={() => setHidden(!isOpen)}\n        animate={{ width: isOpen ? 500 : 0 }}\n        style={{\n          background: 'red',\n          overflow: 'hidden',\n          whiteSpace: 'nowrap',\n          position: 'absolute',\n          right: '0',\n          height: '100vh',\n          top: '0',\n        }}\n      >\n        welcome home\n      </motion.div>\n    </div>\n  )\n}\n`})}),`\n`,(0,o.jsx)(n.p,{children:(0,o.jsx)(n.a,{href:\"https://codesandbox.io/s/horizontal-collapse-fmq66\",children:\"Explore on Code Sandbox\"})})]})}function y(e={}){let{wrapper:n}=e.components||{};return n?(0,o.jsx)(n,Object.assign({},e,{children:(0,o.jsx)(l,e)})):l(e)}var j=y;return w(D);})();\n;return Component;"
    },
    "_id": "community/recipes/horizontal-collapse.mdx",
    "_raw": {
      "sourceFilePath": "community/recipes/horizontal-collapse.mdx",
      "sourceFileName": "horizontal-collapse.mdx",
      "sourceFileDir": "community/recipes",
      "contentType": "mdx",
      "flattenedPath": "community/recipes/horizontal-collapse"
    },
    "type": "Recipe",
    "slug": "/community/recipes/horizontal-collapse",
    "frontMatter": {
      "title": "Horizontal Collapse",
      "description": "How to support horizontal version of the default collapse component in Incmix UI",
      "author": "segunadebayo",
      "slug": "/community/community/recipes/horizontal-collapse",
      "editUrl": "https://github.com/incmix-ui/incmix-ui-docs/tree/main/content/community/recipes/horizontal-collapse.mdx",
      "headings": []
    }
  },
  {
    "title": "Page specific color mode",
    "description": "How to lock a specific page to a specific color mode",
    "author": "segunadebayo",
    "body": {
      "raw": "\nThe default way to add color mode in your application or website is to wrap it\nin the `IncmixProvider` which provides a way to change the color mode to `light`\nor `dark` depending on system/user preferences.\n\nIn reality, you might run into scenarios where you want to lock a page to a\nspecific color mode (light or dark).\n\nA combination of `LightMode` or `DarkMode` components and the _undocumented_\n`GlobalStyle` component can help you achieve this.\n\nThe `GlobalStyle` component provides the styles defined in `theme.styles.global`\nto the elements on entire page.\n\n> **Note 🚨:** The caveat of this approach is that you won't be able to switch\n> between color modes. You're effectively \"locking\" the mode.\n\nLet's say we want to lock the page to light mode, you can import the `LightMode`\ncomponent and wrap the page within it.\n\n```jsx live=false\nimport { LightMode, GlobalStyle } from '@incmix-ui/react'\n\nfunction Page() {\n  return (\n    <LightMode>\n      <GlobalStyle />\n      {/* rest of your page */}\n    </LightMode>\n  )\n}\n```\n",
      "code": "var Component=(()=>{var s=Object.create;var i=Object.defineProperty;var p=Object.getOwnPropertyDescriptor;var m=Object.getOwnPropertyNames;var g=Object.getPrototypeOf,u=Object.prototype.hasOwnProperty;var y=(n,e)=>()=>(e||n((e={exports:{}}).exports,e),e.exports),f=(n,e)=>{for(var t in e)i(n,t,{get:e[t],enumerable:!0})},a=(n,e,t,r)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let c of m(e))!u.call(n,c)&&c!==t&&i(n,c,{get:()=>e[c],enumerable:!(r=p(e,c))||r.enumerable});return n};var b=(n,e,t)=>(t=n!=null?s(g(n)):{},a(e||!n||!n.__esModule?i(t,\"default\",{value:n,enumerable:!0}):t,n)),w=n=>a(i({},\"__esModule\",{value:!0}),n);var l=y((L,d)=>{d.exports=_jsx_runtime});var j={};f(j,{default:()=>M,frontmatter:()=>x});var o=b(l()),x={title:\"Page specific color mode\",description:\"How to lock a specific page to a specific color mode\",author:\"segunadebayo\"};function h(n){let e=Object.assign({p:\"p\",code:\"code\",em:\"em\",blockquote:\"blockquote\",strong:\"strong\",pre:\"pre\"},n.components);return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsxs)(e.p,{children:[`The default way to add color mode in your application or website is to wrap it\nin the `,(0,o.jsx)(e.code,{children:\"IncmixProvider\"}),\" which provides a way to change the color mode to \",(0,o.jsx)(e.code,{children:\"light\"}),`\nor `,(0,o.jsx)(e.code,{children:\"dark\"}),\" depending on system/user preferences.\"]}),`\n`,(0,o.jsx)(e.p,{children:`In reality, you might run into scenarios where you want to lock a page to a\nspecific color mode (light or dark).`}),`\n`,(0,o.jsxs)(e.p,{children:[\"A combination of \",(0,o.jsx)(e.code,{children:\"LightMode\"}),\" or \",(0,o.jsx)(e.code,{children:\"DarkMode\"}),\" components and the \",(0,o.jsx)(e.em,{children:\"undocumented\"}),`\n`,(0,o.jsx)(e.code,{children:\"GlobalStyle\"}),\" component can help you achieve this.\"]}),`\n`,(0,o.jsxs)(e.p,{children:[\"The \",(0,o.jsx)(e.code,{children:\"GlobalStyle\"}),\" component provides the styles defined in \",(0,o.jsx)(e.code,{children:\"theme.styles.global\"}),`\nto the elements on entire page.`]}),`\n`,(0,o.jsxs)(e.blockquote,{children:[`\n`,(0,o.jsxs)(e.p,{children:[(0,o.jsx)(e.strong,{children:\"Note \\u{1F6A8}:\"}),` The caveat of this approach is that you won't be able to switch\nbetween color modes. You're effectively \"locking\" the mode.`]}),`\n`]}),`\n`,(0,o.jsxs)(e.p,{children:[\"Let's say we want to lock the page to light mode, you can import the \",(0,o.jsx)(e.code,{children:\"LightMode\"}),`\ncomponent and wrap the page within it.`]}),`\n`,(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:\"language-jsx\",live:\"false\",children:`import { LightMode, GlobalStyle } from '@incmix-ui/react'\n\nfunction Page() {\n  return (\n    <LightMode>\n      <GlobalStyle />\n      {/* rest of your page */}\n    </LightMode>\n  )\n}\n`})})]})}function k(n={}){let{wrapper:e}=n.components||{};return e?(0,o.jsx)(e,Object.assign({},n,{children:(0,o.jsx)(h,n)})):h(n)}var M=k;return w(j);})();\n;return Component;"
    },
    "_id": "community/recipes/page-specific-color-mode.mdx",
    "_raw": {
      "sourceFilePath": "community/recipes/page-specific-color-mode.mdx",
      "sourceFileName": "page-specific-color-mode.mdx",
      "sourceFileDir": "community/recipes",
      "contentType": "mdx",
      "flattenedPath": "community/recipes/page-specific-color-mode"
    },
    "type": "Recipe",
    "slug": "/community/recipes/page-specific-color-mode",
    "frontMatter": {
      "title": "Page specific color mode",
      "description": "How to lock a specific page to a specific color mode",
      "author": "segunadebayo",
      "slug": "/community/community/recipes/page-specific-color-mode",
      "editUrl": "https://github.com/incmix-ui/incmix-ui-docs/tree/main/content/community/recipes/page-specific-color-mode.mdx",
      "headings": []
    }
  },
  {
    "title": "Incmix UI Prose",
    "description": "Incmix UI Prose is a second-party package that adds ready-made styles to remote HTML content.",
    "tags": ["prose", "typography", "remote content"],
    "author": "nikolovlazar",
    "body": {
      "raw": "\n[Incmix UI Prose](https://github.com/nikolovlazar/incmix-ui-prose) is a\n\"second-party\" package that adds ready-made styles to a remote HTML content.\nIt's \"second-party\" because it's created by one of Incmix UI's maintainers, but\nit's not part of the core Incmix UI package just yet. The reason for that is to\navoid bloating the core library while we figure out how much people actually\nneed it. If there's a demand for it, it will be part of the core Incmix UI\npackage.\n\n> If you need this package to be part of the core library, don't forget to let\n> us know in\n> [this discussion thread](https://github.com/incmix-ui/incmix-ui-docs/discussions/469).\n\nIncmix UI Prose is essentially a custom component that applies styles to its\nchildren content.\n\nIntegrating the `Prose` component is fairly easy. To get started, you need to\ninstall the package:\n\n```bash\nyarn add @nikolovlazar/incmix-ui-prose\n\n# or\n\nnpm i @nikolovlazar/incmix-ui-prose\n```\n\nThen, you need to use the `withProse` theme extension to add the Prose component\nstyling into your own theme:\n\n```typescript ln={2,8}\nimport { extendTheme } from '@incmix-ui/react'\nimport { withProse } from '@nikolovlazar/incmix-ui-prose'\n\nconst theme = extendTheme(\n  {\n    // your own theme\n  },\n  withProse(),\n)\n\nexport default theme\n```\n\nTo apply the styles to the remote HTML content, you just need to wrap it with\nthe `Prose` component:\n\n```typescript\nimport { Prose } from '@nikolovlazar/incmix-ui-prose'\n\nconst MyPage = content => {\n  return <Prose>{content}</Prose>\n}\n\nexport default MyPage\n```\n\nIf you want to override the default Prose style, you can do so by providing your\nstyle overrides as an argument to the `withProse` extension:\n\n```typescript\nconst theme = extendTheme(\n  {},\n  withProse({\n    baseStyle: {\n      h2: {\n        fontWeight: 'light',\n      },\n    },\n  }),\n)\n```\n\nYou can refer to the\n[default theme](https://github.com/nikolovlazar/incmix-ui-prose/blob/main/packages/incmix-ui-prose/src/theme.ts#L17)\nto understand how you can override a certain element style.\n\nThere's also a CodeSandbox available that uses the Incmix UI Prose package:\n\nimport { App, Index } from 'configs/sandpack-contents/prose/prose'\n\n<SandpackEmbed\n  dependencies={{\n    '@nikolovlazar/incmix-ui-prose': '1.0.4',\n  }}\n  files={{\n    '/App.tsx': App,\n    '/index.tsx': Index,\n  }}\n/>\n",
      "code": "var Component=(()=>{var f=Object.create;var r=Object.defineProperty;var b=Object.getOwnPropertyDescriptor;var x=Object.getOwnPropertyNames;var y=Object.getPrototypeOf,v=Object.prototype.hasOwnProperty;var c=(i,e)=>()=>(e||i((e={exports:{}}).exports,e),e.exports),k=(i,e)=>{for(var o in e)r(i,o,{get:e[o],enumerable:!0})},u=(i,e,o,a)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let n of x(e))!v.call(i,n)&&n!==o&&r(i,n,{get:()=>e[n],enumerable:!(a=b(e,n))||a.enumerable});return i};var l=(i,e,o)=>(o=i!=null?f(y(i)):{},u(e||!i||!i.__esModule?r(o,\"default\",{value:i,enumerable:!0}):o,i)),P=i=>u(r({},\"__esModule\",{value:!0}),i);var p=c((H,d)=>{d.exports=_jsx_runtime});var h=c((z,m)=>{m.exports={App:`import { Prose } from \"@nikolovlazar/incmix-ui-prose\";\nimport { Container } from \"@incmix-ui/react\";\n\nexport default function App() {\n  return (\n    <Container w=\"full\" maxW=\"container.lg\">\n      <h1>H1 outside of Prose</h1>\n      <h1>H2 outside of Prose</h1>\n      <h1>H3 outside of Prose</h1>\n      <blockquote>Blockquote outside of Prose</blockquote>\n      <Prose>\n        <h1>Title Heading 1</h1>\n        <h2>Title Heading 2</h2>\n        <h3>Title Heading 3</h3>\n        <h4>Title Heading 4</h4>\n        <p>\n          Lorem ipsum dolor sit amet, consectetur adipiscing elit. Morbi at\n          dolor nec ex rutrum semper. Praesent ultricies purus eget lectus\n          tristique egestas ac in lacus. Nulla eleifend lorem risus, sit amet\n          dictum nisi gravida eget. Suspendisse odio sem, scelerisque congue\n          luctus nec, scelerisque ultrices orci. Praesent tincidunt, risus ut\n          commodo cursus, ligula orci tristique justo, vitae sollicitudin lacus\n          risus dictum orci.\n        </p>\n        <p>\n          Vivamus vel enim at lorem ultricies faucibus. Cras vitae ipsum ut quam\n          varius dignissim a ac tellus. Aliquam maximus mauris eget tincidunt\n          interdum. Fusce vitae massa non risus congue tincidunt. Pellentesque\n          maximus elit quis eros lobortis dictum.\n        </p>\n        <hr />\n        <p>\n          Fusce placerat ipsum vel sollicitudin imperdiet. Morbi vulputate non\n          diam at consequat. Donec vitae sem eu arcu auctor scelerisque vel in\n          turpis. Pellentesque dapibus justo dui, quis egestas sapien porttitor\n          in.\n        </p>\n        <h3>Blockquotes</h3>\n        <blockquote>This is a good looking blockquote!</blockquote>\n        <p>And it can span into multiple lines:</p>\n        <blockquote>\n          Fusce placerat ipsum vel sollicitudin imperdiet. Morbi vulputate non\n          diam at consequat. Donec vitae sem eu arcu auctor scelerisque vel in\n          turpis. Pellentesque dapibus justo dui, quis egestas sapien porttitor\n          in.\n        </blockquote>\n        <p>\n          There&apos;s also <strong>strong</strong>, <b>b</b>, <em>em</em>{\" \"}\n          support as well! But, let&apos;s display some code!\n        </p>\n        <h3>Code</h3>\n        <pre>\n          <code>\n            {\\`<article>\n    <h4>Title Heading 4</h4>\n    <p>\n      Lorem ipsum dolor sit amet, consectetur adipiscing elit. Morbi at dolor nec ex rutrum semper. Praesent ultricies purus eget lectus\n      tristique egestas ac in lacus. Nulla eleifend lorem risus, sit amet dictum nisi gravida eget. Suspendisse odio sem, scelerisque congue\n      luctus nec, scelerisque ultrices orci. Praesent tincidunt, risus ut commodo cursus, ligula orci tristique justo, vitae sollicitudin lacus risus dictum orci.\n    </p>\n  </article>\\`}\n          </code>\n        </pre>\n        <p>\n          Sometimes you&apos;d want to use <code>inline code</code>, and that\n          would be just fine!\n        </p>\n        <h3>Links</h3>\n        <p>\n          If you want to learn more,{\" \"}\n          <a href=\"https://incmix-ui.com\">check out our docsite</a>!\n        </p>\n        <h3>Figure</h3>\n        <p>\n          Fusce placerat ipsum vel sollicitudin imperdiet. Morbi vulputate non\n          diam at consequat. Donec vitae sem eu arcu auctor scelerisque vel in\n          turpis. Pellentesque dapibus justo dui, quis egestas sapien porttitor\n          in.\n        </p>\n        <figure>\n          <img\n            alt=\"Lagos, Nigeria\"\n            src=\"https://images.unsplash.com/photo-1593717191400-84f38ee95485?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=2048&q=100\"\n          />\n          <figcaption>Lagos, Nigeria</figcaption>\n        </figure>\n        <p>\n          Fusce placerat ipsum vel sollicitudin imperdiet. Morbi vulputate non\n          diam at consequat. Donec vitae sem eu arcu auctor scelerisque vel in\n          turpis. Pellentesque dapibus justo dui, quis egestas sapien porttitor\n          in.\n        </p>\n        <h3>Lists</h3>\n        <p>Let's look at some unordered lists. Things to buy:</p>\n        <ul>\n          <li>Milk</li>\n          <li>Eggs</li>\n          <li>Bread</li>\n          <li>Incmix UI Pro license</li>\n        </ul>\n        <p>And some ordered lists. Things to do:</p>\n        <ol>\n          <li>Pay the bills</li>\n          <li>Walk the dog</li>\n          <li>Take out trash</li>\n        </ol>\n        <h3>Tables</h3>\n        <table>\n          <thead>\n            <tr>\n              <th>Name</th>\n              <th>Role</th>\n              <th>GitHub Profile</th>\n            </tr>\n          </thead>\n          <tbody>\n            <tr>\n              <td>Segun Adebayo</td>\n              <td>Founder</td>\n              <td>segunadebayo</td>\n            </tr>\n            <tr>\n              <td>Tim Kolberger</td>\n              <td>TypeScript Wizard</td>\n              <td>TimKolberger</td>\n            </tr>\n            <tr>\n              <td>Lazar Nikolov</td>\n              <td>Trouble maker</td>\n              <td>nikolovlazar</td>\n            </tr>\n            <tr>\n              <td>Folasade Agbaje</td>\n              <td>Queen</td>\n              <td>estheragbaje</td>\n            </tr>\n          </tbody>\n          <tfoot>\n            <tr>\n              <th>Name</th>\n              <th>Role</th>\n              <th>GitHub Profile</th>\n            </tr>\n          </tfoot>\n        </table>\n      </Prose>\n    </Container>\n  );\n}`,Index:`import * as React from \"react\";\nimport { createRoot } from \"react-dom/client\";\nimport { IncmixProvider, extendTheme } from \"@incmix-ui/react\";\nimport { withProse } from \"@nikolovlazar/incmix-ui-prose\";\n\nimport App from \"./App\";\n\nconst theme = extendTheme(\n  {},\n  withProse({\n    baseStyle: {\n      h2: {\n        fontWeight: \"light\"\n      }\n    }\n  })\n);\n\nconst container = document.getElementById(\"root\");\nconst root = createRoot(container!);\nroot.render(\n  <IncmixProvider theme={theme}>\n    <App />\n  </IncmixProvider>\n);`}});var j={};k(j,{default:()=>w,frontmatter:()=>q});var t=l(p()),s=l(h()),q={title:\"Incmix UI Prose\",description:\"Incmix UI Prose is a second-party package that adds ready-made styles to remote HTML content.\",tags:[\"prose\",\"typography\",\"remote content\"],author:\"nikolovlazar\"};function g(i){let e=Object.assign({p:\"p\",a:\"a\",blockquote:\"blockquote\",code:\"code\",pre:\"pre\"},i.components),{SandpackEmbed:o}=e;return o||T(\"SandpackEmbed\",!0,\"89:1-97:3\"),(0,t.jsxs)(t.Fragment,{children:[(0,t.jsxs)(e.p,{children:[(0,t.jsx)(e.a,{href:\"https://github.com/nikolovlazar/incmix-ui-prose\",children:\"Incmix UI Prose\"}),` is a\n\"second-party\" package that adds ready-made styles to a remote HTML content.\nIt's \"second-party\" because it's created by one of Incmix UI's maintainers, but\nit's not part of the core Incmix UI package just yet. The reason for that is to\navoid bloating the core library while we figure out how much people actually\nneed it. If there's a demand for it, it will be part of the core Incmix UI\npackage.`]}),`\n`,(0,t.jsxs)(e.blockquote,{children:[`\n`,(0,t.jsxs)(e.p,{children:[`If you need this package to be part of the core library, don't forget to let\nus know in\n`,(0,t.jsx)(e.a,{href:\"https://github.com/incmix-ui/incmix-ui-docs/discussions/469\",children:\"this discussion thread\"}),\".\"]}),`\n`]}),`\n`,(0,t.jsx)(e.p,{children:`Incmix UI Prose is essentially a custom component that applies styles to its\nchildren content.`}),`\n`,(0,t.jsxs)(e.p,{children:[\"Integrating the \",(0,t.jsx)(e.code,{children:\"Prose\"}),` component is fairly easy. To get started, you need to\ninstall the package:`]}),`\n`,(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:\"language-bash\",children:`yarn add @nikolovlazar/incmix-ui-prose\n\n# or\n\nnpm i @nikolovlazar/incmix-ui-prose\n`})}),`\n`,(0,t.jsxs)(e.p,{children:[\"Then, you need to use the \",(0,t.jsx)(e.code,{children:\"withProse\"}),` theme extension to add the Prose component\nstyling into your own theme:`]}),`\n`,(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:\"language-typescript\",ln:\"{2,8}\",children:`import { extendTheme } from '@incmix-ui/react'\nimport { withProse } from '@nikolovlazar/incmix-ui-prose'\n\nconst theme = extendTheme(\n  {\n    // your own theme\n  },\n  withProse(),\n)\n\nexport default theme\n`})}),`\n`,(0,t.jsxs)(e.p,{children:[`To apply the styles to the remote HTML content, you just need to wrap it with\nthe `,(0,t.jsx)(e.code,{children:\"Prose\"}),\" component:\"]}),`\n`,(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:\"language-typescript\",children:`import { Prose } from '@nikolovlazar/incmix-ui-prose'\n\nconst MyPage = content => {\n  return <Prose>{content}</Prose>\n}\n\nexport default MyPage\n`})}),`\n`,(0,t.jsxs)(e.p,{children:[`If you want to override the default Prose style, you can do so by providing your\nstyle overrides as an argument to the `,(0,t.jsx)(e.code,{children:\"withProse\"}),\" extension:\"]}),`\n`,(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:\"language-typescript\",children:`const theme = extendTheme(\n  {},\n  withProse({\n    baseStyle: {\n      h2: {\n        fontWeight: 'light',\n      },\n    },\n  }),\n)\n`})}),`\n`,(0,t.jsxs)(e.p,{children:[`You can refer to the\n`,(0,t.jsx)(e.a,{href:\"https://github.com/nikolovlazar/incmix-ui-prose/blob/main/packages/incmix-ui-prose/src/theme.ts#L17\",children:\"default theme\"}),`\nto understand how you can override a certain element style.`]}),`\n`,(0,t.jsx)(e.p,{children:\"There's also a CodeSandbox available that uses the Incmix UI Prose package:\"}),`\n`,`\n`,(0,t.jsx)(o,{dependencies:{\"@nikolovlazar/incmix-ui-prose\":\"1.0.4\"},files:{\"/App.tsx\":s.App,\"/index.tsx\":s.Index}})]})}function I(i={}){let{wrapper:e}=i.components||{};return e?(0,t.jsx)(e,Object.assign({},i,{children:(0,t.jsx)(g,i)})):g(i)}var w=I;function T(i,e,o){throw new Error(\"Expected \"+(e?\"component\":\"object\")+\" `\"+i+\"` to be defined: you likely forgot to import, pass, or provide it.\"+(o?\"\\nIt\\u2019s referenced in your code at `\"+o+\"` in `/Users/uma.krishnan/projects/incmixlabs/incmix-ui/apps/docs/content/_mdx_bundler_entry_point-dfac63f0-dc4a-4594-a464-f9a8d782a5d1.mdx`\":\"\"))}return P(j);})();\n;return Component;"
    },
    "_id": "community/recipes/prose.mdx",
    "_raw": {
      "sourceFilePath": "community/recipes/prose.mdx",
      "sourceFileName": "prose.mdx",
      "sourceFileDir": "community/recipes",
      "contentType": "mdx",
      "flattenedPath": "community/recipes/prose"
    },
    "type": "Recipe",
    "slug": "/community/recipes/prose",
    "frontMatter": {
      "title": "Incmix UI Prose",
      "description": "Incmix UI Prose is a second-party package that adds ready-made styles to remote HTML content.",
      "tags": ["prose", "typography", "remote content"],
      "author": "nikolovlazar",
      "slug": "/community/community/recipes/prose",
      "editUrl": "https://github.com/incmix-ui/incmix-ui-docs/tree/main/content/community/recipes/prose.mdx",
      "headings": []
    }
  },
  {
    "title": "Using Fonts",
    "description": "A guide for adding fonts to your Incmix project",
    "author": "DecliningLotus",
    "body": {
      "raw": "\nFonts can be loaded into your project either by using NPM or by using the\n`Global` component from the `@emotion/react` package.\n\n> Please do not forget to add font-family fallbacks like e.g. `sans-serif`\n> on both options.\n\n## Option 1: Install with NPM\n\n[Fontsource](https://github.com/fontsource/fontsource) is an updating monorepo\nfull of self-hostable fonts bundled into individual NPM packages. It currently\nsupports all Google Fonts and a small subset of other custom Open Source fonts\nthat have been manually added.\n\nHosting your own fonts locally within a project can lead to large performance\ngains as they won't experience extra (render blocking) network requests, as well\nas streamlining developer experiences.\n\nFor the purposes of this guide, we'll use\n[Open Sans](https://fonts.google.com/specimen/Open+Sans) for the heading font\nand [Raleway](https://fonts.google.com/specimen/Raleway) for the body font. If\nyou have a different font you want to use, you can find the corresponding\npackage on [NPM](https://www.npmjs.com/search?q=fontsource) or their\n[website](https://fontsource.org/).\n\nInstall the relevant fonts you wish to install using your package manager of\nchoice:\n\n```bash\nnpm install @fontsource/open-sans @fontsource/raleway\n```\n\nAssign these fonts to `theme.fonts` to use them with Incmix. More details on\ntheming [here](/docs/styled-system/customize-theme).\n\n```jsx live=false\nimport { extendTheme } from '@incmix-ui/react'\n\nconst theme = extendTheme({\n  fonts: {\n    heading: `'Open Sans', sans-serif`,\n    body: `'Raleway', sans-serif`,\n  },\n})\n\nexport default theme\n```\n\nThen import the relevant font weights and styles into the same root file you\nimport `IncmixProvider` into.\n\n```jsx live=false\nimport '@fontsource/raleway/400.css'\nimport '@fontsource/open-sans/700.css'\n\nimport { IncmixProvider, Container, Stack, Heading, Text } from '@incmix-ui/react'\nimport theme from './theme'\n\nconst App = () => (\n  <IncmixProvider theme={theme}>\n    <Container>\n      <Stack>\n        <Heading>The spectacle before us was indeed sublime.</Heading>\n        <Text>\n          Apparently we had reached a great height in the atmosphere, for the sky was a dead black, and the stars had ceased\n          to twinkle. By the same illusion which lifts the horizon of the sea to the level of the spectator on a hillside,\n          the sable cloud beneath was dished out, and the car seemed to float in the middle of an immense dark sphere, whose\n          upper half was strewn with silver. Looking down into the dark gulf below, I could see a ruddy light streaming\n          through a rift in the clouds.\n        </Text>\n      </Stack>\n    </Container>\n  </IncmixProvider>\n)\n```\n\n> - For Create React App, you need to set this up in `index.js`\n> - In Next.js, this can be found in `_app.js`\n> - In Gatsby, usually `IncmixProvider` is set up in `gatsby-browser.js` using\n>   `wrapRootElement`\n\n## Option 2: Using `@font-face`\n\nAlternatively, custom fonts can be loaded in your Incmix project using the\n`Global` component from the `@emotion/react` package and `@font-face` css rules.\nYou can then add these fonts to `theme.fonts` to make use of them throughout the\nIncmix system.\n\nFirst, we'll import all our relevant font files into the `public` or `static`\ndirectory of your project, where the files will persist in location. Please note\nthat these persisting folders can vary per bundler or framework and should be\ndouble-checked. This can later be used for the `url` selector for the\n`@font-face` CSS rules.\n\nNext, we'll define a `Fonts` component that sets up the `@font-face` rules in\nthe `styles` prop of `Global`:\n\n```jsx live=false\nimport { Global } from '@emotion/react'\n\nconst Fonts = () => (\n  <Global\n    styles={`\n      /* latin */\n      @font-face {\n        font-family: 'Heading Font Name';\n        font-style: normal;\n        font-weight: 700;\n        font-display: swap;\n        src: url('./fonts/headingfont.woff2') format('woff2'), url('./fonts/headingfont.woff') format('woff');\n        unicode-range: U+0000-00FF, U+0131, U+0152-0153, U+02BB-02BC, U+02C6, U+02DA, U+02DC, U+2000-206F, U+2074, U+20AC, U+2122, U+2191, U+2193, U+2212, U+2215, U+FEFF, U+FFFD;\n      }\n      /* latin */\n      @font-face {\n        font-family: 'Body Font Name';\n        font-style: normal;\n        font-weight: 400;\n        font-display: swap;\n        src: url('./fonts/bodyfont.woff2') format('woff2'), url('./fonts/bodyfont.woff') format('woff');\n        unicode-range: U+0000-00FF, U+0131, U+0152-0153, U+02BB-02BC, U+02C6, U+02DA, U+02DC, U+2000-206F, U+2074, U+20AC, U+2122, U+2191, U+2193, U+2212, U+2215, U+FEFF, U+FFFD;\n      }\n      `}\n  />\n)\n\nexport default Fonts\n```\n\nAssign these fonts to `theme.fonts` to use them with Incmix. More details on\ntheming [here](/docs/styled-system/customize-theme).\n\n```jsx live=false\nimport { extendTheme } from '@incmix-ui/react'\n\nconst theme = extendTheme({\n  fonts: {\n    heading: `'Heading Font Name', sans-serif`,\n    body: `'Body Font Name', sans-serif`,\n  },\n})\n\nexport default theme\n```\n\nThen compose the rest of the project together by importing the `Fonts` component\nand `theme` file.\n\n```jsx live=false\nimport { IncmixProvider, Container, Stack, Heading, Text } from '@incmix-ui/react'\nimport Fonts from './fonts'\nimport theme from './theme'\n\nconst App = () => (\n  <IncmixProvider theme={theme}>\n    <Fonts />\n    <Container>\n      <Stack>\n        <Heading>The spectacle before us was indeed sublime.</Heading>\n        <Text>\n          Apparently we had reached a great height in the atmosphere, for the sky was a dead black, and the stars had ceased\n          to twinkle. By the same illusion which lifts the horizon of the sea to the level of the spectator on a hillside,\n          the sable cloud beneath was dished out, and the car seemed to float in the middle of an immense dark sphere, whose\n          upper half was strewn with silver. Looking down into the dark gulf below, I could see a ruddy light streaming\n          through a rift in the clouds.\n        </Text>\n      </Stack>\n    </Container>\n  </IncmixProvider>\n)\n```\n",
      "code": "var Component=(()=>{var d=Object.create;var r=Object.defineProperty;var f=Object.getOwnPropertyDescriptor;var m=Object.getOwnPropertyNames;var p=Object.getPrototypeOf,u=Object.prototype.hasOwnProperty;var g=(t,e)=>()=>(e||t((e={exports:{}}).exports,e),e.exports),w=(t,e)=>{for(var o in e)r(t,o,{get:e[o],enumerable:!0})},a=(t,e,o,s)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let i of m(e))!u.call(t,i)&&i!==o&&r(t,i,{get:()=>e[i],enumerable:!(s=f(e,i))||s.enumerable});return t};var y=(t,e,o)=>(o=t!=null?d(p(t)):{},a(e||!t||!t.__esModule?r(o,\"default\",{value:t,enumerable:!0}):o,t)),b=t=>a(r({},\"__esModule\",{value:!0}),t);var c=g((j,l)=>{l.exports=_jsx_runtime});var k={};w(k,{default:()=>U,frontmatter:()=>x});var n=y(c()),x={title:\"Using Fonts\",description:\"A guide for adding fonts to your Incmix project\",author:\"DecliningLotus\"};function h(t){let e=Object.assign({p:\"p\",code:\"code\",blockquote:\"blockquote\",h2:\"h2\",a:\"a\",pre:\"pre\",ul:\"ul\",li:\"li\"},t.components);return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsxs)(e.p,{children:[`Fonts can be loaded into your project either by using NPM or by using the\n`,(0,n.jsx)(e.code,{children:\"Global\"}),\" component from the \",(0,n.jsx)(e.code,{children:\"@emotion/react\"}),\" package.\"]}),`\n`,(0,n.jsxs)(e.blockquote,{children:[`\n`,(0,n.jsxs)(e.p,{children:[\"Please do not forget to add font-family fallbacks like e.g. \",(0,n.jsx)(e.code,{children:\"sans-serif\"}),`\non both options.`]}),`\n`]}),`\n`,(0,n.jsx)(e.h2,{id:\"option-1-install-with-npm\",children:\"Option 1: Install with NPM\"}),`\n`,(0,n.jsxs)(e.p,{children:[(0,n.jsx)(e.a,{href:\"https://github.com/fontsource/fontsource\",children:\"Fontsource\"}),` is an updating monorepo\nfull of self-hostable fonts bundled into individual NPM packages. It currently\nsupports all Google Fonts and a small subset of other custom Open Source fonts\nthat have been manually added.`]}),`\n`,(0,n.jsx)(e.p,{children:`Hosting your own fonts locally within a project can lead to large performance\ngains as they won't experience extra (render blocking) network requests, as well\nas streamlining developer experiences.`}),`\n`,(0,n.jsxs)(e.p,{children:[`For the purposes of this guide, we'll use\n`,(0,n.jsx)(e.a,{href:\"https://fonts.google.com/specimen/Open+Sans\",children:\"Open Sans\"}),` for the heading font\nand `,(0,n.jsx)(e.a,{href:\"https://fonts.google.com/specimen/Raleway\",children:\"Raleway\"}),` for the body font. If\nyou have a different font you want to use, you can find the corresponding\npackage on `,(0,n.jsx)(e.a,{href:\"https://www.npmjs.com/search?q=fontsource\",children:\"NPM\"}),` or their\n`,(0,n.jsx)(e.a,{href:\"https://fontsource.org/\",children:\"website\"}),\".\"]}),`\n`,(0,n.jsx)(e.p,{children:`Install the relevant fonts you wish to install using your package manager of\nchoice:`}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-bash\",children:`npm install @fontsource/open-sans @fontsource/raleway\n`})}),`\n`,(0,n.jsxs)(e.p,{children:[\"Assign these fonts to \",(0,n.jsx)(e.code,{children:\"theme.fonts\"}),` to use them with Incmix. More details on\ntheming `,(0,n.jsx)(e.a,{href:\"/docs/styled-system/customize-theme\",children:\"here\"}),\".\"]}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-jsx\",live:\"false\",children:`import { extendTheme } from '@incmix-ui/react'\n\nconst theme = extendTheme({\n  fonts: {\n    heading: \\`'Open Sans', sans-serif\\`,\n    body: \\`'Raleway', sans-serif\\`,\n  },\n})\n\nexport default theme\n`})}),`\n`,(0,n.jsxs)(e.p,{children:[`Then import the relevant font weights and styles into the same root file you\nimport `,(0,n.jsx)(e.code,{children:\"IncmixProvider\"}),\" into.\"]}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-jsx\",live:\"false\",children:`import '@fontsource/raleway/400.css'\nimport '@fontsource/open-sans/700.css'\n\nimport { IncmixProvider, Container, Stack, Heading, Text } from '@incmix-ui/react'\nimport theme from './theme'\n\nconst App = () => (\n  <IncmixProvider theme={theme}>\n    <Container>\n      <Stack>\n        <Heading>The spectacle before us was indeed sublime.</Heading>\n        <Text>\n          Apparently we had reached a great height in the atmosphere, for the sky was a dead black, and the stars had ceased\n          to twinkle. By the same illusion which lifts the horizon of the sea to the level of the spectator on a hillside,\n          the sable cloud beneath was dished out, and the car seemed to float in the middle of an immense dark sphere, whose\n          upper half was strewn with silver. Looking down into the dark gulf below, I could see a ruddy light streaming\n          through a rift in the clouds.\n        </Text>\n      </Stack>\n    </Container>\n  </IncmixProvider>\n)\n`})}),`\n`,(0,n.jsxs)(e.blockquote,{children:[`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsxs)(e.li,{children:[\"For Create React App, you need to set this up in \",(0,n.jsx)(e.code,{children:\"index.js\"})]}),`\n`,(0,n.jsxs)(e.li,{children:[\"In Next.js, this can be found in \",(0,n.jsx)(e.code,{children:\"_app.js\"})]}),`\n`,(0,n.jsxs)(e.li,{children:[\"In Gatsby, usually \",(0,n.jsx)(e.code,{children:\"IncmixProvider\"}),\" is set up in \",(0,n.jsx)(e.code,{children:\"gatsby-browser.js\"}),` using\n`,(0,n.jsx)(e.code,{children:\"wrapRootElement\"})]}),`\n`]}),`\n`]}),`\n`,(0,n.jsxs)(e.h2,{id:\"option-2-using-font-face\",children:[\"Option 2: Using \",(0,n.jsx)(e.code,{children:\"@font-face\"})]}),`\n`,(0,n.jsxs)(e.p,{children:[`Alternatively, custom fonts can be loaded in your Incmix project using the\n`,(0,n.jsx)(e.code,{children:\"Global\"}),\" component from the \",(0,n.jsx)(e.code,{children:\"@emotion/react\"}),\" package and \",(0,n.jsx)(e.code,{children:\"@font-face\"}),` css rules.\nYou can then add these fonts to `,(0,n.jsx)(e.code,{children:\"theme.fonts\"}),` to make use of them throughout the\nIncmix system.`]}),`\n`,(0,n.jsxs)(e.p,{children:[\"First, we'll import all our relevant font files into the \",(0,n.jsx)(e.code,{children:\"public\"}),\" or \",(0,n.jsx)(e.code,{children:\"static\"}),`\ndirectory of your project, where the files will persist in location. Please note\nthat these persisting folders can vary per bundler or framework and should be\ndouble-checked. This can later be used for the `,(0,n.jsx)(e.code,{children:\"url\"}),` selector for the\n`,(0,n.jsx)(e.code,{children:\"@font-face\"}),\" CSS rules.\"]}),`\n`,(0,n.jsxs)(e.p,{children:[\"Next, we'll define a \",(0,n.jsx)(e.code,{children:\"Fonts\"}),\" component that sets up the \",(0,n.jsx)(e.code,{children:\"@font-face\"}),` rules in\nthe `,(0,n.jsx)(e.code,{children:\"styles\"}),\" prop of \",(0,n.jsx)(e.code,{children:\"Global\"}),\":\"]}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-jsx\",live:\"false\",children:`import { Global } from '@emotion/react'\n\nconst Fonts = () => (\n  <Global\n    styles={\\`\n      /* latin */\n      @font-face {\n        font-family: 'Heading Font Name';\n        font-style: normal;\n        font-weight: 700;\n        font-display: swap;\n        src: url('./fonts/headingfont.woff2') format('woff2'), url('./fonts/headingfont.woff') format('woff');\n        unicode-range: U+0000-00FF, U+0131, U+0152-0153, U+02BB-02BC, U+02C6, U+02DA, U+02DC, U+2000-206F, U+2074, U+20AC, U+2122, U+2191, U+2193, U+2212, U+2215, U+FEFF, U+FFFD;\n      }\n      /* latin */\n      @font-face {\n        font-family: 'Body Font Name';\n        font-style: normal;\n        font-weight: 400;\n        font-display: swap;\n        src: url('./fonts/bodyfont.woff2') format('woff2'), url('./fonts/bodyfont.woff') format('woff');\n        unicode-range: U+0000-00FF, U+0131, U+0152-0153, U+02BB-02BC, U+02C6, U+02DA, U+02DC, U+2000-206F, U+2074, U+20AC, U+2122, U+2191, U+2193, U+2212, U+2215, U+FEFF, U+FFFD;\n      }\n      \\`}\n  />\n)\n\nexport default Fonts\n`})}),`\n`,(0,n.jsxs)(e.p,{children:[\"Assign these fonts to \",(0,n.jsx)(e.code,{children:\"theme.fonts\"}),` to use them with Incmix. More details on\ntheming `,(0,n.jsx)(e.a,{href:\"/docs/styled-system/customize-theme\",children:\"here\"}),\".\"]}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-jsx\",live:\"false\",children:`import { extendTheme } from '@incmix-ui/react'\n\nconst theme = extendTheme({\n  fonts: {\n    heading: \\`'Heading Font Name', sans-serif\\`,\n    body: \\`'Body Font Name', sans-serif\\`,\n  },\n})\n\nexport default theme\n`})}),`\n`,(0,n.jsxs)(e.p,{children:[\"Then compose the rest of the project together by importing the \",(0,n.jsx)(e.code,{children:\"Fonts\"}),` component\nand `,(0,n.jsx)(e.code,{children:\"theme\"}),\" file.\"]}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-jsx\",live:\"false\",children:`import { IncmixProvider, Container, Stack, Heading, Text } from '@incmix-ui/react'\nimport Fonts from './fonts'\nimport theme from './theme'\n\nconst App = () => (\n  <IncmixProvider theme={theme}>\n    <Fonts />\n    <Container>\n      <Stack>\n        <Heading>The spectacle before us was indeed sublime.</Heading>\n        <Text>\n          Apparently we had reached a great height in the atmosphere, for the sky was a dead black, and the stars had ceased\n          to twinkle. By the same illusion which lifts the horizon of the sea to the level of the spectator on a hillside,\n          the sable cloud beneath was dished out, and the car seemed to float in the middle of an immense dark sphere, whose\n          upper half was strewn with silver. Looking down into the dark gulf below, I could see a ruddy light streaming\n          through a rift in the clouds.\n        </Text>\n      </Stack>\n    </Container>\n  </IncmixProvider>\n)\n`})})]})}function F(t={}){let{wrapper:e}=t.components||{};return e?(0,n.jsx)(e,Object.assign({},t,{children:(0,n.jsx)(h,t)})):h(t)}var U=F;return b(k);})();\n;return Component;"
    },
    "_id": "community/recipes/using-fonts.mdx",
    "_raw": {
      "sourceFilePath": "community/recipes/using-fonts.mdx",
      "sourceFileName": "using-fonts.mdx",
      "sourceFileDir": "community/recipes",
      "contentType": "mdx",
      "flattenedPath": "community/recipes/using-fonts"
    },
    "type": "Recipe",
    "slug": "/community/recipes/using-fonts",
    "frontMatter": {
      "title": "Using Fonts",
      "description": "A guide for adding fonts to your Incmix project",
      "author": "DecliningLotus",
      "slug": "/community/community/recipes/using-fonts",
      "editUrl": "https://github.com/incmix-ui/incmix-ui-docs/tree/main/content/community/recipes/using-fonts.mdx",
      "headings": [
        {
          "text": "Option 1: Install with NPM",
          "id": "option-1-install-with-npm",
          "level": "h2"
        },
        {
          "text": "Option 2: Using `@font-face`",
          "id": "option-2-using-font-face",
          "level": "h2"
        }
      ]
    }
  },
  {
    "title": "Portals and z-index",
    "description": "Fighting the z-index war with Incmix Portal",
    "author": "mrmckeb",
    "body": {
      "raw": "\nEvery UI has stackable layers and it is important to have control over how these\nlayers play together. Some examples of stackable layers are tooltips, modals,\npopovers, selects, dropdowns, and menus.\n\nThe issues that come up across the usage of these layers are related to z-index\nand visibility handling, in other words, \"what layer goes on top?\"\n\n## What's wrong with z-index?\n\nYou might have encountered this if you've worked in codebases with\n`z-index: 9999`. This technique is an attempt to ensure than an element is\nalways on top of all other elements.\n\nBut this method isn't as safe as you might think:\n\n- It introduces scaling issues, which you can manage with global values (such as\n  a [theme](/docs/styled-system/theme#z-index-values)).\n- Components are still constrained and impacted by stacking contexts.\n\n### Stacking contexts\n\nA stacking context can be created in many ways, and here are just a few\nexamples:\n\n- Element with a `position: absolute` or `position: relative` and `z-index`\n  value other than `auto`.\n- An element with an `opacity` value less than `1`.\n- An element with a `transform` or `filter` applied.\n- A child of a flexbox or grid container with a `z-index` other than `auto`.\n\nOnce a stacking context is created, the `z-index` rules of the any child\nstacking context(s) now only have meaning in this parent.\n\n> We have some links at the end of this page to help you learn more about\n> stacking contexts.\n\n## Incmix Portal to the rescue\n\nAn alternative to `z-index` is to use the DOM's natural stacking order to our\nadvantage. [React's Portals](https://reactjs.org/docs/portals.html) allow us to\ninsert a child into a different location in the document, whilst not affecting\nother behaviours in React such as event bubbling.\n\nIncmix Portal implementation allows for nesting, and defaults to inserting\nchildren at the end of `document.body`.\n\nWith this approach, you can create a stacking context for your application, and\nbe certain that any children you render with Portal will always appear on top of\neverything else in your application, regardless of child stacking contexts.\n\nThis is particularly useful for components like modals and toast notifications.\n\n### Can I still use z-index alongside Portals?\n\nYes, there are many cases where this will make sense.\n\nAs a general rule, we recommend not exceeding `z-index` values of more than `1`\nor `2`, and to use stacking contexts to combat more complex stacking issues.\n\n## Further reading\n\nIf you're interested in learning more about `z-index` and stacking contexts,\ncheck out these great resources:\n\n- [Understanding z-index (MDN)](https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Positioning/Understanding_z_index)\n- [The stacking context (MDN)](https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Positioning/Understanding_z_index/The_stacking_context)\n",
      "code": "var Component=(()=>{var h=Object.create;var a=Object.defineProperty;var u=Object.getOwnPropertyDescriptor;var p=Object.getOwnPropertyNames;var m=Object.getPrototypeOf,g=Object.prototype.hasOwnProperty;var x=(t,e)=>()=>(e||t((e={exports:{}}).exports,e),e.exports),f=(t,e)=>{for(var i in e)a(t,i,{get:e[i],enumerable:!0})},c=(t,e,i,r)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let o of p(e))!g.call(t,o)&&o!==i&&a(t,o,{get:()=>e[o],enumerable:!(r=u(e,o))||r.enumerable});return t};var w=(t,e,i)=>(i=t!=null?h(m(t)):{},c(e||!t||!t.__esModule?a(i,\"default\",{value:t,enumerable:!0}):i,t)),y=t=>c(a({},\"__esModule\",{value:!0}),t);var l=x((S,s)=>{s.exports=_jsx_runtime});var z={};f(z,{default:()=>v,frontmatter:()=>k});var n=w(l()),k={title:\"Portals and z-index\",description:\"Fighting the z-index war with Incmix Portal\",author:\"mrmckeb\"};function d(t){let e=Object.assign({p:\"p\",h2:\"h2\",code:\"code\",ul:\"ul\",li:\"li\",a:\"a\",h3:\"h3\",blockquote:\"blockquote\"},t.components);return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(e.p,{children:`Every UI has stackable layers and it is important to have control over how these\nlayers play together. Some examples of stackable layers are tooltips, modals,\npopovers, selects, dropdowns, and menus.`}),`\n`,(0,n.jsx)(e.p,{children:`The issues that come up across the usage of these layers are related to z-index\nand visibility handling, in other words, \"what layer goes on top?\"`}),`\n`,(0,n.jsx)(e.h2,{id:\"whats-wrong-with-z-index\",children:\"What's wrong with z-index?\"}),`\n`,(0,n.jsxs)(e.p,{children:[`You might have encountered this if you've worked in codebases with\n`,(0,n.jsx)(e.code,{children:\"z-index: 9999\"}),`. This technique is an attempt to ensure than an element is\nalways on top of all other elements.`]}),`\n`,(0,n.jsx)(e.p,{children:\"But this method isn't as safe as you might think:\"}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsxs)(e.li,{children:[`It introduces scaling issues, which you can manage with global values (such as\na `,(0,n.jsx)(e.a,{href:\"/docs/styled-system/theme#z-index-values\",children:\"theme\"}),\").\"]}),`\n`,(0,n.jsx)(e.li,{children:\"Components are still constrained and impacted by stacking contexts.\"}),`\n`]}),`\n`,(0,n.jsx)(e.h3,{id:\"stacking-contexts\",children:\"Stacking contexts\"}),`\n`,(0,n.jsx)(e.p,{children:`A stacking context can be created in many ways, and here are just a few\nexamples:`}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsxs)(e.li,{children:[\"Element with a \",(0,n.jsx)(e.code,{children:\"position: absolute\"}),\" or \",(0,n.jsx)(e.code,{children:\"position: relative\"}),\" and \",(0,n.jsx)(e.code,{children:\"z-index\"}),`\nvalue other than `,(0,n.jsx)(e.code,{children:\"auto\"}),\".\"]}),`\n`,(0,n.jsxs)(e.li,{children:[\"An element with an \",(0,n.jsx)(e.code,{children:\"opacity\"}),\" value less than \",(0,n.jsx)(e.code,{children:\"1\"}),\".\"]}),`\n`,(0,n.jsxs)(e.li,{children:[\"An element with a \",(0,n.jsx)(e.code,{children:\"transform\"}),\" or \",(0,n.jsx)(e.code,{children:\"filter\"}),\" applied.\"]}),`\n`,(0,n.jsxs)(e.li,{children:[\"A child of a flexbox or grid container with a \",(0,n.jsx)(e.code,{children:\"z-index\"}),\" other than \",(0,n.jsx)(e.code,{children:\"auto\"}),\".\"]}),`\n`]}),`\n`,(0,n.jsxs)(e.p,{children:[\"Once a stacking context is created, the \",(0,n.jsx)(e.code,{children:\"z-index\"}),` rules of the any child\nstacking context(s) now only have meaning in this parent.`]}),`\n`,(0,n.jsxs)(e.blockquote,{children:[`\n`,(0,n.jsx)(e.p,{children:`We have some links at the end of this page to help you learn more about\nstacking contexts.`}),`\n`]}),`\n`,(0,n.jsx)(e.h2,{id:\"incmix-portal-to-the-rescue\",children:\"Incmix Portal to the rescue\"}),`\n`,(0,n.jsxs)(e.p,{children:[\"An alternative to \",(0,n.jsx)(e.code,{children:\"z-index\"}),` is to use the DOM's natural stacking order to our\nadvantage. `,(0,n.jsx)(e.a,{href:\"https://reactjs.org/docs/portals.html\",children:\"React's Portals\"}),` allow us to\ninsert a child into a different location in the document, whilst not affecting\nother behaviours in React such as event bubbling.`]}),`\n`,(0,n.jsxs)(e.p,{children:[`Incmix Portal implementation allows for nesting, and defaults to inserting\nchildren at the end of `,(0,n.jsx)(e.code,{children:\"document.body\"}),\".\"]}),`\n`,(0,n.jsx)(e.p,{children:`With this approach, you can create a stacking context for your application, and\nbe certain that any children you render with Portal will always appear on top of\neverything else in your application, regardless of child stacking contexts.`}),`\n`,(0,n.jsx)(e.p,{children:\"This is particularly useful for components like modals and toast notifications.\"}),`\n`,(0,n.jsx)(e.h3,{id:\"can-i-still-use-z-index-alongside-portals\",children:\"Can I still use z-index alongside Portals?\"}),`\n`,(0,n.jsx)(e.p,{children:\"Yes, there are many cases where this will make sense.\"}),`\n`,(0,n.jsxs)(e.p,{children:[\"As a general rule, we recommend not exceeding \",(0,n.jsx)(e.code,{children:\"z-index\"}),\" values of more than \",(0,n.jsx)(e.code,{children:\"1\"}),`\nor `,(0,n.jsx)(e.code,{children:\"2\"}),\", and to use stacking contexts to combat more complex stacking issues.\"]}),`\n`,(0,n.jsx)(e.h2,{id:\"further-reading\",children:\"Further reading\"}),`\n`,(0,n.jsxs)(e.p,{children:[\"If you're interested in learning more about \",(0,n.jsx)(e.code,{children:\"z-index\"}),` and stacking contexts,\ncheck out these great resources:`]}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsx)(e.li,{children:(0,n.jsx)(e.a,{href:\"https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Positioning/Understanding_z_index\",children:\"Understanding z-index (MDN)\"})}),`\n`,(0,n.jsx)(e.li,{children:(0,n.jsx)(e.a,{href:\"https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Positioning/Understanding_z_index/The_stacking_context\",children:\"The stacking context (MDN)\"})}),`\n`]})]})}function b(t={}){let{wrapper:e}=t.components||{};return e?(0,n.jsx)(e,Object.assign({},t,{children:(0,n.jsx)(d,t)})):d(t)}var v=b;return y(z);})();\n;return Component;"
    },
    "_id": "community/recipes/z-index.mdx",
    "_raw": {
      "sourceFilePath": "community/recipes/z-index.mdx",
      "sourceFileName": "z-index.mdx",
      "sourceFileDir": "community/recipes",
      "contentType": "mdx",
      "flattenedPath": "community/recipes/z-"
    },
    "type": "Recipe",
    "slug": "/community/recipes/z-",
    "frontMatter": {
      "title": "Portals and z-index",
      "description": "Fighting the z-index war with Incmix Portal",
      "author": "mrmckeb",
      "slug": "/community/community/recipes/z-",
      "editUrl": "https://github.com/incmix-ui/incmix-ui-docs/tree/main/content/community/recipes/z-index.mdx",
      "headings": [
        {
          "text": "What's wrong with z-index?",
          "id": "whats-wrong-with-z-index",
          "level": "h2"
        },
        {
          "text": "Stacking contexts",
          "id": "stacking-contexts",
          "level": "h3"
        },
        {
          "text": "Incmix Portal to the rescue",
          "id": "incmix-portal-to-the-rescue",
          "level": "h2"
        },
        {
          "text": "Can I still use z-index alongside Portals?",
          "id": "can-i-still-use-z-index-alongside-portals",
          "level": "h3"
        },
        {
          "text": "Further reading",
          "id": "further-reading",
          "level": "h2"
        }
      ]
    }
  }
]
