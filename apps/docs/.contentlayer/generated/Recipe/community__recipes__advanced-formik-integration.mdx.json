{
  "title": "Advanced Formik integration",
  "description": "Advanced customization and integration of Incmix UI and Formik.",
  "tags": ["formik", "form", "integration"],
  "author": "aacevski",
  "body": {
    "raw": "\nIncmix UI can be coupled smoothly with [Formik](https://formik.org/), by the end\nof the example up ahead, you will be proficient at Incmix & Formik.\n\nIn the `ImageRadio` component, we will utilize the `useRadio` hook from Incmix\nUI to get the necessary props and the `isChecked` boolean. `isChecked` will be\nused for validation in Formik's `useField` hook.\n\nTo finalize, we will need to render our content and pass `getInputProps` and\n`getCheckedProps` from Incmix UI.\n\nimport {\n  App as AppValidation,\n  Index as IndexValidation,\n  ImageRadio as ImageRadioValidation,\n  RadioGroup as RadioGroupValidation,\n  Input as InputValidation,\n} from 'configs/sandpack-contents/advanced-formik-integration/image-radio-buttons'\n\n<SandpackEmbed\n  dependencies={{\n    formik: '2.2.9',\n  }}\n  files={{\n    '/App.tsx': AppValidation,\n    '/index.tsx': IndexValidation,\n    '/image-radio.tsx': ImageRadioValidation,\n    '/radio-group.tsx': RadioGroupValidation,\n    '/input.tsx': InputValidation,\n  }}\n/>\n\nIn the example above, there are 2 more components:\n\n- `Radio Group` - which renders multiple radio buttons\n- `Input` - where we will enter our value of choice\n\nUpon submitting the form, in the CodeSandbox console, you should see the result\nof which radio you've selected but also the value of the input.\n\n> If you have any questions, or need help around an advanced usage, don't\n> hesitate to reach out in our [Discord server](https://discord.gg/incmix-ui).\n",
    "code": "var Component=(()=>{var g=Object.create;var a=Object.defineProperty;var x=Object.getOwnPropertyDescriptor;var I=Object.getOwnPropertyNames;var R=Object.getPrototypeOf,k=Object.prototype.hasOwnProperty;var d=(i,e)=>()=>(e||i((e={exports:{}}).exports,e),e.exports),b=(i,e)=>{for(var r in e)a(i,r,{get:e[r],enumerable:!0})},m=(i,e,r,p)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let t of I(e))!k.call(i,t)&&t!==r&&a(i,t,{get:()=>e[t],enumerable:!(p=x(e,t))||p.enumerable});return i};var s=(i,e,r)=>(r=i!=null?g(R(i)):{},m(e||!i||!i.__esModule?a(r,\"default\",{value:i,enumerable:!0}):r,i)),P=i=>m(a({},\"__esModule\",{value:!0}),i);var u=d((G,c)=>{c.exports=_jsx_runtime});var h=d((V,l)=>{l.exports={ImageRadio:`import { useField } from \"formik\";\nimport {\n  Box,\n  Image,\n  UseRadioProps,\n  useRadio,\n  ImageProps,\n  incmix,\n  useRadioGroupContext,\n} from \"@incmix-ui/react\";\nimport * as React from \"react\";\n\ntype Props = UseRadioProps &\n  ImageProps & {\n    image: string,\n  };\n\nconst ImageRadio = React.forwardRef((props: Props, ref) => {\n  const { image, name, ...radioProps } = props;\n  const group = useRadioGroupContext();\n\n  let isChecked = group.value.toString() === props.value.toString();\n\n  const [{ checked, ...field }] = useField({\n    name,\n    type: \"radio\",\n    value: radioProps.value.toString(),\n    checked: isChecked,\n  });\n\n  const { state, getInputProps, getCheckboxProps, htmlProps, getLabelProps } =\n    useRadio({\n      isChecked: isChecked,\n      ...field,\n    });\n\n  return (\n    <incmix.label {...htmlProps} cursor=\"pointer\">\n      <input {...getInputProps({}, ref)} hidden />\n      <Box\n        {...getCheckboxProps()}\n        bg={state.isChecked ? \"green.200\" : \"transparent\"}\n        w={12}\n        p={1}\n        rounded=\"full\"\n      >\n        <Image src={image} rounded=\"full\" {...getLabelProps()} />\n      </Box>\n    </incmix.label>\n  );\n});\n\nexport default ImageRadio;`,RadioGroup:`import { useField } from \"formik\";\nimport {\n  RadioGroup as IncmixRadioGroup,\n  RadioGroupProps as IncmixRadioGroupProps,\n} from \"@incmix-ui/react\";\nimport * as React from \"react\";\n\ntype Props = IncmixRadioGroupProps;\n\nconst RadioGroup = ({ name, children, ...props }: Props) => {\n  const [field, , { setValue }] = useField({ name, value: props.value });\n\n  const namedChildren = React.Children.map(children, (child) => {\n    if (!React.isValidElement(child)) return;\n\n    return React.cloneElement(child, {\n      name,\n    });\n  });\n\n  return (\n    <IncmixRadioGroup\n      {...props}\n      {...field}\n      onChange={setValue}\n      children={namedChildren}\n    />\n  );\n};\n\nexport default RadioGroup;`,Input:`import { FieldHookConfig, useField } from \"formik\";\nimport {\n  Input as IncmixInput,\n  InputProps as IncmixInputProps,\n} from \"@incmix-ui/react\";\n\ntype Props = IncmixInputProps & FieldHookConfig<\"input\">;\n\nconst Input = ({ name, ...props }: Props) => {\n  const [field] = useField(name);\n  return <IncmixInput {...props} {...field} />;\n};\n\nexport default Input;`,App:`import { Box, Button } from \"@incmix-ui/react\";\nimport { Formik, FormikProps } from \"formik\";\n\nimport Input from \"./input\";\nimport RadioGroup from \"./radio-group\";\nimport ImageRadio from \"./image-radio\";\n\nconst AVATARS = [\n  { name: \"Kat\", image: \"https://randomuser.me/api/portraits/women/44.jpg\" },\n  { name: \"Kevin\", image: \"https://randomuser.me/api/portraits/men/86.jpg\" },\n  { name: \"Andy\", image: \"https://randomuser.me/api/portraits/men/29.jpg\" },\n  { name: \"Jess\", image: \"https://randomuser.me/api/portraits/women/95.jpg\" }\n];\n\ntype Values = {\n  email: string;\n  avatar: string;\n};\n\nexport default function App() {\n  return (\n    <Box p={24}>\n      <Formik\n        initialValues={{ email: \"\", avatar: AVATARS[0].name }}\n        onSubmit={console.log}\n      >\n        {(props: FormikProps<Values>) => (\n          <form onSubmit={props.handleSubmit}>\n            <Input name=\"email\" />\n            <RadioGroup name=\"avatar\" py={2} display=\"flex\" gridColumnGap={2}>\n              {AVATARS.map(({ name, image }) => {\n                console.log(\"App line 32 ~ name: \", name)\n                return (\n                <ImageRadio key={image} image={image} value={name} />\n              )})}\n            </RadioGroup>\n            <Button type=\"submit\">Submit</Button>\n          </form>\n        )}\n      </Formik>\n    </Box>\n  );\n}`,Index:`import * as React from \"react\";\nimport { createRoot } from \"react-dom/client\";\nimport { IncmixProvider } from \"@incmix-ui/react\";\n\nimport App from \"./App\";\n\nconst container = document.getElementById(\"root\");\nconst root = createRoot(container!);\nroot.render(\n  <IncmixProvider>\n    <App />\n  </IncmixProvider>\n);`}});var F={};b(F,{default:()=>C,frontmatter:()=>v});var o=s(u()),n=s(h()),v={title:\"Advanced Formik integration\",description:\"Advanced customization and integration of Incmix UI and Formik.\",tags:[\"formik\",\"form\",\"integration\"],author:\"aacevski\"};function f(i){let e=Object.assign({p:\"p\",a:\"a\",code:\"code\",ul:\"ul\",li:\"li\",blockquote:\"blockquote\"},i.components),{SandpackEmbed:r}=e;return r||A(\"SandpackEmbed\",!0,\"26:1-37:3\"),(0,o.jsxs)(o.Fragment,{children:[(0,o.jsxs)(e.p,{children:[\"Incmix UI can be coupled smoothly with \",(0,o.jsx)(e.a,{href:\"https://formik.org/\",children:\"Formik\"}),`, by the end\nof the example up ahead, you will be proficient at Incmix & Formik.`]}),`\n`,(0,o.jsxs)(e.p,{children:[\"In the \",(0,o.jsx)(e.code,{children:\"ImageRadio\"}),\" component, we will utilize the \",(0,o.jsx)(e.code,{children:\"useRadio\"}),` hook from Incmix\nUI to get the necessary props and the `,(0,o.jsx)(e.code,{children:\"isChecked\"}),\" boolean. \",(0,o.jsx)(e.code,{children:\"isChecked\"}),` will be\nused for validation in Formik's `,(0,o.jsx)(e.code,{children:\"useField\"}),\" hook.\"]}),`\n`,(0,o.jsxs)(e.p,{children:[\"To finalize, we will need to render our content and pass \",(0,o.jsx)(e.code,{children:\"getInputProps\"}),` and\n`,(0,o.jsx)(e.code,{children:\"getCheckedProps\"}),\" from Incmix UI.\"]}),`\n`,`\n`,(0,o.jsx)(r,{dependencies:{formik:\"2.2.9\"},files:{\"/App.tsx\":n.App,\"/index.tsx\":n.Index,\"/image-radio.tsx\":n.ImageRadio,\"/radio-group.tsx\":n.RadioGroup,\"/input.tsx\":n.Input}}),`\n`,(0,o.jsx)(e.p,{children:\"In the example above, there are 2 more components:\"}),`\n`,(0,o.jsxs)(e.ul,{children:[`\n`,(0,o.jsxs)(e.li,{children:[(0,o.jsx)(e.code,{children:\"Radio Group\"}),\" - which renders multiple radio buttons\"]}),`\n`,(0,o.jsxs)(e.li,{children:[(0,o.jsx)(e.code,{children:\"Input\"}),\" - where we will enter our value of choice\"]}),`\n`]}),`\n`,(0,o.jsx)(e.p,{children:`Upon submitting the form, in the CodeSandbox console, you should see the result\nof which radio you've selected but also the value of the input.`}),`\n`,(0,o.jsxs)(e.blockquote,{children:[`\n`,(0,o.jsxs)(e.p,{children:[`If you have any questions, or need help around an advanced usage, don't\nhesitate to reach out in our `,(0,o.jsx)(e.a,{href:\"https://discord.gg/incmix-ui\",children:\"Discord server\"}),\".\"]}),`\n`]})]})}function y(i={}){let{wrapper:e}=i.components||{};return e?(0,o.jsx)(e,Object.assign({},i,{children:(0,o.jsx)(f,i)})):f(i)}var C=y;function A(i,e,r){throw new Error(\"Expected \"+(e?\"component\":\"object\")+\" `\"+i+\"` to be defined: you likely forgot to import, pass, or provide it.\"+(r?\"\\nIt\\u2019s referenced in your code at `\"+r+\"` in `/Users/uma.krishnan/projects/incmixlabs/incmix-ui/apps/docs/content/_mdx_bundler_entry_point-be8ba9f1-ba9c-4f5b-96c8-1201ef0a9404.mdx`\":\"\"))}return P(F);})();\n;return Component;"
  },
  "_id": "community/recipes/advanced-formik-integration.mdx",
  "_raw": {
    "sourceFilePath": "community/recipes/advanced-formik-integration.mdx",
    "sourceFileName": "advanced-formik-integration.mdx",
    "sourceFileDir": "community/recipes",
    "contentType": "mdx",
    "flattenedPath": "community/recipes/advanced-formik-integration"
  },
  "type": "Recipe",
  "slug": "/community/recipes/advanced-formik-integration",
  "frontMatter": {
    "title": "Advanced Formik integration",
    "description": "Advanced customization and integration of Incmix UI and Formik.",
    "tags": ["formik", "form", "integration"],
    "author": "aacevski",
    "slug": "/community/community/recipes/advanced-formik-integration",
    "editUrl": "https://github.com/incmix-ui/incmix-ui-docs/tree/main/content/community/recipes/advanced-formik-integration.mdx",
    "headings": []
  }
}
