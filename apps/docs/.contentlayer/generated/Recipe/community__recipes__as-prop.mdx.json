{
  "title": "The as prop and Custom component",
  "description": "How to get the as prop working properly for your custom components",
  "author": "segunadebayo",
  "body": {
    "raw": "\nBy default, all Incmix components work with the `as` prop. There might be some\ncases where you need to create smaller components with pre-defined styles, and\nneed the `as` prop to work as well.\n\nFor example, let's say you create a `Card` component with pre-defined styles\nlike this:\n\n```tsx live=false\nconst Card = (props: BoxProps) => <Box px=\"4\" py=\"5\" rounded=\"sm\" shadow=\"lg\" {...props} />\n```\n\nand you need to consume this component in a way that works with the `as` prop,\nlike this:\n\n```jsx live=false\nconst Usage = () => <Card as=\"button\">This is a card</Card>\n```\n\nYou might run into type errors like this:\n\n```sh\nType '{ children: string; as: string; }' is not assignable to type 'IntrinsicAttributes & BoxProps'.\n  Property 'as' does not exist on type 'IntrinsicAttributes & BoxProps'.\n```\n\nTo resolve this, you have 3 options\n\n## Option 1: Using `forwardRef` from `@incmix-ui/react`\n\nThis is the recommended approach as it ensures your components forwards their\nreference properly.\n\n> Note ðŸš¨: You need to use forwardRef from incmix-ui not react.\n\n```tsx live=false\nimport { forwardRef, Box, BoxProps } from '@incmix-ui/react'\n\nconst Card = forwardRef<BoxProps, 'div'>((props, ref) => <Box px=\"4\" py=\"5\" rounded=\"sm\" shadow=\"lg\" ref={ref} {...props} />)\n```\n\n## Option 2: Cast the component as a `IncmixComponent`\n\nThe `IncmixComponent` is a type we use internally to mark specific components as\nIncmix components rather than using `React.PropsWithChildren`.\n\nThis is because a `IncmixComponent` gets its props from the React component or\nelement type, and adds incmix specific style props.\n\n`IncmixComponent` takes 2 type generic, the element type (like \"div\", \"button\",\netc), and any custom props (like `isOpen`, `isDisabled`, etc)\n\n```tsx live=false\nimport { IncmixComponent, Box, BoxProps } from '@incmix-ui/react'\n\ntype DivComponent = IncmixComponent<'div', {}>\n\nconst Card = ((props: BoxProps) => <Box px=\"4\" py=\"5\" rounded=\"sm\" shadow=\"lg\" {...props} />) as DivComponent\n```\n\n## Option 3: Use the `incmix` factory function\n\nThe Incmix factory function is still a work in progress but it can be useful in\nthis case as well. It can also be used to convert a non-incmix component into a\nIncmix enabled component.\n\nWhat you need to do is to call the `incmix` function and pass it any element or\ncomponent type.\n\n```jsx live=false\nimport { incmix } from '@incmix-ui/react'\n\nconst Card = incmix('div', {\n  // attach style props\n  baseStyle: {\n    px: '4',\n    py: '5',\n    rounded: 'sm',\n    shadow: 'lg',\n  },\n})\n```\n\nThese are the cases you can get the `as` prop working with custom components. At\nleast for now.\n",
    "code": "var Component=(()=>{var l=Object.create;var r=Object.defineProperty;var h=Object.getOwnPropertyDescriptor;var m=Object.getOwnPropertyNames;var u=Object.getPrototypeOf,x=Object.prototype.hasOwnProperty;var f=(o,e)=>()=>(e||o((e={exports:{}}).exports,e),e.exports),y=(o,e)=>{for(var t in e)r(o,t,{get:e[t],enumerable:!0})},s=(o,e,t,c)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let i of m(e))!x.call(o,i)&&i!==t&&r(o,i,{get:()=>e[i],enumerable:!(c=h(e,i))||c.enumerable});return o};var g=(o,e,t)=>(t=o!=null?l(u(o)):{},s(e||!o||!o.__esModule?r(t,\"default\",{value:o,enumerable:!0}):t,o)),w=o=>s(r({},\"__esModule\",{value:!0}),o);var d=f((I,a)=>{a.exports=_jsx_runtime});var v={};y(v,{default:()=>k,frontmatter:()=>C});var n=g(d()),C={title:\"The as prop and Custom component\",description:\"How to get the as prop working properly for your custom components\",author:\"segunadebayo\"};function p(o){let e=Object.assign({p:\"p\",code:\"code\",pre:\"pre\",h2:\"h2\",blockquote:\"blockquote\"},o.components);return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsxs)(e.p,{children:[\"By default, all Incmix components work with the \",(0,n.jsx)(e.code,{children:\"as\"}),` prop. There might be some\ncases where you need to create smaller components with pre-defined styles, and\nneed the `,(0,n.jsx)(e.code,{children:\"as\"}),\" prop to work as well.\"]}),`\n`,(0,n.jsxs)(e.p,{children:[\"For example, let's say you create a \",(0,n.jsx)(e.code,{children:\"Card\"}),` component with pre-defined styles\nlike this:`]}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-tsx\",live:\"false\",children:`const Card = (props: BoxProps) => <Box px=\"4\" py=\"5\" rounded=\"sm\" shadow=\"lg\" {...props} />\n`})}),`\n`,(0,n.jsxs)(e.p,{children:[\"and you need to consume this component in a way that works with the \",(0,n.jsx)(e.code,{children:\"as\"}),` prop,\nlike this:`]}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-jsx\",live:\"false\",children:`const Usage = () => <Card as=\"button\">This is a card</Card>\n`})}),`\n`,(0,n.jsx)(e.p,{children:\"You might run into type errors like this:\"}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-sh\",children:`Type '{ children: string; as: string; }' is not assignable to type 'IntrinsicAttributes & BoxProps'.\n  Property 'as' does not exist on type 'IntrinsicAttributes & BoxProps'.\n`})}),`\n`,(0,n.jsx)(e.p,{children:\"To resolve this, you have 3 options\"}),`\n`,(0,n.jsxs)(e.h2,{id:\"option-1-using-forwardref-from-incmix-uireact\",children:[\"Option 1: Using \",(0,n.jsx)(e.code,{children:\"forwardRef\"}),\" from \",(0,n.jsx)(e.code,{children:\"@incmix-ui/react\"})]}),`\n`,(0,n.jsx)(e.p,{children:`This is the recommended approach as it ensures your components forwards their\nreference properly.`}),`\n`,(0,n.jsxs)(e.blockquote,{children:[`\n`,(0,n.jsx)(e.p,{children:\"Note \\u{1F6A8}: You need to use forwardRef from incmix-ui not react.\"}),`\n`]}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-tsx\",live:\"false\",children:`import { forwardRef, Box, BoxProps } from '@incmix-ui/react'\n\nconst Card = forwardRef<BoxProps, 'div'>((props, ref) => <Box px=\"4\" py=\"5\" rounded=\"sm\" shadow=\"lg\" ref={ref} {...props} />)\n`})}),`\n`,(0,n.jsxs)(e.h2,{id:\"option-2-cast-the-component-as-a-incmixcomponent\",children:[\"Option 2: Cast the component as a \",(0,n.jsx)(e.code,{children:\"IncmixComponent\"})]}),`\n`,(0,n.jsxs)(e.p,{children:[\"The \",(0,n.jsx)(e.code,{children:\"IncmixComponent\"}),` is a type we use internally to mark specific components as\nIncmix components rather than using `,(0,n.jsx)(e.code,{children:\"React.PropsWithChildren\"}),\".\"]}),`\n`,(0,n.jsxs)(e.p,{children:[\"This is because a \",(0,n.jsx)(e.code,{children:\"IncmixComponent\"}),` gets its props from the React component or\nelement type, and adds incmix specific style props.`]}),`\n`,(0,n.jsxs)(e.p,{children:[(0,n.jsx)(e.code,{children:\"IncmixComponent\"}),` takes 2 type generic, the element type (like \"div\", \"button\",\netc), and any custom props (like `,(0,n.jsx)(e.code,{children:\"isOpen\"}),\", \",(0,n.jsx)(e.code,{children:\"isDisabled\"}),\", etc)\"]}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-tsx\",live:\"false\",children:`import { IncmixComponent, Box, BoxProps } from '@incmix-ui/react'\n\ntype DivComponent = IncmixComponent<'div', {}>\n\nconst Card = ((props: BoxProps) => <Box px=\"4\" py=\"5\" rounded=\"sm\" shadow=\"lg\" {...props} />) as DivComponent\n`})}),`\n`,(0,n.jsxs)(e.h2,{id:\"option-3-use-the-incmix-factory-function\",children:[\"Option 3: Use the \",(0,n.jsx)(e.code,{children:\"incmix\"}),\" factory function\"]}),`\n`,(0,n.jsx)(e.p,{children:`The Incmix factory function is still a work in progress but it can be useful in\nthis case as well. It can also be used to convert a non-incmix component into a\nIncmix enabled component.`}),`\n`,(0,n.jsxs)(e.p,{children:[\"What you need to do is to call the \",(0,n.jsx)(e.code,{children:\"incmix\"}),` function and pass it any element or\ncomponent type.`]}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-jsx\",live:\"false\",children:`import { incmix } from '@incmix-ui/react'\n\nconst Card = incmix('div', {\n  // attach style props\n  baseStyle: {\n    px: '4',\n    py: '5',\n    rounded: 'sm',\n    shadow: 'lg',\n  },\n})\n`})}),`\n`,(0,n.jsxs)(e.p,{children:[\"These are the cases you can get the \",(0,n.jsx)(e.code,{children:\"as\"}),` prop working with custom components. At\nleast for now.`]})]})}function b(o={}){let{wrapper:e}=o.components||{};return e?(0,n.jsx)(e,Object.assign({},o,{children:(0,n.jsx)(p,o)})):p(o)}var k=b;return w(v);})();\n;return Component;"
  },
  "_id": "community/recipes/as-prop.mdx",
  "_raw": {
    "sourceFilePath": "community/recipes/as-prop.mdx",
    "sourceFileName": "as-prop.mdx",
    "sourceFileDir": "community/recipes",
    "contentType": "mdx",
    "flattenedPath": "community/recipes/as-prop"
  },
  "type": "Recipe",
  "slug": "/community/recipes/as-prop",
  "frontMatter": {
    "title": "The as prop and Custom component",
    "description": "How to get the as prop working properly for your custom components",
    "author": "segunadebayo",
    "slug": "/community/community/recipes/as-prop",
    "editUrl": "https://github.com/incmix-ui/incmix-ui-docs/tree/main/content/community/recipes/as-prop.mdx",
    "headings": [
      {
        "text": "Option 1: Using `forwardRef` from `@incmix-ui/react`",
        "id": "option-1-using-forwardref-from-incmix-uireact",
        "level": "h2"
      },
      {
        "text": "Option 2: Cast the component as a `IncmixComponent`",
        "id": "option-2-cast-the-component-as-a-incmixcomponent",
        "level": "h2"
      },
      {
        "text": "Option 3: Use the `incmix` factory function",
        "id": "option-3-use-the-incmix-factory-function",
        "level": "h2"
      }
    ]
  }
}
